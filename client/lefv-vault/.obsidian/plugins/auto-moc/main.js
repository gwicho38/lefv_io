/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  TagSuggestModal: () => TagSuggestModal,
  default: () => AutoMOC
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  showRibbonButton: true
};
var TagSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
    this.modalEl.prepend(this.modalEl.createEl("h2", {
      text: "Import notes with tags matching"
    }));
  }
  onOpen() {
    this.setPlaceholder("Type the name of a tag...");
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to select tag" },
      { command: "esc", purpose: "to dismiss" }
    ]);
    this.inputEl.focus();
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  getItems() {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let tagsSet = new Set();
    Object.keys(allFiles).forEach((key) => {
      let file = this.app.vault.getAbstractFileByPath(key);
      if (file instanceof import_obsidian.TFile) {
        const tags = app.metadataCache.getFileCache(file).tags;
        if (tags) {
          for (const tag of tags) {
            tagsSet.add(tag["tag"]);
          }
        }
      }
    });
    return Array.from(tagsSet).sort();
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    this.selection = item;
    this.plugin.runAutoMOC(item);
  }
};
var AutoMOC = class extends import_obsidian.Plugin {
  getPresentLinks(currFilePath) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    const presentLinks = Object.keys(allFiles[currFilePath]);
    return presentLinks.sort();
  }
  getLinkedMentions(currFilePath) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let linkedMentions = [];
    Object.keys(allFiles).forEach((key) => {
      if (currFilePath in allFiles[key]) {
        linkedMentions.push(key);
      }
    });
    return linkedMentions.sort();
  }
  getTaggedMentions(currFileName) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let taggedMentions = [];
    const toCompare = currFileName;
    Object.keys(allFiles).forEach((key) => {
      let file = this.app.vault.getAbstractFileByPath(key);
      if (file instanceof import_obsidian.TFile) {
        const tags = app.metadataCache.getFileCache(file).tags;
        if (tags) {
          for (const tag of tags) {
            if (tag["tag"] === toCompare) {
              taggedMentions.push(file.path);
            }
          }
        }
      }
    });
    return taggedMentions;
  }
  addMissingLinks(activeFileView, presentLinks, allLinkedMentions) {
    let addFlag = false;
    for (const path of allLinkedMentions) {
      if (!presentLinks.includes(path)) {
        let found = this.app.vault.getAbstractFileByPath(path);
        if (found instanceof import_obsidian.TFile) {
          const fileAliases = this.app.metadataCache.getFileCache(found).frontmatter;
          let alias = "";
          if (fileAliases && Array.isArray(fileAliases["aliases"]) && fileAliases["aliases"].length > 0) {
            alias = "|" + fileAliases.aliases[0];
          }
          activeFileView.editor.replaceSelection(this.app.fileManager.generateMarkdownLink(found, activeFileView.file.path, alias = alias) + "\n");
          addFlag = true;
        }
      }
    }
    if (!addFlag)
      new import_obsidian.Notice("No new links found");
  }
  runAutoMOC(tag) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view != null && view.file.extension === "md") {
      new import_obsidian.Notice("Linking mentions");
      const presentLinks = this.getPresentLinks(view.file.path);
      let linkedMentions;
      if (!tag) {
        linkedMentions = this.getLinkedMentions(view.file.path);
      } else {
        linkedMentions = this.getTaggedMentions(tag);
      }
      this.addMissingLinks(view, presentLinks, linkedMentions);
    } else {
      new import_obsidian.Notice("Failed to link mentions, file type is not a markdown file");
    }
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      if (this.settings.showRibbonButton) {
        const ribbonIconEl = this.addRibbonIcon("sheets-in-box", "AutoMOC", (evt) => {
          this.runAutoMOC();
        });
      }
      this.addCommand({
        id: "add-missing-linked-mentions",
        name: "Add missing linked mentions at the cursor position",
        editorCallback: (editor, view) => {
          this.runAutoMOC();
        }
      });
      this.addCommand({
        id: "add-missing-notes-by-tag",
        name: "Add missing notes with specific tag at the current cursor location",
        editorCallback: (editor, view) => {
          new TagSuggestModal(this.app, this).open();
        }
      });
      this.addSettingTab(new AutoMOCSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var AutoMOCSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show ribbon button").setDesc("Enable or disable the ribbon button for this plugin. You can still run the plugin with a hotkey (requires restart)").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showRibbonButton).onChange((showRibbonButton) => {
        this.plugin.settings.showRibbonButton = showRibbonButton;
        this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
