1
00:00:00,000 --> 00:00:02,100
Hello everyone and welcome back.

2
00:00:02,100 --> 00:00:04,470
In this video, we're going to talk about how to control

3
00:00:04,470 --> 00:00:08,080
prolog's backtracking by use of a cut operator.

4
00:00:08,420 --> 00:00:10,800
Now, sometimes during a search,

5
00:00:10,800 --> 00:00:12,930
you can tell that no matter what happens next,

6
00:00:12,930 --> 00:00:14,310
the search is doomed.

7
00:00:14,310 --> 00:00:19,350
But in such case, prolog will probably want to explore the entire search space anyway.

8
00:00:19,350 --> 00:00:22,260
So, we can use a cut operator to prevent that.

9
00:00:22,260 --> 00:00:25,995
When you're done, you'll be able to use prolog's cut operator to stop backtracking,

10
00:00:25,995 --> 00:00:27,690
cert that a pattern fails.

11
00:00:27,690 --> 00:00:31,620
We're also looking at some limitations of what cut can do.

12
00:00:31,620 --> 00:00:33,675
Now, to understand cut,

13
00:00:33,675 --> 00:00:36,210
you have to have a clear idea of how backtracking works.

14
00:00:36,210 --> 00:00:39,120
So, here's an example that should help make that clear.

15
00:00:39,120 --> 00:00:42,305
Now, suppose you go to a car dealership and want to buy a car,

16
00:00:42,305 --> 00:00:44,120
you have two colors red and blue,

17
00:00:44,120 --> 00:00:46,760
and there's three kinds, Honda, Ford, and Toyota.

18
00:00:46,760 --> 00:00:49,850
So, you enter a query color A car B,

19
00:00:49,850 --> 00:00:53,995
and you see that prolog starts by searching for a solution for color,

20
00:00:53,995 --> 00:00:56,235
picks red first and sets.

21
00:00:56,235 --> 00:00:59,760
It picks red first since red was listed as a color first.

22
00:00:59,760 --> 00:01:04,140
Next, it starts searching for a car, picks Honda first.

23
00:01:04,140 --> 00:01:07,545
So, the first output is A equal red, B equal Honda.

24
00:01:07,545 --> 00:01:09,420
Just for another solution,

25
00:01:09,420 --> 00:01:11,655
it drops the last match it found,

26
00:01:11,655 --> 00:01:14,810
the Honda and tries unifying car B with something else.

27
00:01:14,810 --> 00:01:16,190
The next match is Ford.

28
00:01:16,190 --> 00:01:18,410
So, we get A equal red, B equal Ford.

29
00:01:18,410 --> 00:01:21,020
A third match is A equal red B equal Toyota.

30
00:01:21,020 --> 00:01:23,040
We asked for a fourth solution,

31
00:01:23,040 --> 00:01:24,660
there are no more cars to match with.

32
00:01:24,660 --> 00:01:27,075
So, the car B subgoal fails.

33
00:01:27,075 --> 00:01:31,050
This causes prolog to backtrack to the previous subgoal color A,

34
00:01:31,050 --> 00:01:33,575
and it try to find a different match for it.

35
00:01:33,575 --> 00:01:35,450
Gets color blue this time,

36
00:01:35,450 --> 00:01:38,525
and then goes back to the car subgoal to try again.

37
00:01:38,525 --> 00:01:41,135
Of course, this repeats the same three cars for B,

38
00:01:41,135 --> 00:01:43,760
but this time, A equal blue for all the solutions.

39
00:01:43,760 --> 00:01:45,590
When you finally ask for goal number seven,

40
00:01:45,590 --> 00:01:49,230
both the car and the color subgoals fail.

41
00:01:49,360 --> 00:01:51,750
So, that's the pattern.

42
00:01:51,750 --> 00:01:53,280
Now, let's see the cut operator,

43
00:01:53,280 --> 00:01:55,095
which is an exclamation point.

44
00:01:55,095 --> 00:01:56,850
The way it works is this.

45
00:01:56,850 --> 00:01:59,480
Cut operator acts like a goal that always succeeds,

46
00:01:59,480 --> 00:02:04,010
but any choices that have been made by the previous subgoals are frozen.

47
00:02:04,010 --> 00:02:05,600
For a color and car query,

48
00:02:05,600 --> 00:02:07,790
we can put a cut in the middle like this.

49
00:02:07,790 --> 00:02:11,570
Then what happens, is when we use up all the patterns that match car B,

50
00:02:11,570 --> 00:02:14,030
it tries to backtrack to pick another color,

51
00:02:14,030 --> 00:02:17,285
but the cut operator blocks it and the whole query fails.

52
00:02:17,285 --> 00:02:22,130
Thinking of it as a one-way valve or something.

53
00:02:22,130 --> 00:02:26,360
One of the things you can do with cut is to represent commitment.

54
00:02:26,360 --> 00:02:30,060
The code above it says that if something unifies with a color green,

55
00:02:30,060 --> 00:02:31,870
then it can't pick another color.

56
00:02:31,870 --> 00:02:34,815
So, if we query color X,

57
00:02:34,815 --> 00:02:37,020
we'll unify first with color red,

58
00:02:37,020 --> 00:02:38,800
then we unify with color green,

59
00:02:38,800 --> 00:02:41,165
and the cut operator will freeze that choice,

60
00:02:41,165 --> 00:02:43,360
trying to get another solution will fail.

61
00:02:43,360 --> 00:02:46,440
However, if you query color blue directly,

62
00:02:46,440 --> 00:02:50,370
it will work since that query never touches the cut operator.

63
00:02:51,280 --> 00:02:54,520
Let's take a look at how we can use cut.

64
00:02:54,520 --> 00:02:57,935
Sometimes, you have a predicate with multiple clauses,

65
00:02:57,935 --> 00:03:01,085
and you happen to know that if the first clause is matched,

66
00:03:01,085 --> 00:03:04,940
then you never want to try the second clause with the same values.

67
00:03:04,940 --> 00:03:07,745
For example, here's that factorial again.

68
00:03:07,745 --> 00:03:13,295
If we ask what the factorial of five tells us that N equal 120 as you'd expect.

69
00:03:13,295 --> 00:03:15,170
But then if he asked for another result,

70
00:03:15,170 --> 00:03:16,610
the stack gets busted.

71
00:03:16,610 --> 00:03:18,460
So, what happened here?

72
00:03:18,460 --> 00:03:20,450
When we asked for another result,

73
00:03:20,450 --> 00:03:23,420
prolog throws out the last match at it made to look for another one.

74
00:03:23,420 --> 00:03:27,755
So, in this case, the last match would have been the base case fact zero women.

75
00:03:27,755 --> 00:03:29,180
Since we asked for another,

76
00:03:29,180 --> 00:03:32,690
tries the fact in X with zero for N and one for X,

77
00:03:32,690 --> 00:03:35,625
which then causes the call fact of minus 1Y,

78
00:03:35,625 --> 00:03:37,990
which of course doesn't terminate.

79
00:03:38,450 --> 00:03:41,850
Now, the real way to fix this is to add a constraint in

80
00:03:41,850 --> 00:03:44,525
the second rule that N must be greater than zero.

81
00:03:44,525 --> 00:03:46,470
But this is a lecture about the cut operators,

82
00:03:46,470 --> 00:03:48,050
so that's what we're going to use.

83
00:03:48,050 --> 00:03:50,230
We put a cut operator on the first clause,

84
00:03:50,230 --> 00:03:52,370
and now if we ask for the second result,

85
00:03:52,370 --> 00:03:54,365
prolog tells us there are no more.

86
00:03:54,365 --> 00:03:56,780
Of course the constraint version also handles the case of

87
00:03:56,780 --> 00:03:59,975
the user asking for the factorial of a negative number explicitly.

88
00:03:59,975 --> 00:04:03,600
But like I said, this is a lecture about the cut operator.

89
00:04:04,480 --> 00:04:08,885
Now, the main reason we use a cut operator is for efficiency.

90
00:04:08,885 --> 00:04:13,150
Now, here's an example inspired by the UIUC Astronomy Department.

91
00:04:13,150 --> 00:04:15,380
There's a large observatory on campus that you can

92
00:04:15,380 --> 00:04:17,855
actually get to use if you have the right training.

93
00:04:17,855 --> 00:04:20,540
So, let's say you have a job at the University,

94
00:04:20,540 --> 00:04:23,030
Astronomy Department, and one of your jobs is to let

95
00:04:23,030 --> 00:04:25,780
people check out the key to the telescope if they're qualified.

96
00:04:25,780 --> 00:04:27,690
Being a CS student of course,

97
00:04:27,690 --> 00:04:29,960
you're going to write a program to do this for you.

98
00:04:29,960 --> 00:04:32,630
The qualifications are, you must be a student,

99
00:04:32,630 --> 00:04:36,730
a faculty member or a member of the UIUC Astronomy Club,

100
00:04:36,730 --> 00:04:40,285
and you also must have gotten the training to use telescope.

101
00:04:40,285 --> 00:04:42,380
So, let's say we have students Anna,

102
00:04:42,380 --> 00:04:43,640
Beth, Cindy, and David.

103
00:04:43,640 --> 00:04:46,130
We have faculty members Ernest, Frank, and Gloria.

104
00:04:46,130 --> 00:04:47,510
Finally, we have club members,

105
00:04:47,510 --> 00:04:49,025
Anna, Frank, and Harry.

106
00:04:49,025 --> 00:04:52,710
But only Anna and Harry had been trained.

107
00:04:54,170 --> 00:04:57,950
The next day, Frank comes in and wants to use the telescope.

108
00:04:57,950 --> 00:05:00,545
He's a faculty member and a club member,

109
00:05:00,545 --> 00:05:03,620
but he was busy grading finals and never finished the training.

110
00:05:03,620 --> 00:05:07,290
So, you query, telescope Frank and what happens?

111
00:05:08,150 --> 00:05:11,780
Well, the first line of the telescope will check to see

112
00:05:11,780 --> 00:05:14,500
if Frank is a student, that fails,

113
00:05:14,500 --> 00:05:20,105
so it's said semicoloncy or operator next checks if Frank is faculty and he is.

114
00:05:20,105 --> 00:05:22,640
So, we check online too if he is trained.

115
00:05:22,640 --> 00:05:26,615
Well, no, not trained so prolog backtracks to line one.

116
00:05:26,615 --> 00:05:29,720
It checks if Frank is a club member, he is.

117
00:05:29,720 --> 00:05:33,950
But in the long nanoseconds it passed since the last time we checked for training,

118
00:05:33,950 --> 00:05:35,740
Frank didn't finish then either.

119
00:05:35,740 --> 00:05:38,375
So, we end up checking the training twice

120
00:05:38,375 --> 00:05:41,120
even though we could have told you that if you have failed the first time,

121
00:05:41,120 --> 00:05:43,670
he would not end up succeeding later.

122
00:05:43,670 --> 00:05:46,950
Now, suppose we want a list of everyone who can use the telescope.

123
00:05:46,950 --> 00:05:49,165
So, we run telescope X like this.

124
00:05:49,165 --> 00:05:53,765
Notice how Anna, who's a student and a club member gets listed twice.

125
00:05:53,765 --> 00:05:58,985
So, probably the best thing is to put a cut operator between two lines like this.

126
00:05:58,985 --> 00:06:02,315
That allows her queries for individuals to be fast.

127
00:06:02,315 --> 00:06:05,060
But if we want to use prologs and multiple solution feature,

128
00:06:05,060 --> 00:06:06,845
this cut operator breaks it.

129
00:06:06,845 --> 00:06:08,300
We gain some efficiency,

130
00:06:08,300 --> 00:06:10,415
but we lose flexibility as a result.

131
00:06:10,415 --> 00:06:12,860
If you really want a list of permitted users,

132
00:06:12,860 --> 00:06:14,530
there's another way to accomplish that.

133
00:06:14,530 --> 00:06:17,730
More of it, I'm going to talk about it in this lecture.

134
00:06:19,910 --> 00:06:25,120
Now, another use of the cut operator is to force a query to fail.

135
00:06:25,120 --> 00:06:27,150
Why on earth would you want to do that?

136
00:06:27,150 --> 00:06:28,905
Well, suppose one day,

137
00:06:28,905 --> 00:06:32,285
Anna gets cut point Corn Flakes down the telescope tube.

138
00:06:32,285 --> 00:06:35,480
Obviously, her telescope privileges are going to get revoked.

139
00:06:35,480 --> 00:06:39,040
Say other line saying that telescope Anna fails.

140
00:06:39,040 --> 00:06:40,800
The next day, you're out, your friend takes

141
00:06:40,800 --> 00:06:43,430
your shift and doesn't know what happened with Anna.

142
00:06:43,430 --> 00:06:45,860
Anna shows up smiling,

143
00:06:45,860 --> 00:06:49,850
holding a box of rice crispies and asks for the telescope key.

144
00:06:49,850 --> 00:06:53,555
Unfortunately, the program says she's allowed to have it.

145
00:06:53,555 --> 00:06:57,650
The problem here is that when telescope Anna failed for the first clause,

146
00:06:57,650 --> 00:07:01,020
prolog went to try the second clause.

147
00:07:01,420 --> 00:07:05,365
We can fix that by putting a cut operator before the fail.

148
00:07:05,365 --> 00:07:08,810
Now, we can ask about Anna and be told no,

149
00:07:08,810 --> 00:07:11,210
and we can ask about Harry and be told yes.

150
00:07:11,210 --> 00:07:14,335
Of course, we still lose the ability to ask for a whole list.

151
00:07:14,335 --> 00:07:17,974
Now, in case you're wondering the way to get a whole list is of another category,

152
00:07:17,974 --> 00:07:22,230
maybe call it people or candidates and magic and set first.

153
00:07:22,360 --> 00:07:26,030
So, to wrap up, cut can start prolog from

154
00:07:26,030 --> 00:07:29,550
searching further if you know that the search will be useless.

155
00:07:29,550 --> 00:07:31,185
It can make queries more efficient,

156
00:07:31,185 --> 00:07:34,890
but it can take a while to develop a good intuition for how couple affect queries,

157
00:07:34,890 --> 00:07:36,920
so you have to be careful with them.

158
00:07:36,920 --> 00:07:39,770
Here's a final fun thing you can write using cut.

159
00:07:39,770 --> 00:07:42,600
You can negate the result with this code,

160
00:07:42,600 --> 00:07:46,505
you run not X and prolog will try to solve X directly.

161
00:07:46,505 --> 00:07:48,605
If that works, it cuts and fails,

162
00:07:48,605 --> 00:07:50,450
turning success and a failure.

163
00:07:50,450 --> 00:07:51,995
But if call exhales,

164
00:07:51,995 --> 00:07:55,980
then line two will reverse the decision, making it succeed.