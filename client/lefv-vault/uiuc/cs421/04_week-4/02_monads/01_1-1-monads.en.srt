1
00:00:00,000 --> 00:00:03,450
Hello everyone. Welcome to CS 421.

2
00:00:03,450 --> 00:00:07,530
Today, we're going to talk about an interesting language construct called the monad.

3
00:00:07,530 --> 00:00:09,150
When you're done with this video,

4
00:00:09,150 --> 00:00:12,225
you'll be able to describe the problem that monads attempt to solve,

5
00:00:12,225 --> 00:00:14,235
understand three monad laws,

6
00:00:14,235 --> 00:00:16,200
know Haskell syntax for declaring

7
00:00:16,200 --> 00:00:21,240
monadic operations and be able to show how monads work for the List and Maybe types.

8
00:00:21,240 --> 00:00:24,210
So, let's start off by defining monads.

9
00:00:24,210 --> 00:00:28,820
Now, a monad is a container type m that has two functions, bind and return.

10
00:00:28,820 --> 00:00:31,500
You can see the types on the slide.

11
00:00:31,500 --> 00:00:33,765
The return function is very simple.

12
00:00:33,765 --> 00:00:37,640
All it does is take a value of type a and place it inside the container.

13
00:00:37,640 --> 00:00:40,870
For thinking this looks like pure from the applicative type class,

14
00:00:40,870 --> 00:00:43,475
you'd be correct, they are the same thing.

15
00:00:43,475 --> 00:00:45,170
The idea here is that,

16
00:00:45,170 --> 00:00:48,290
return takes a value and puts it into a monad for us.

17
00:00:48,290 --> 00:00:51,680
Now, be sure you don't confuse this with the return keyword

18
00:00:51,680 --> 00:00:55,250
that most other languages have that they use for returning from functions.

19
00:00:55,250 --> 00:00:56,875
This is a different thing.

20
00:00:56,875 --> 00:00:59,990
Now, the bind function is quite a bit more complicated,

21
00:00:59,990 --> 00:01:01,685
it takes two arguments.

22
00:01:01,685 --> 00:01:05,090
The first is a container containing a value of type a.

23
00:01:05,090 --> 00:01:08,330
The second argument is a function that takes a value of

24
00:01:08,330 --> 00:01:12,025
type a and returns another container that holds the result of the function.

25
00:01:12,025 --> 00:01:14,765
The output is a container of the same type,

26
00:01:14,765 --> 00:01:18,470
but it is not necessarily the same thing that the function returned.

27
00:01:18,470 --> 00:01:22,730
Bind's job is to unpack the incoming monadic container and feed

28
00:01:22,730 --> 00:01:24,830
the contents to the function and then take

29
00:01:24,830 --> 00:01:28,025
the result of that function and possibly do more processing.

30
00:01:28,025 --> 00:01:31,569
I'll go over some examples of these in the next few slides.

31
00:01:31,569 --> 00:01:34,530
Now, one thing you should know is that bind is often

32
00:01:34,530 --> 00:01:37,515
written with this symbol, greater-greater-equal.

33
00:01:37,515 --> 00:01:40,730
If you replace the second greater than symbol with a lambda,

34
00:01:40,730 --> 00:01:42,295
you will get the Haskell logo.

35
00:01:42,295 --> 00:01:45,560
Now, there are certain rules that bind and return are expected to follow,

36
00:01:45,560 --> 00:01:47,180
called the three monad laws.

37
00:01:47,180 --> 00:01:48,800
They're pretty simple really.

38
00:01:48,800 --> 00:01:52,030
The first two laws say that return acts as a kind of identity,

39
00:01:52,030 --> 00:01:55,480
both on the left hand side and the right-hand side of a bind.

40
00:01:55,480 --> 00:01:58,465
The third law just says that bind is associative,

41
00:01:58,465 --> 00:02:01,820
which makes it easier to compose multiple binding operations.

42
00:02:01,820 --> 00:02:06,350
Here are a few examples of how return works for some built-in types.

43
00:02:06,350 --> 00:02:10,690
For a Maybe, return simply puts its volume to a just.

44
00:02:10,690 --> 00:02:14,660
For a list, return creates a singleton list with that element.

45
00:02:14,660 --> 00:02:18,500
For an either, return puts its element and a right construct.

46
00:02:18,500 --> 00:02:21,530
Again, we see that return and like pure and applicative places

47
00:02:21,530 --> 00:02:24,715
its argument in the simplest version of the container that can hold it.

48
00:02:24,715 --> 00:02:27,765
I should point out that once a value is inside the container,

49
00:02:27,765 --> 00:02:29,900
we don't have a way of manipulating it

50
00:02:29,900 --> 00:02:33,050
directly except by using the monadic bind operation,

51
00:02:33,050 --> 00:02:38,140
at least that is if you want to restrict yourself to the monadic operations.

52
00:02:38,140 --> 00:02:41,610
For monads, all the magic happens in bind.

53
00:02:41,610 --> 00:02:44,040
Bind's job is to unpack the monad ,

54
00:02:44,040 --> 00:02:47,240
feed the contents to the function and collect whatever

55
00:02:47,240 --> 00:02:51,515
monadic results it gives and then package it up into a single monad.

56
00:02:51,515 --> 00:02:55,380
Here's a simple example with Maybe monad or perhaps,

57
00:02:55,380 --> 00:02:56,955
remind you of applicative.

58
00:02:56,955 --> 00:02:59,375
If we bind a nothing to a function,

59
00:02:59,375 --> 00:03:00,485
we get nothing back.

60
00:03:00,485 --> 00:03:03,050
In fact, the function's not even run.

61
00:03:03,050 --> 00:03:05,500
If we bind a just to a function,

62
00:03:05,500 --> 00:03:07,490
we feed the contents of the just to

63
00:03:07,490 --> 00:03:10,520
the function and return whatever the function gives us back.

64
00:03:10,520 --> 00:03:14,180
Now, there's one huge difference between monads and applicatives.

65
00:03:14,180 --> 00:03:17,210
In an applicative, the function would have returned

66
00:03:17,210 --> 00:03:22,445
a ground level type and the applicative operator would have lifted it into a just for us,

67
00:03:22,445 --> 00:03:25,010
but with monads, the function itself gets to

68
00:03:25,010 --> 00:03:29,075
decide whether to return a just or a nothing.

69
00:03:29,075 --> 00:03:31,720
See what I mean, consider these programs.

70
00:03:31,720 --> 00:03:34,674
The functions on the top use applicative,

71
00:03:34,674 --> 00:03:37,970
but if we want a function that can signal an error,

72
00:03:37,970 --> 00:03:40,390
we need something like the functions on the bottom.

73
00:03:40,390 --> 00:03:41,680
Now, before you move on,

74
00:03:41,680 --> 00:03:44,060
verify for yourself that the functions on the bottom

75
00:03:44,060 --> 00:03:47,730
cannot be used for f map or applicatives.

76
00:03:49,060 --> 00:03:55,045
Again, to reemphasize, applicatives take the values out of the parameters,

77
00:03:55,045 --> 00:03:58,700
run them through a function and then repackage the result for us.

78
00:03:58,700 --> 00:04:00,665
The functions have no control,

79
00:04:00,665 --> 00:04:03,350
the applicatives makes all the decisions.

80
00:04:03,350 --> 00:04:06,290
Monads let the functions themselves decide what

81
00:04:06,290 --> 00:04:09,960
should happen and that's what makes them more powerful.

82
00:04:10,760 --> 00:04:16,010
So, now, we can define our inc and add functions to use monads.

83
00:04:16,010 --> 00:04:19,025
Here, we assume the inputs are monads and we

84
00:04:19,025 --> 00:04:23,095
bind to access the content and return to repackage it as a monad.

85
00:04:23,095 --> 00:04:26,070
So, the madd function needs two inputs.

86
00:04:26,070 --> 00:04:28,715
So, notice that bind operations are nested.

87
00:04:28,715 --> 00:04:31,850
You might imagine that if we had a bunch of operations like this,

88
00:04:31,850 --> 00:04:33,829
we'd end up writing a bunch of boilerplate,

89
00:04:33,829 --> 00:04:35,510
binding and returning code.

90
00:04:35,510 --> 00:04:39,485
Well, that's working for the computer and you know how we feel about that.

91
00:04:39,485 --> 00:04:42,610
Fortunately, there's a library called control.monad which

92
00:04:42,610 --> 00:04:45,650
gives us these handy monadic lifting functions.

93
00:04:45,650 --> 00:04:49,520
Just give it a ground-level operation and it returns a monadified version of it.

94
00:04:49,520 --> 00:04:52,420
On the next slide, we will show you how it's used.

95
00:04:52,420 --> 00:04:54,885
So, see how much nicer it is.

96
00:04:54,885 --> 00:04:58,215
The madd, minc and related functions are very simple now,

97
00:04:58,215 --> 00:05:00,410
with the exception of mdiv.

98
00:05:00,410 --> 00:05:03,995
Since that operation does something special, we had to write it out.

99
00:05:03,995 --> 00:05:08,790
Here is one more operation that you need to see, the fail function.

100
00:05:08,790 --> 00:05:11,390
Mathematically, it's not really part of a monad,

101
00:05:11,390 --> 00:05:13,640
but in Haskell, they are included,

102
00:05:13,640 --> 00:05:17,585
since monads are often used to handle error conditions,

103
00:05:17,585 --> 00:05:20,335
but this isn't a type class called MonadFail.

104
00:05:20,335 --> 00:05:22,070
So, the faii function takes a string and

105
00:05:22,070 --> 00:05:24,410
returns whatever a monad would represent failure,

106
00:05:24,410 --> 00:05:29,975
but just realize that not all monads actually have a way of representing failure.

107
00:05:29,975 --> 00:05:33,770
Here's the complete definition of the Maybe monad.

108
00:05:33,770 --> 00:05:38,475
So, as we said before, return places its argument into a just, binding with nothing,

109
00:05:38,475 --> 00:05:40,670
producing nothing and binding with just

110
00:05:40,670 --> 00:05:42,860
gives a function a chance to say what happens next.

111
00:05:42,860 --> 00:05:44,735
So, here's a few examples.

112
00:05:44,735 --> 00:05:47,330
In the first, line we just increment ten, in the second line,

113
00:05:47,330 --> 00:05:52,020
we add some things and in the third line we perform a division.

114
00:05:52,020 --> 00:05:54,555
The fourth and fifth lines are interesting.

115
00:05:54,555 --> 00:05:57,230
In the fourth example, we increment the result of the division,

116
00:05:57,230 --> 00:05:59,780
but in the fifth example we have a division by zero,

117
00:05:59,780 --> 00:06:03,580
and the increment therefore gets nothing and returns nothing.

118
00:06:03,580 --> 00:06:06,590
Here also is the definition of the list monad.

119
00:06:06,590 --> 00:06:11,610
Return places its argument into a singleton List and bind is a bit special here.

120
00:06:11,610 --> 00:06:16,640
Given a List, bind will extract the contents and apply them to functions you give it.

121
00:06:16,640 --> 00:06:20,345
But here's the deal. A List can contain multiple items.

122
00:06:20,345 --> 00:06:23,830
Each one of them is going to be given to your function.

123
00:06:23,830 --> 00:06:26,600
Furthermore, that function is going to return a monad.

124
00:06:26,600 --> 00:06:27,785
In other words, a List.

125
00:06:27,785 --> 00:06:30,755
So, the results of bind here will be a List of lists.

126
00:06:30,755 --> 00:06:32,315
To make this work with the types,

127
00:06:32,315 --> 00:06:34,730
we need to combine all these lists together somehow.

128
00:06:34,730 --> 00:06:38,620
Fortunately, we have a built-in function that does just that called concatMap.

129
00:06:38,620 --> 00:06:41,330
It's like map, but it assumes the output of the function is

130
00:06:41,330 --> 00:06:44,870
a list and concatenates everything together for us.

131
00:06:44,870 --> 00:06:48,470
The Maybe monad from the previous example is often used to simulate

132
00:06:48,470 --> 00:06:52,795
error handling and the list monad is often used to simulate non-determinism,

133
00:06:52,795 --> 00:06:54,960
so that allows multiple possibilities.

134
00:06:54,960 --> 00:06:57,770
We can use our calculator functions with the List monad,

135
00:06:57,770 --> 00:06:59,870
without having to modify anything.

136
00:06:59,870 --> 00:07:03,230
Here, we pass one, two and three to minc and get two, three,

137
00:07:03,230 --> 00:07:07,455
four and if we pass a multi-parameter List to n plus,

138
00:07:07,455 --> 00:07:12,020
it will give us back all the combinations of all the additions that could have occurred.

139
00:07:12,020 --> 00:07:13,880
Now, if we do a division by zero,

140
00:07:13,880 --> 00:07:18,100
it gives us back the empty list because that represents a failure,

141
00:07:18,100 --> 00:07:20,390
but the last example is really nice.

142
00:07:20,390 --> 00:07:22,475
We have three divisors for ten now.

143
00:07:22,475 --> 00:07:23,900
One of them results in an error,

144
00:07:23,900 --> 00:07:25,175
but the other succeed.

145
00:07:25,175 --> 00:07:29,035
So, we end up with a List containing the two successful ones.

146
00:07:29,035 --> 00:07:31,350
So, these are just a few examples.

147
00:07:31,350 --> 00:07:33,950
I hope you'll play with this yourself on the

148
00:07:33,950 --> 00:07:39,420
Haskell-ripple and the next videos will show some more advanced kind of monads.