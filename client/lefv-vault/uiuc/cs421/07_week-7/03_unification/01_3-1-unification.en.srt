1
00:00:00,000 --> 00:00:03,510
Hello everyone, welcome to CS 421.

2
00:00:03,510 --> 00:00:09,270
One of the underlying algorithms and programming languages is called unification and it

3
00:00:09,270 --> 00:00:10,890
shows up in all kinds of places

4
00:00:10,890 --> 00:00:14,655
Haskell's type inferencer is an application of unification.

5
00:00:14,655 --> 00:00:17,310
There is also a language called Prolog which uses

6
00:00:17,310 --> 00:00:21,240
unification to drive its entire computation engine.

7
00:00:21,240 --> 00:00:23,715
Now, when you're done with this video,

8
00:00:23,715 --> 00:00:26,560
you'll be able to describe the problem that unification solves,

9
00:00:26,560 --> 00:00:29,485
you'll be able to take a unification problem and solve it,

10
00:00:29,485 --> 00:00:33,345
and you'll be able to implement unification in Haskell if you want.

11
00:00:33,345 --> 00:00:35,835
Let's talk about the domain.

12
00:00:35,835 --> 00:00:38,310
Their system is going to have terms,

13
00:00:38,310 --> 00:00:40,880
they're going to be names written in the Roman alphabet,

14
00:00:40,880 --> 00:00:45,774
and these terms can also have arity which is a fancy way of saying number of arguments.

15
00:00:45,774 --> 00:00:50,325
Now, terms that have arity of greater than zero will look like function calls,

16
00:00:50,325 --> 00:00:54,180
and terms that have arity zero will look like variables.

17
00:00:54,180 --> 00:00:57,540
So here, the first x and z have already zero.

18
00:00:57,540 --> 00:00:59,220
So, I should stress here,

19
00:00:59,220 --> 00:01:00,830
a terms never have value,

20
00:01:00,830 --> 00:01:03,110
they're not variables, they're patterns.

21
00:01:03,110 --> 00:01:06,740
Also, arguments to a term can themselves

22
00:01:06,740 --> 00:01:11,045
have non-zero arity so they might look like nested function calls.

23
00:01:11,045 --> 00:01:12,920
For variables in this system,

24
00:01:12,920 --> 00:01:17,045
we're going to use letters from the Greek alphabet to keep everything separate.

25
00:01:17,045 --> 00:01:22,595
Finally, we have a mapping from variable set terms that we usually call Sigma.

26
00:01:22,595 --> 00:01:26,520
It's like the other environment symbols that we've used before and we can treat

27
00:01:26,520 --> 00:01:31,310
Sigma as a function that substitute all the variables that occur in its argument.

28
00:01:31,310 --> 00:01:33,335
Here's the problem we're trying to solve.

29
00:01:33,335 --> 00:01:35,195
Given two terms s and t,

30
00:01:35,195 --> 00:01:39,410
is there a single substitution Sigma that makes these terms equivalent.

31
00:01:39,410 --> 00:01:42,355
If there is, we see the terms unify.

32
00:01:42,355 --> 00:01:46,805
If they don't, of course then we say the unification fails.

33
00:01:46,805 --> 00:01:49,650
Now, a unification problem is a set of equations,

34
00:01:49,650 --> 00:01:53,965
and what we want is to find a single substitution Sigma that unifies all of them.

35
00:01:53,965 --> 00:01:56,870
A unification algorithm will operate on these equations

36
00:01:56,870 --> 00:01:59,765
until hopefully every equation intersect will be

37
00:01:59,765 --> 00:02:02,180
the form x equal t where x is

38
00:02:02,180 --> 00:02:05,750
a variable and none of the variables occur in any of the t terms.

39
00:02:05,750 --> 00:02:09,085
We can do that, then s is in solved form.

40
00:02:09,085 --> 00:02:11,090
There are four operations that we're going to use to

41
00:02:11,090 --> 00:02:13,310
solve a set of unification equations,

42
00:02:13,310 --> 00:02:14,915
the first is delete.

43
00:02:14,915 --> 00:02:16,620
We have an equation t equal t,

44
00:02:16,620 --> 00:02:17,975
then that tells us nothing,

45
00:02:17,975 --> 00:02:20,300
so we can just drop it from our list.

46
00:02:20,300 --> 00:02:22,645
We have a rule called decompose.

47
00:02:22,645 --> 00:02:28,280
If we have two terms with the same name and an arity that are supposed to be equal,

48
00:02:28,280 --> 00:02:30,500
then we replace this equation with the set of

49
00:02:30,500 --> 00:02:33,635
equations made by pairing the corresponding arguments.

50
00:02:33,635 --> 00:02:35,735
Think like zip width.

51
00:02:35,735 --> 00:02:38,720
There's also orient which takes an equation

52
00:02:38,720 --> 00:02:41,570
with a variable on the right side and flips it.

53
00:02:41,570 --> 00:02:45,320
Finally, there's eliminate where an equation x equals t,

54
00:02:45,320 --> 00:02:46,565
where x is a variable,

55
00:02:46,565 --> 00:02:49,795
can be used to substitute all the other variables in this set.

56
00:02:49,795 --> 00:02:53,390
Now, it's going to be important that x does not itself occur in

57
00:02:53,390 --> 00:02:55,910
t. Here's an example that I

58
00:02:55,910 --> 00:02:59,305
stole from an excellent book called Term Rewriting and All That,

59
00:02:59,305 --> 00:03:01,250
and we start off with these two equations,

60
00:03:01,250 --> 00:03:03,980
Alpha equal f of x and g of Alpha,

61
00:03:03,980 --> 00:03:07,405
Alpha is equal to g of Alpha, beta.

62
00:03:07,405 --> 00:03:11,630
Now, the first question or the first equation is already in solved form.

63
00:03:11,630 --> 00:03:16,465
So, we can eliminate the other Alphas by replacing them with f of x.

64
00:03:16,465 --> 00:03:19,230
The next equation is these two g terms.

65
00:03:19,230 --> 00:03:21,010
So we're going to use decompose,

66
00:03:21,010 --> 00:03:24,470
the left sides first f of x is equal to the right side is f of

67
00:03:24,470 --> 00:03:28,870
x and the left side second f of x is equal to the right sides Beta.

68
00:03:28,870 --> 00:03:31,940
Now, the f of x equation doesn't give

69
00:03:31,940 --> 00:03:34,700
us any new information so we can drop it altogether.

70
00:03:34,700 --> 00:03:39,940
Finally, f of x equal beta can be reoriented as beta equal f of x.

71
00:03:39,940 --> 00:03:41,955
So, this yields a solved form,

72
00:03:41,955 --> 00:03:45,890
and we can rewrite it as a mapping of like Sigma.

73
00:03:45,890 --> 00:03:49,645
This yield to solve form which we can just rewrite as a mapping.

74
00:03:49,645 --> 00:03:54,590
Now, I find this process very similar to solving a set of simultaneous linear equations.

75
00:03:54,590 --> 00:03:56,690
So, if feels like that to you,

76
00:03:56,690 --> 00:03:59,030
then, yeah, it's kind of related.

77
00:03:59,030 --> 00:04:01,310
Let's talk about what could go wrong.

78
00:04:01,310 --> 00:04:04,255
A unification can fail in two ways.

79
00:04:04,255 --> 00:04:10,710
The first way it can fail is if the patterns mismatch.

80
00:04:10,710 --> 00:04:15,745
So, here, f of x mismatches g of Alpha since f and g are not the same,

81
00:04:15,745 --> 00:04:20,510
and h of y mismatches h of z since y is not the same as

82
00:04:20,510 --> 00:04:23,120
z. Mismatch also happens if

83
00:04:23,120 --> 00:04:26,240
two things are supposed to be equal that have different arities.

84
00:04:26,240 --> 00:04:30,400
Another kind of failure is when the occurs check fails.

85
00:04:30,400 --> 00:04:32,010
So, in this example,

86
00:04:32,010 --> 00:04:34,610
Alpha would have to be equal to f of Alpha which

87
00:04:34,610 --> 00:04:38,050
creates an infinitely large terms so we disallow it.

88
00:04:38,050 --> 00:04:41,810
So, here's one way you might implement unification.

89
00:04:41,810 --> 00:04:44,360
You'll write a function that takes two lists,

90
00:04:44,360 --> 00:04:48,280
one with solve variables in one free equations you're still working on.

91
00:04:48,280 --> 00:04:51,200
So you take the first element out of the equations list and

92
00:04:51,200 --> 00:04:54,070
pick which of the four operations is the correct one.

93
00:04:54,070 --> 00:04:56,000
So, decomposing delete will modify

94
00:04:56,000 --> 00:04:59,300
the equation list and orient and eliminate can be handled as

95
00:04:59,300 --> 00:05:01,070
one case and they will add a variable to

96
00:05:01,070 --> 00:05:04,590
the solved list and substitute that variable wherever it occurs.

97
00:05:04,590 --> 00:05:09,005
So, in both the solved list and in the incoming list.

98
00:05:09,005 --> 00:05:12,079
Other than that, it's a pretty simple algorithm.

99
00:05:12,079 --> 00:05:16,325
So, let's look at some examples of how we would use unification.

100
00:05:16,325 --> 00:05:19,460
The unifications used when we have a set of specifications

101
00:05:19,460 --> 00:05:22,475
and we want to find one object that satisfies them all.

102
00:05:22,475 --> 00:05:24,005
So here's some example,

103
00:05:24,005 --> 00:05:28,115
suppose your adviser wants you to take CS 421 and some theory class,

104
00:05:28,115 --> 00:05:34,710
and then suppose your mom wants you to take CS 394 or 374 in some language class,

105
00:05:34,710 --> 00:05:36,350
the unification question is,

106
00:05:36,350 --> 00:05:40,810
can you find a class schedule that makes both your advisor and your mom happy?

107
00:05:40,810 --> 00:05:44,720
So, if you represent your schedule as this pattern f where

108
00:05:44,720 --> 00:05:48,310
the first argument is a language class and the second argument is a theory class,

109
00:05:48,310 --> 00:05:50,710
then we can have both these terms.

110
00:05:50,710 --> 00:05:52,340
Unifying them is pretty simple.

111
00:05:52,340 --> 00:05:57,005
We discover that you must take both CS 421 and CS 375.

112
00:05:57,005 --> 00:06:00,800
A more programming language like example is type checking,

113
00:06:00,800 --> 00:06:03,140
we have the types we're map inc and foo and what to

114
00:06:03,140 --> 00:06:05,710
know if we can apply map to inc and foo.

115
00:06:05,710 --> 00:06:08,630
So, determining this as a unification problem and in

116
00:06:08,630 --> 00:06:11,860
fact this is how Haskell does, its type inferencing.

117
00:06:11,860 --> 00:06:16,730
So, we compare the types of the parameters to map with

118
00:06:16,730 --> 00:06:21,485
the types of the arguments to map and get this equation.

119
00:06:21,485 --> 00:06:25,340
I've written out the type list and the equations to make it

120
00:06:25,340 --> 00:06:29,570
match the unification form and then use double arrow for the function types.

121
00:06:29,570 --> 00:06:33,485
We can decompose the Alpha arrow beta and int

122
00:06:33,485 --> 00:06:37,495
arrow int and then we can eliminate the Alpha equal int.

123
00:06:37,495 --> 00:06:40,505
Finally, we can delete the list of int

124
00:06:40,505 --> 00:06:44,030
equals list of int and then have our solve set of types.

125
00:06:44,030 --> 00:06:48,475
We can even use this on the output type of map to get the output type of the function.

126
00:06:48,475 --> 00:06:50,840
Now, here's another example that fails.

127
00:06:50,840 --> 00:06:53,735
Suppose we had the type string arrow ends,

128
00:06:53,735 --> 00:06:55,930
see if it would still work.

129
00:06:55,930 --> 00:06:58,580
Now, if you do the same set of operations as before

130
00:06:58,580 --> 00:07:01,250
the last question or the last equation,

131
00:07:01,250 --> 00:07:05,915
will end up that list of string should be equal to list event which doesn't match.

132
00:07:05,915 --> 00:07:08,455
So that would be a type failure.

133
00:07:08,455 --> 00:07:11,080
So, here's the unification algorithm,

134
00:07:11,080 --> 00:07:14,935
we have some other materials that go into a little more detail.

135
00:07:14,935 --> 00:07:18,465
So, there it is, there's the unification algorithm,

136
00:07:18,465 --> 00:07:21,080
there are some other materials on the website that go into

137
00:07:21,080 --> 00:07:22,370
little more detail and

138
00:07:22,370 --> 00:07:26,490
some practice problems in a small implementation for you to look at.