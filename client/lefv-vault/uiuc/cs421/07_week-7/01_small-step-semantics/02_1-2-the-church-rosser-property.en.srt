1
00:00:00,000 --> 00:00:02,625
Hello everyone and welcome back.

2
00:00:02,625 --> 00:00:05,865
Now, the small step semantics we just looked at

3
00:00:05,865 --> 00:00:08,700
is an example of something called a term rewriting system.

4
00:00:08,700 --> 00:00:11,970
Now, there are certain questions that come up when we study those and

5
00:00:11,970 --> 00:00:15,540
the Church-Rosser property gives us an answer to one of the most common ones.

6
00:00:15,540 --> 00:00:17,280
When you're done with this video you'll be able to

7
00:00:17,280 --> 00:00:19,410
explain what the Church-Rosser property is and give

8
00:00:19,410 --> 00:00:24,465
some examples of systems that have it and explain what advantages it confers.

9
00:00:24,465 --> 00:00:27,830
In the small step semantics we use this arrow to

10
00:00:27,830 --> 00:00:31,655
represent going from one configuration to another in a single step,

11
00:00:31,655 --> 00:00:35,140
but can also decorate that arrow to mean related things.

12
00:00:35,140 --> 00:00:39,385
Most common decorations are superscripts to indicate a repeated use of an arrow.

13
00:00:39,385 --> 00:00:42,200
For example, a zero means that the arrow was not

14
00:00:42,200 --> 00:00:45,290
actually used at all and functions as an identity.

15
00:00:45,290 --> 00:00:47,765
A one means that we took just one step,

16
00:00:47,765 --> 00:00:50,110
just kind of boring actually.

17
00:00:50,110 --> 00:00:52,640
An n means we took a certain number of steps,

18
00:00:52,640 --> 00:00:54,875
but we don't want to specify how many.

19
00:00:54,875 --> 00:00:59,075
Star and plus are similar to regular expression syntax,

20
00:00:59,075 --> 00:01:03,560
meaning zero or more steps or one or more steps respectively.

21
00:01:03,560 --> 00:01:06,610
Sometimes we feel like writing the arrow backwards.

22
00:01:06,610 --> 00:01:10,835
Then there's this double arrow notation which means that maybe a goes to b,

23
00:01:10,835 --> 00:01:12,440
whether b goes to a,

24
00:01:12,440 --> 00:01:14,405
but we don't specify which.

25
00:01:14,405 --> 00:01:17,000
The star version of arrow is very common.

26
00:01:17,000 --> 00:01:19,640
Taking a term and applying the arrow until it can no longer

27
00:01:19,640 --> 00:01:22,990
be applied is sometimes called normalizing the term.

28
00:01:22,990 --> 00:01:27,020
Now, that double arrow notation with the star is a bit strange,

29
00:01:27,020 --> 00:01:29,215
but it'll turn out to be useful later.

30
00:01:29,215 --> 00:01:34,100
If a double arrow star b and there is a change from a to b with

31
00:01:34,100 --> 00:01:38,800
single arrows connecting everything and those arrows can be pointing in any direction.

32
00:01:38,800 --> 00:01:41,210
It's not all left arrows are all right arrows,

33
00:01:41,210 --> 00:01:44,855
it's simply all arrows with no regard for their direction.

34
00:01:44,855 --> 00:01:47,600
Now, that we've talked about the arrow for a bit,

35
00:01:47,600 --> 00:01:50,275
let's talk about term rewriting systems.

36
00:01:50,275 --> 00:01:53,600
Any system that uses an arrow like this one to describe

37
00:01:53,600 --> 00:01:57,080
transitions from one state to another as a term rewriting system.

38
00:01:57,080 --> 00:01:59,990
Small steps semantics is one example of that.

39
00:01:59,990 --> 00:02:02,610
When we study a particular term rewriting system,

40
00:02:02,610 --> 00:02:04,810
two question show up almost immediately.

41
00:02:04,810 --> 00:02:07,455
Does the arrow relation always terminate?

42
00:02:07,455 --> 00:02:11,825
Can we use the arrow relation to tell if two given terms are equal to each other?

43
00:02:11,825 --> 00:02:16,880
Is a famous theorem called the Church-Rosser theorem that tells us about equality?

44
00:02:16,880 --> 00:02:20,075
If x and y have this double arrow star relationship,

45
00:02:20,075 --> 00:02:24,745
then there is a z to which both x and y normalize.

46
00:02:24,745 --> 00:02:27,080
The Church-Rosser property is hard to visualize,

47
00:02:27,080 --> 00:02:29,810
but there's a related property called confluence

48
00:02:29,810 --> 00:02:32,945
which happens to be equivalent to the Church-Rosser property.

49
00:02:32,945 --> 00:02:35,645
It says that if x goes to y1 and x goes to

50
00:02:35,645 --> 00:02:39,685
y2 and y1 and y2 are both normalized to the same value.

51
00:02:39,685 --> 00:02:42,840
Confluences also known as the diamond property

52
00:02:42,840 --> 00:02:45,875
and a system with this property has many advantages.

53
00:02:45,875 --> 00:02:48,650
For one thing, if there's more than one possible arrow

54
00:02:48,650 --> 00:02:51,500
that applies to a given term and a confluence system,

55
00:02:51,500 --> 00:02:53,110
it will not matter which one you pick.

56
00:02:53,110 --> 00:02:55,665
All paths will lead to the same result.

57
00:02:55,665 --> 00:02:57,400
In a programming language it means,

58
00:02:57,400 --> 00:03:02,230
your interpreter or compiler can pick whatever evaluation order is most efficient.

59
00:03:02,230 --> 00:03:07,610
Now, the Church-Rosser property was proven for the lambda calculus in 1936.

60
00:03:07,610 --> 00:03:11,270
Most programming languages have this property at least most of the time.

61
00:03:11,270 --> 00:03:14,230
Having this property answers the question for us.

62
00:03:14,230 --> 00:03:17,035
The language has the Church-Rosser property,

63
00:03:17,035 --> 00:03:20,825
we can tell if two terms are equal by normalizing or evaluating them.

64
00:03:20,825 --> 00:03:22,189
As you will see later,

65
00:03:22,189 --> 00:03:24,095
if you have variable reassignment,

66
00:03:24,095 --> 00:03:26,980
this property can disappear from your language.

67
00:03:26,980 --> 00:03:31,565
Famous example that does not have this property is the C programming language.

68
00:03:31,565 --> 00:03:36,080
The manuals explained that the order in which arguments to a function get evaluated is

69
00:03:36,080 --> 00:03:40,760
completely up to the compiler and there should be no assumptions made about that.

70
00:03:40,760 --> 00:03:43,144
Imagine call a function f with two parameters,

71
00:03:43,144 --> 00:03:45,560
minus minus i and plus plus i.

72
00:03:45,560 --> 00:03:49,480
The order of the compiler picked would change the values given to the function.

73
00:03:49,480 --> 00:03:52,250
We will talk about the Church-Rosser property again a few more

74
00:03:52,250 --> 00:03:56,280
times as we introduce different systems in this course.