Hello everyone and welcome back. Now, the small step semantics we just looked at is an example of something called a term rewriting system. Now, there are certain questions that come up when we study those and the Church-Rosser property gives us an answer to one of the most common ones. When you're done with this video you'll be able to explain what the Church-Rosser property is and give some examples of systems that have it and explain what advantages it confers. In the small step semantics we use this arrow to represent going from one configuration to another in a single step, but can also decorate that arrow to mean related things. Most common decorations are superscripts to indicate a repeated use of an arrow. For example, a zero means that the arrow was not actually used at all and functions as an identity. A one means that we took just one step, just kind of boring actually. An n means we took a certain number of steps, but we don't want to specify how many. Star and plus are similar to regular expression syntax, meaning zero or more steps or one or more steps respectively. Sometimes we feel like writing the arrow backwards. Then there's this double arrow notation which means that maybe a goes to b, whether b goes to a, but we don't specify which. The star version of arrow is very common. Taking a term and applying the arrow until it can no longer be applied is sometimes called normalizing the term. Now, that double arrow notation with the star is a bit strange, but it'll turn out to be useful later. If a double arrow star b and there is a change from a to b with single arrows connecting everything and those arrows can be pointing in any direction. It's not all left arrows are all right arrows, it's simply all arrows with no regard for their direction. Now, that we've talked about the arrow for a bit, let's talk about term rewriting systems. Any system that uses an arrow like this one to describe transitions from one state to another as a term rewriting system. Small steps semantics is one example of that. When we study a particular term rewriting system, two question show up almost immediately. Does the arrow relation always terminate? Can we use the arrow relation to tell if two given terms are equal to each other? Is a famous theorem called the Church-Rosser theorem that tells us about equality? If x and y have this double arrow star relationship, then there is a z to which both x and y normalize. The Church-Rosser property is hard to visualize, but there's a related property called confluence which happens to be equivalent to the Church-Rosser property. It says that if x goes to y1 and x goes to y2 and y1 and y2 are both normalized to the same value. Confluences also known as the diamond property and a system with this property has many advantages. For one thing, if there's more than one possible arrow that applies to a given term and a confluence system, it will not matter which one you pick. All paths will lead to the same result. In a programming language it means, your interpreter or compiler can pick whatever evaluation order is most efficient. Now, the Church-Rosser property was proven for the lambda calculus in 1936. Most programming languages have this property at least most of the time. Having this property answers the question for us. The language has the Church-Rosser property, we can tell if two terms are equal by normalizing or evaluating them. As you will see later, if you have variable reassignment, this property can disappear from your language. Famous example that does not have this property is the C programming language. The manuals explained that the order in which arguments to a function get evaluated is completely up to the compiler and there should be no assumptions made about that. Imagine call a function f with two parameters, minus minus i and plus plus i. The order of the compiler picked would change the values given to the function. We will talk about the Church-Rosser property again a few more times as we introduce different systems in this course.