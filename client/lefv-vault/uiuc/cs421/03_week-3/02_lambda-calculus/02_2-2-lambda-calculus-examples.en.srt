1
00:00:02,180 --> 00:00:04,980
Hello everyone. Welcome back.

2
00:00:04,980 --> 00:00:06,420
In our last video,

3
00:00:06,420 --> 00:00:09,725
we talked about the syntax of Lambda Calculus.

4
00:00:09,725 --> 00:00:13,240
We had variables, we had abstractions also known as functions,

5
00:00:13,240 --> 00:00:15,320
and we had function applications.

6
00:00:15,320 --> 00:00:18,950
I didn't actually show you much how to do a function application,

7
00:00:18,950 --> 00:00:20,640
and that's what this video is for.

8
00:00:20,640 --> 00:00:24,085
So, your objectives are to learn how to perform a beta-reduction.

9
00:00:24,085 --> 00:00:27,780
Beta-reduction is just a fancy way of saying function application.

10
00:00:27,780 --> 00:00:31,485
I've noticed that computer scientists like to use Greek letters a lot.

11
00:00:31,485 --> 00:00:35,120
My theory is that maybe it helps us to look smart or something like that.

12
00:00:35,120 --> 00:00:37,480
So, I encourage you to learn a bunch of Greek letters,

13
00:00:37,480 --> 00:00:39,620
it may turn out to be helpful.

14
00:00:39,620 --> 00:00:41,040
Anyway speaking of Greek letters,

15
00:00:41,040 --> 00:00:42,680
we also have Alpha-capture.

16
00:00:42,680 --> 00:00:44,235
This is something you need to know about,

17
00:00:44,235 --> 00:00:48,950
and what Alpha-capture means is that you have a variable that is free,

18
00:00:48,950 --> 00:00:53,710
and somehow it becomes bound to another Lambda inside the term,

19
00:00:53,710 --> 00:00:58,370
usually as a result of a beta-reduction moving it from one part of the term to another.

20
00:00:58,370 --> 00:01:00,035
So, I'll show you how that happens,

21
00:01:00,035 --> 00:01:02,385
and how to avoid it, and how to fix it.

22
00:01:02,385 --> 00:01:06,640
It's a bad thing because it actually changes the meaning of a program when it happens.

23
00:01:06,640 --> 00:01:08,660
Finally, we'll talk about normalization.

24
00:01:08,660 --> 00:01:12,470
What that means is we do all of the beta-reductions that are

25
00:01:12,470 --> 00:01:16,640
possible until a Lambda-calculus term is in its simplest form.

26
00:01:16,640 --> 00:01:20,060
So, I want to show you these six examples just to get us

27
00:01:20,060 --> 00:01:23,350
started then we're going to go through a more involved example,

28
00:01:23,350 --> 00:01:24,615
which you'll get to try.

29
00:01:24,615 --> 00:01:28,415
So, the first example is just the identity function applied to a.

30
00:01:28,415 --> 00:01:32,450
A way you do Beta-reduction is you take

31
00:01:32,450 --> 00:01:36,220
off the Lambda x part or the Lambda whatever variable part,

32
00:01:36,220 --> 00:01:38,090
and what you're left with is the body.

33
00:01:38,090 --> 00:01:39,280
So, you'll see in the bottom,

34
00:01:39,280 --> 00:01:41,030
you have an application node and a Lambda node.

35
00:01:41,030 --> 00:01:43,780
Both of those get replaced by the body of the function.

36
00:01:43,780 --> 00:01:45,230
In this case, it's just an x.

37
00:01:45,230 --> 00:01:49,005
Except that all the x's get replaced by whatever the argument was.

38
00:01:49,005 --> 00:01:50,250
In this case, it's an a.

39
00:01:50,250 --> 00:01:52,210
So, the next example.

40
00:01:52,210 --> 00:01:56,330
We have Lambda x, in the body is x applied to x and we're

41
00:01:56,330 --> 00:02:00,445
going to replace all those x's with a's because that's the argument.

42
00:02:00,445 --> 00:02:02,030
So the lambda x goes away,

43
00:02:02,030 --> 00:02:05,450
the application no goods away and it's replaced by

44
00:02:05,450 --> 00:02:10,405
the application of x to x but the x is now or substituted by a's.

45
00:02:10,405 --> 00:02:13,580
Here is something slightly similar except one of the x's has

46
00:02:13,580 --> 00:02:16,870
been changed into a y and so because y is not x,

47
00:02:16,870 --> 00:02:18,180
we don't substitute it.

48
00:02:18,180 --> 00:02:20,255
So we just have y applied to a.

49
00:02:20,255 --> 00:02:22,690
This next example is interesting.

50
00:02:22,690 --> 00:02:24,765
So think about the a,

51
00:02:24,765 --> 00:02:28,625
you see the a here that has a argument to this function.

52
00:02:28,625 --> 00:02:33,110
This a is a global a it's not bound to anything but you see also there's

53
00:02:33,110 --> 00:02:38,100
a lambda a inside of the lambda x then the body of the lambda x part.

54
00:02:38,100 --> 00:02:43,040
If we do the substitution we're going to get lambda a with a as

55
00:02:43,040 --> 00:02:45,980
the body and that means this a is no

56
00:02:45,980 --> 00:02:49,700
longer referring to this global entity it's referring to this local variable now.

57
00:02:49,700 --> 00:02:51,845
That actually changes the meaning of the program.

58
00:02:51,845 --> 00:02:55,030
So what we need to do is rename something.

59
00:02:55,030 --> 00:02:59,060
We can't rename the argument a because that's referring to

60
00:02:59,060 --> 00:03:04,610
a global thing so we have to rename the parameter and the lambda a part.

61
00:03:04,610 --> 00:03:07,640
So we changed that to lambda a prime and then

62
00:03:07,640 --> 00:03:10,945
we go ahead and do our beta reduction and so we have lambda a prime,

63
00:03:10,945 --> 00:03:14,750
arrow a and now that is a function which takes anything ignores

64
00:03:14,750 --> 00:03:18,770
it and then just returns the global a which is what we wanted in the first place.

65
00:03:18,770 --> 00:03:23,065
If we didn't do that then what we would have had was identity function instead.

66
00:03:23,065 --> 00:03:25,045
This one is a little interesting,

67
00:03:25,045 --> 00:03:28,390
we have this outer lambda x and an inner lambda x.

68
00:03:28,390 --> 00:03:32,590
And so what that means is that we really have two variables named x,

69
00:03:32,590 --> 00:03:37,795
and the rule is that when you have a variable you walk up the tree,

70
00:03:37,795 --> 00:03:42,130
you bind it to the first lambda that mentions it.

71
00:03:42,130 --> 00:03:44,770
So it's the inner lambda x that wins.

72
00:03:44,770 --> 00:03:47,350
So that means this outer lambda x is referring to

73
00:03:47,350 --> 00:03:50,790
a different variable than what that inner x is talking about.

74
00:03:50,790 --> 00:03:54,310
So when we do our beta reduction we actually end

75
00:03:54,310 --> 00:03:58,000
up not substituting anything we just copy the whole function body over.

76
00:03:58,000 --> 00:04:02,320
Finally, here's one that requires two beta reductions to reduce.

77
00:04:02,320 --> 00:04:05,485
We will do the topmost one first.

78
00:04:05,485 --> 00:04:08,360
So the whole lambda x applied to a,

79
00:04:08,360 --> 00:04:15,440
we substitute in the body so we have the application of lambda y to

80
00:04:15,440 --> 00:04:18,260
x and that x gets replaced by an a by

81
00:04:18,260 --> 00:04:23,155
the first beta reduction and that gives us a second beta reduction that we can do.

82
00:04:23,155 --> 00:04:27,140
So we do that, and that's just the identity applied to a so we get our a back.

83
00:04:27,140 --> 00:04:32,120
So again with alpha capture the thing to do when you see that that's about to happen

84
00:04:32,120 --> 00:04:37,015
is first you rename the lambda term that's going to do the capturing.

85
00:04:37,015 --> 00:04:40,455
You never rename the thing that you're passing in, that's getting captured.

86
00:04:40,455 --> 00:04:42,750
Okay, so here's one for you to try.

87
00:04:42,750 --> 00:04:45,310
What I'd like you to do is hit pause,

88
00:04:45,310 --> 00:04:47,360
and while this thing is paused,

89
00:04:47,360 --> 00:04:48,705
I want you to do the following things;

90
00:04:48,705 --> 00:04:52,090
I want you to write down the equivalent lambda calculus expression,

91
00:04:52,090 --> 00:04:54,800
I want you to identify any free variables that are in

92
00:04:54,800 --> 00:04:57,890
here and then I want you to simplify it by performing as

93
00:04:57,890 --> 00:05:04,130
many beta reductions or alpha renaming as necessary to get this into its simplest form.

94
00:05:04,130 --> 00:05:08,645
So when you're ready hit pause and hit unpause and I'll go over the solution.

95
00:05:08,645 --> 00:05:13,125
Okay, so here's the equivalent of Lambda calculus expression.

96
00:05:13,125 --> 00:05:14,785
There is one free variable,

97
00:05:14,785 --> 00:05:17,340
you notice a lambda qf part.

98
00:05:17,340 --> 00:05:24,260
That f, if you look at it you see there it's not inside of a lambda f thing at all.

99
00:05:24,260 --> 00:05:25,625
So that means it's free.

100
00:05:25,625 --> 00:05:27,860
So you can get this by looking at the term,

101
00:05:27,860 --> 00:05:30,630
you just see lambda qf, it's in parentheses,

102
00:05:30,630 --> 00:05:32,270
there's nothing enclosing that,

103
00:05:32,270 --> 00:05:34,160
that has a lambda f. There is

104
00:05:34,160 --> 00:05:36,740
another lambda f in this expression but it doesn't enclose it.

105
00:05:36,740 --> 00:05:38,175
So it doesn't count.

106
00:05:38,175 --> 00:05:40,215
If you're looking at the syntax tree,

107
00:05:40,215 --> 00:05:43,340
the easiest way is to start with the f and just walk up the tree,

108
00:05:43,340 --> 00:05:46,220
just the opposite direction of the arrows

109
00:05:46,220 --> 00:05:49,480
and you'll see you never encounter a lambda f. Okay,

110
00:05:49,480 --> 00:05:53,315
so to do this I am going to put numbers

111
00:05:53,315 --> 00:05:58,350
on all the application nodes so that you will know which one I'm talking about.

112
00:05:58,350 --> 00:06:01,850
The first beta reduction we're going to do is we're

113
00:06:01,850 --> 00:06:05,655
going to take the second of the app nodes,

114
00:06:05,655 --> 00:06:09,250
the second application node and do a beta reduction on that.

115
00:06:09,250 --> 00:06:12,975
Now we've already talked that f is free,

116
00:06:12,975 --> 00:06:20,120
and so if I do this substitution you see the lambda x in that body has an x in it.

117
00:06:20,120 --> 00:06:24,260
If I put that f inside where that x is then the lambda

118
00:06:24,260 --> 00:06:29,075
f just above the app three node is going to end up capturing that.

119
00:06:29,075 --> 00:06:33,590
So what we have to do is rename this lambda f into lambda f prime

120
00:06:33,590 --> 00:06:38,740
and the corresponding f that was in that term also gets renamed to enough prime.

121
00:06:38,740 --> 00:06:40,520
So now that we've done that,

122
00:06:40,520 --> 00:06:43,009
we're able to do our beta reduction.

123
00:06:43,009 --> 00:06:46,035
So it will end up looking like this.

124
00:06:46,035 --> 00:06:51,885
So you see that the lambda f prime gets moved up to where the app two used to be,

125
00:06:51,885 --> 00:06:55,615
and you see that the x has been replaced by the lambda q.

126
00:06:55,615 --> 00:07:03,220
Our next beta reduction we're going to do is going to be the top node, the app one.

127
00:07:03,220 --> 00:07:08,140
So we're going to take the f primes and replace them by this lambda a.

128
00:07:08,140 --> 00:07:10,210
So ends up looking like this.

129
00:07:10,210 --> 00:07:14,790
Next, we're going to take the lambda a and beta reduce it,

130
00:07:14,790 --> 00:07:17,775
we're going to replace the a's by lambda qf.

131
00:07:17,775 --> 00:07:19,725
So that gives us this one.

132
00:07:19,725 --> 00:07:23,550
Our final reduction is we're going to take the first lambda qf

133
00:07:23,550 --> 00:07:27,830
and replace all the q's with the second lambda qf,

134
00:07:27,830 --> 00:07:31,640
but there are no q's to replace so we end up just returning

135
00:07:31,640 --> 00:07:36,895
the body of the first thing to qf as is and that's the end of it.

136
00:07:36,895 --> 00:07:39,250
So hopefully these helped out.

137
00:07:39,250 --> 00:07:41,990
Again there's some more writing about lambda calculus

138
00:07:41,990 --> 00:07:45,710
on the course website and plenty of online resources.

139
00:07:45,710 --> 00:07:50,760
So please keep looking at this and playing with it until it makes more sense.

140
00:07:50,760 --> 00:07:54,020
The next video we're going to talk about how you decide what order

141
00:07:54,020 --> 00:07:57,880
to do things and how you decide when you've done enough.

142
00:07:58,060 --> 00:08:01,095
There's more than one answer to that question.

143
00:08:01,095 --> 00:08:03,340
So I'll talk about that.