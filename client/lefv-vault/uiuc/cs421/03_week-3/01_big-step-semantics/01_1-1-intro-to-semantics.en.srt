1
00:00:02,995 --> 00:00:05,411
Hello everyone, welcome to CS 421.

2
00:00:05,411 --> 00:00:09,860
This week we're going to take a break
from what we've been doing before,

3
00:00:09,860 --> 00:00:12,312
we're going to introduce some theory.

4
00:00:12,312 --> 00:00:15,438
So in this one we're going to
talk about semantics.

5
00:00:15,438 --> 00:00:18,627
Semantics comes from a Greek
word which means meaning, and

6
00:00:18,627 --> 00:00:21,689
this is the mathematical study
of the meaning of computer

7
00:00:21,689 --> 00:00:24,266
programming languages and
their constructs.

8
00:00:24,266 --> 00:00:27,037
So in order to do this, we're going to
introduce three different things.

9
00:00:27,037 --> 00:00:31,985
One is called a judgment, which is
something that asserts a property about

10
00:00:31,985 --> 00:00:37,575
a piece of computer code or programming
language, construct or syntactic object.

11
00:00:37,575 --> 00:00:42,168
We have proof rules that define
when judgments are valid, and

12
00:00:42,168 --> 00:00:45,271
these are recursive inductive objects.

13
00:00:45,271 --> 00:00:49,935
And we have proof trees which will look
like proof rules stacked together to prove

14
00:00:49,935 --> 00:00:52,490
properties about something more complex.

15
00:00:52,490 --> 00:00:57,244
Now this treatment of semantics is
borrowed heavily from Robert Harper's

16
00:00:57,244 --> 00:00:59,590
book, which I cited the last slide.

17
00:00:59,590 --> 00:01:02,954
And I highly encourage you to take
a look at that book as a different

18
00:01:02,954 --> 00:01:06,638
way of approaching programming
languages which you may find helpful.

19
00:01:06,638 --> 00:01:11,586
So judgment is simply an assertion about
some syntactic object we're interested in.

20
00:01:11,586 --> 00:01:14,556
So for example,
we might want to talk about whether or

21
00:01:14,556 --> 00:01:16,150
not numbers are even or odd.

22
00:01:16,150 --> 00:01:18,771
Here, three is odd could be a judgement.

23
00:01:18,771 --> 00:01:21,244
I am asserting that
three is an odd number.

24
00:01:21,244 --> 00:01:23,461
Here's another judgement.

25
00:01:23,461 --> 00:01:27,137
This is something called big steps
semantics, and here what we're

26
00:01:27,137 --> 00:01:31,015
saying is that two plus three, and
then we have this down arrow, five.

27
00:01:31,015 --> 00:01:34,394
And what this is asserting is that
two plus three is equal to five.

28
00:01:34,394 --> 00:01:37,636
We have this thing,
which comes from typing semantics.

29
00:01:37,636 --> 00:01:42,390
We'll talk more about what the funny
T on its side symbol is later.

30
00:01:42,390 --> 00:01:46,022
But this is just saying that
if you have the expression,

31
00:01:46,022 --> 00:01:50,755
2.4 greater than 3.5,
then this is a boolean type of expression.

32
00:01:50,755 --> 00:01:55,120
When we have judgements, we want to be
able to say when a judgement is valid or

33
00:01:55,120 --> 00:01:56,430
when it's not valid.

34
00:01:56,430 --> 00:01:59,644
I mean you can just write down
any judgement that you want but

35
00:01:59,644 --> 00:02:01,452
how do you know it's true or not?

36
00:02:01,452 --> 00:02:02,634
How do you know it's accurate?

37
00:02:02,634 --> 00:02:05,445
I could have written down, for
example, that three is even and

38
00:02:05,445 --> 00:02:06,410
that would be false.

39
00:02:06,410 --> 00:02:10,411
So we have these definitions,
these are called rules,

40
00:02:10,411 --> 00:02:15,190
which tell us when a judgment is true or
when a judgment is not true.

41
00:02:15,190 --> 00:02:19,348
So the way it works, you have this thing
that looks kind of like a fraction,

42
00:02:19,348 --> 00:02:20,611
it's not a fraction.

43
00:02:20,611 --> 00:02:25,749
But you have this horizontal bar, and on
top of it you have a bunch of judgements.

44
00:02:25,749 --> 00:02:29,304
Now these judgements are called
assumptions or premises, and

45
00:02:29,304 --> 00:02:33,407
on the bottom you have a final judgement
which is called the conclusion.

46
00:02:33,407 --> 00:02:37,073
And the idea is if all of the J's on top,
J1 through Jn,

47
00:02:37,073 --> 00:02:39,805
are true then J on
the bottom is also true.

48
00:02:39,805 --> 00:02:44,747
And often on the side you will also see
a label which gives a name to this rule,

49
00:02:44,747 --> 00:02:47,620
and this way we can refer
to it easily later.

50
00:02:47,620 --> 00:02:51,267
It's possible for a rule to have
no assumptions whatsoever, and

51
00:02:51,267 --> 00:02:52,670
this is called an axiom.

52
00:02:52,670 --> 00:02:56,956
And in that case, what will happen is
you'll just have a rule with a line and

53
00:02:56,956 --> 00:02:57,924
nothing on top.

54
00:02:57,924 --> 00:03:01,067
You'll just have the conclusion and
perhaps its label.

55
00:03:01,067 --> 00:03:04,813
Another thing that you can see is
something called a side condition.

56
00:03:04,813 --> 00:03:08,781
Here is an example of an axiom here,
except it has a side condition.

57
00:03:08,781 --> 00:03:12,484
So you have this thing,
x mod 2 equals 0, on this side.

58
00:03:12,484 --> 00:03:15,713
Now sometimes you'll see people put
that as one of the premises, and

59
00:03:15,713 --> 00:03:19,343
there's nothing really wrong with doing
that, it's kind of a style issue.

60
00:03:19,343 --> 00:03:23,264
But the reason we put it on the side and
not on top,

61
00:03:23,264 --> 00:03:28,445
the idea is that the things on top
of a rule should be judgements.

62
00:03:28,445 --> 00:03:31,771
And in this case,
what we're thinking of as a judgement, or

63
00:03:31,771 --> 00:03:34,837
maybe I should say what I was
thinking of as a judgement,

64
00:03:34,837 --> 00:03:38,444
is just the assertion that something
is even or something is odd.

65
00:03:38,444 --> 00:03:43,624
So if it has that form, then it belongs
either on top or on bottom of this rule.

66
00:03:43,624 --> 00:03:48,684
But if it's something different, if it's a
condition that's not really a judgment but

67
00:03:48,684 --> 00:03:53,150
it's something else that needs to be true,
then I call that a side condition.

68
00:03:53,150 --> 00:03:57,354
And so a lot of people will write
that on the side of the rule instead.

69
00:03:57,354 --> 00:03:59,254
So you'll see both of them.

70
00:03:59,254 --> 00:04:02,716
And if you go looking at
papers about semantics,

71
00:04:02,716 --> 00:04:05,679
this one I think is slightly more common.

72
00:04:05,679 --> 00:04:08,910
And here's an example of the even and
odds again.

73
00:04:08,910 --> 00:04:12,856
This time I've given rules for
what happens when you add even and

74
00:04:12,856 --> 00:04:14,327
odd numbers together.

75
00:04:14,327 --> 00:04:17,960
I'm sure you're familiar with this
from your studies of arithmetic,

76
00:04:17,960 --> 00:04:20,136
but you know if you have
two even numbers and

77
00:04:20,136 --> 00:04:24,094
you add them together you get another
even number, so we have this rule here.

78
00:04:24,094 --> 00:04:27,523
If x is even and
y is even then x + y is even.

79
00:04:27,523 --> 00:04:32,232
Similarly for the other combinations
of even and odd number editions.

80
00:04:32,232 --> 00:04:36,429
Now before we go to next slide I want you
to pause and see if you can write down

81
00:04:36,429 --> 00:04:40,238
the rules for what happens when
you multiply even and odd numbers.

82
00:04:40,238 --> 00:04:41,581
So go ahead and do that now.

83
00:04:41,581 --> 00:04:43,750
All right, so here is the solutions.

84
00:04:43,750 --> 00:04:47,699
Pretty much any combination of even and
odd multiplications gives

85
00:04:47,699 --> 00:04:52,422
you an even number, unless of course both
the numbers happen to be odd already,

86
00:04:52,422 --> 00:04:54,836
so that's what these rules are saying.

87
00:04:54,836 --> 00:04:58,383
But when you use a rule what
will happen sometimes is that

88
00:04:58,383 --> 00:05:02,764
the bottom thing is complicated
enough that the two assumptions, or

89
00:05:02,764 --> 00:05:06,486
however many assumptions on top,
also need to be proved.

90
00:05:06,486 --> 00:05:10,243
And so you use more rules, so
it ends up having a recursive structure.

91
00:05:10,243 --> 00:05:13,010
And so this builds something
that's called a proof tree.

92
00:05:13,010 --> 00:05:15,549
Now two ways that proof trees get used.

93
00:05:15,549 --> 00:05:19,661
One of them is that you have something
that you already know what the property is

94
00:05:19,661 --> 00:05:21,236
but you just want to prove it.

95
00:05:21,236 --> 00:05:25,837
So here have 4 + 7 is odd, and so
I already know that is a fact but

96
00:05:25,837 --> 00:05:30,978
maybe I want to convince you, and so
I'll go ahead and build this tree.

97
00:05:30,978 --> 00:05:35,131
I'll show you that four is even,
and I'm using the mod zero rule.

98
00:05:35,131 --> 00:05:38,459
And I justify that because
four mod two is zero.

99
00:05:38,459 --> 00:05:40,990
I have seven is odd using
the mod one rule and

100
00:05:40,990 --> 00:05:43,601
I justify that because
seven mod two is one.

101
00:05:43,601 --> 00:05:48,070
And then I've also written down that
I've used the even plus odd rule

102
00:05:48,070 --> 00:05:49,858
to show that 4 + 7 is odd.

103
00:05:49,858 --> 00:05:55,682
When this happens, you'll see the proof
given as a finalized construct.

104
00:05:55,682 --> 00:05:58,345
Now how do you go about writing
a proof tree in real life?

105
00:05:58,345 --> 00:06:02,798
Typically what will happen is you'll start
by writing down your conclusion, and

106
00:06:02,798 --> 00:06:06,680
then you'll draw a line on top and
decide what rule it is you want to use.

107
00:06:06,680 --> 00:06:11,067
And then what will happen is you'll take
the parts of the thing you're trying to

108
00:06:11,067 --> 00:06:15,468
prove and you'll move them up and use
the appropriate rules to talk about them.

109
00:06:15,468 --> 00:06:18,421
So here I have to move up the four and
say that four is even,

110
00:06:18,421 --> 00:06:20,833
then move up the seven,
say that seven is odd.

111
00:06:20,833 --> 00:06:24,341
It may be also that you don't
actually know what the property is.

112
00:06:24,341 --> 00:06:27,220
Maybe you're not sure if 4 + 7 is odd or
even.

113
00:06:27,220 --> 00:06:30,726
And so what will happen is you'll
leave some information out,

114
00:06:30,726 --> 00:06:33,979
you'll go ahead and
follow what rules seem appropriate.

115
00:06:33,979 --> 00:06:37,213
And as you do that you're
going to discover information,

116
00:06:37,213 --> 00:06:39,062
you're going to fill that back in.

117
00:06:39,062 --> 00:06:43,731
We'll talk about how that works in future
videos, but I'll tell you that the type

118
00:06:43,731 --> 00:06:47,060
inferencer that Haskell uses
works in a very similar way.

119
00:06:47,060 --> 00:06:50,334
So here again is that book I was
telling you about by Robert Harper,

120
00:06:50,334 --> 00:06:52,977
Practical Foundations for
Programming Languages.

121
00:06:52,977 --> 00:06:56,945
He has a different take on languages
than what we're using in our course,

122
00:06:56,945 --> 00:06:59,060
so there's of course a lot of overlap.

123
00:06:59,060 --> 00:07:02,777
I would definitely encourage you to take a
look at this book, it's very interesting.