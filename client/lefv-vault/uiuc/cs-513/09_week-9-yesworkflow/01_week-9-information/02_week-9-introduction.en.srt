1
00:00:00,000 --> 00:00:08,293
[MUSIC]

2
00:00:08,293 --> 00:00:11,820
Hello and welcome back to Theory and
Practice of Data Cleaning.

3
00:00:11,820 --> 00:00:13,980
In the last few weeks,
we have looked at work flows and

4
00:00:13,980 --> 00:00:18,550
programs as a means to describe
data cleaning analysis pipelines.

5
00:00:18,550 --> 00:00:21,910
While work flows provide a high level
conceptual view of data flow and

6
00:00:21,910 --> 00:00:26,610
data dependencies, providence capture
runtime for example via tracing tools and

7
00:00:26,610 --> 00:00:30,270
logging tools provides users with
retrospective prominence information.

8
00:00:31,370 --> 00:00:34,235
This week we will look at an open
source tool called guess work flow.

9
00:00:34,235 --> 00:00:38,720
Whose aim it is to provide some of the
benefits of scientific work flow systems

10
00:00:38,720 --> 00:00:41,470
to users who work with
popular scripting languages.

11
00:00:41,470 --> 00:00:43,025
Such as R, Python, or Mathlab.

12
00:00:44,150 --> 00:00:46,890
A researcher who assembles
a data wrangling pipeline

13
00:00:46,890 --> 00:00:50,100
using any of these powerful and
convenient scripting languages

14
00:00:50,100 --> 00:00:54,100
can put simple yes workflow
annotations as comments in the script.

15
00:00:54,100 --> 00:00:57,370
The purpose of these annotations is
to let the script author declare and

16
00:00:57,370 --> 00:01:00,260
then share their workflow
model with others.

17
00:01:00,260 --> 00:01:03,970
Specifically data flow dependencies and
conceptual level steps and

18
00:01:03,970 --> 00:01:07,670
phases of the modelled workflow at
the heart or impossible to extract

19
00:01:07,670 --> 00:01:11,650
from the script alone can be simply
declared using yes workflow.

20
00:01:11,650 --> 00:01:15,050
The yes workflow tool can then be
used to extract those comments and

21
00:01:15,050 --> 00:01:18,150
pass them to a graph-rendering
tool called Graphviz.

22
00:01:19,300 --> 00:01:22,990
Having a visual model of a script-based
workflow already provides value for

23
00:01:22,990 --> 00:01:24,250
script authors.

24
00:01:24,250 --> 00:01:26,890
As it provides a high-level documentation

25
00:01:26,890 --> 00:01:30,140
of what might otherwise be a somewhat
cryptic and hard to understand script.

26
00:01:31,360 --> 00:01:34,650
But the Yes Workflow Toolkit offers
more than to provide a visual rendering

27
00:01:34,650 --> 00:01:37,360
of a modelled workflow for
one or more given scripts

28
00:01:38,380 --> 00:01:43,020
through related tools that we have
encountered before for example data.

29
00:01:43,020 --> 00:01:46,540
We can query prospective and
retrospective problems, graphs, and

30
00:01:46,540 --> 00:01:49,200
even hybrid combinations of these.

31
00:01:49,200 --> 00:01:53,120
Here we are entering again research land
that is we will be looking at tools and

32
00:01:53,120 --> 00:01:56,120
techniques that are currently
under development in the applied

33
00:01:56,120 --> 00:01:57,027
research community.

34
00:01:57,027 --> 00:02:02,090
Yes workflow is also the tool that you
should be using in the final project

35
00:02:02,090 --> 00:02:03,280
of this course.

36
00:02:03,280 --> 00:02:06,370
When you get a chance to link together
a number of data cleaning tools and

37
00:02:06,370 --> 00:02:07,870
techniques.

38
00:02:07,870 --> 00:02:11,750
Specifically, you will be using open
refine,, regular expressions, and

39
00:02:11,750 --> 00:02:15,910
possibly scripting languages such as
Python or R, for pattern based or

40
00:02:15,910 --> 00:02:17,196
syntactic data cleaning.

41
00:02:17,196 --> 00:02:21,680
After that ,you will then load
the clean data into a SQL like database

42
00:02:21,680 --> 00:02:22,610
to further inspect and

43
00:02:22,610 --> 00:02:26,810
explore it focusing in particular on
logic based integrity constraints.

44
00:02:26,810 --> 00:02:30,000
Finally, you should be documenting
the overall work flow using a yes

45
00:02:30,000 --> 00:02:31,470
workflow model.

46
00:02:31,470 --> 00:02:34,920
You will notice that you don't have
to embed yes workflow annotations.

47
00:02:34,920 --> 00:02:37,130
Inside of programs or scripts.

48
00:02:37,130 --> 00:02:41,570
In fact, your overall work flow might very
well have a combination of manual steps.

49
00:02:41,570 --> 00:02:44,650
For example, in open refine and
automatic steps.

50
00:02:44,650 --> 00:02:47,660
For example, using scripts or
database queries.

51
00:02:47,660 --> 00:02:50,894
Okay, let's get started with yes workflow.

52
00:02:50,894 --> 00:03:00,894
[MUSIC]