1
00:00:00,000 --> 00:00:08,166
[MUSIC]

2
00:00:08,166 --> 00:00:13,355
Okay, this is the YesWorkFlow annotation
of the script that was published for

3
00:00:13,355 --> 00:00:17,771
LIGO as sort of documenting how you
do the detection from the data.

4
00:00:17,771 --> 00:00:20,811
It's called LIGO Tutorial,
it's a Python script.

5
00:00:20,811 --> 00:00:23,949
It's very nicely documented,
they have a Jupyter Notbook for that.

6
00:00:23,949 --> 00:00:26,662
They have just the Python script itself.

7
00:00:26,662 --> 00:00:29,606
And as a summer intern
project from last year,

8
00:00:29,606 --> 00:00:34,604
a student here annotated that script and
created various products from that.

9
00:00:34,604 --> 00:00:37,521
So we can look at that in more
detail in a moment as well.

10
00:00:37,521 --> 00:00:41,862
So that's another example, and
then we have hybrid graphs.

11
00:00:41,862 --> 00:00:45,936
We've also some no workflow graphs
in here you've seen before.

12
00:00:45,936 --> 00:00:49,563
Okay, so
now let me jump into the actual demo.

13
00:00:49,563 --> 00:00:51,857
So I'm going to my editor here, eMacs,

14
00:00:51,857 --> 00:00:55,510
which is kind of my command line
environment among other things.

15
00:00:55,510 --> 00:00:58,555
It's a browser and a command line,
everything all in one.

16
00:00:58,555 --> 00:01:03,345
And so
I've cloned this white w idcc repository.

17
00:01:03,345 --> 00:01:08,250
And in particular, where we want to
go is into the examples folder,

18
00:01:08,250 --> 00:01:10,709
where the various use cases are.

19
00:01:10,709 --> 00:01:14,338
So, we look at C3C4,
that's going to be our first example.

20
00:01:14,338 --> 00:01:16,973
And then, we look at the second example,
the LIGO example.

21
00:01:16,973 --> 00:01:18,795
We're going to look at those two.

22
00:01:18,795 --> 00:01:23,838
But before branching into the sub-folders
where the examples live, let

23
00:01:23,838 --> 00:01:29,059
me just point out a few others of levels
of other folders of this repository.

24
00:01:29,059 --> 00:01:31,406
So there's a yw job folder.

25
00:01:31,406 --> 00:01:36,670
Interestingly enough, the jar files,
the Java archive files for

26
00:01:36,670 --> 00:01:39,970
the YesWorkflow tool are in here as well.

27
00:01:39,970 --> 00:01:44,107
So probably you want to copy that to
a binaries folder where your system will

28
00:01:44,107 --> 00:01:44,650
find it.

29
00:01:44,650 --> 00:01:47,100
And so, this is of a detail that
has to do with the installation.

30
00:01:47,100 --> 00:01:49,259
I don't want to get further into that.

31
00:01:49,259 --> 00:01:52,720
But then here is a rules folder,
so that's interesting.

32
00:01:52,720 --> 00:01:57,509
The rules folder contains data log
rules that have to do with the demo,

33
00:01:57,509 --> 00:02:00,282
that do some of the demo functionality.

34
00:02:00,282 --> 00:02:03,878
In this case, the rules look
a little bit like datalog rules,

35
00:02:03,878 --> 00:02:05,546
but they're prolog rules.

36
00:02:05,546 --> 00:02:10,119
So, we ship this demo, or we require
that when you install this demo,

37
00:02:10,119 --> 00:02:12,454
you use a system called XSB prolog.

38
00:02:12,454 --> 00:02:17,049
It's sort of a hybrid between
a datalog system and a prolog system,

39
00:02:17,049 --> 00:02:18,589
it can kind of do both.

40
00:02:18,589 --> 00:02:24,215
And this is, you see, for example, here is
used to create reports from provenance.

41
00:02:24,215 --> 00:02:27,259
So this might as well be a Python script,
look at it.

42
00:02:27,259 --> 00:02:32,051
It says print horizontal lines and
print Name, Description and so on.

43
00:02:32,051 --> 00:02:33,810
So it prints out stuff.

44
00:02:33,810 --> 00:02:36,776
So this is kind of plumbing for the demo.

45
00:02:36,776 --> 00:02:39,168
Look at what is GV rules?

46
00:02:39,168 --> 00:02:44,452
GV rules is a set of rules
that creates Graphviz files.

47
00:02:44,452 --> 00:02:46,966
So what are Graphviz files?

48
00:02:46,966 --> 00:02:50,485
That is the external tool that
we use to render the graphs.

49
00:02:50,485 --> 00:02:57,222
So, we create a model, sort of a data
structure from the user annotations.

50
00:02:57,222 --> 00:03:00,333
And that to render it maybe
in different colors and

51
00:03:00,333 --> 00:03:04,049
different styles we use
an external tool called Graphviz.

52
00:03:04,049 --> 00:03:07,768
Sometimes the files that Graphviz
uses as input are called DOT files.

53
00:03:07,768 --> 00:03:11,313
We still have the extension
DOT which creates a lot of

54
00:03:11,313 --> 00:03:13,660
confusion with Microsoft files.

55
00:03:13,660 --> 00:03:16,683
I don't know, document templates or
whatever that stands for.

56
00:03:16,683 --> 00:03:22,084
So we try newer versions of the demo,
we tried to create .gv files for

57
00:03:22,084 --> 00:03:27,134
Graphviz, so we avoid the name
clash with the extension there.

58
00:03:27,134 --> 00:03:29,477
So again,
these look like plumbing rules too.

59
00:03:29,477 --> 00:03:31,305
They basically look inside here.

60
00:03:31,305 --> 00:03:36,097
These are essentially print statements,
glorified print statements where we create

61
00:03:36,097 --> 00:03:40,444
in a file, where we print into a file the
graph structure that we want to render.

62
00:03:40,444 --> 00:03:44,256
And then, we invoke the Graphviz tool to
actually do the rendering of the graph.

63
00:03:44,256 --> 00:03:48,124
I'm just going to walk you through some
of the sort of nuts and bolts of this.

64
00:03:48,124 --> 00:03:51,509
Reconstruction rules,
okay there's not too much going on here.

65
00:03:51,509 --> 00:03:55,549
Let's see, yw graph rules,
again these are views.

66
00:03:55,549 --> 00:03:59,477
So these are a little bit more now
like datalog rules the way we already

67
00:03:59,477 --> 00:04:00,171
know them.

68
00:04:00,171 --> 00:04:03,577
So these are the rules and
then there are queries.

69
00:04:03,577 --> 00:04:05,931
So, this is now closer to the user,

70
00:04:05,931 --> 00:04:09,549
rated that user's question
against the provenance.

71
00:04:09,549 --> 00:04:18,154
So, for example, if you say you want to
render the complete workflow graph.

72
00:04:18,154 --> 00:04:22,425
And here is the program that
gets executed for this.

73
00:04:22,425 --> 00:04:25,707
Okay, but
I think we're deep into the weeds, so

74
00:04:25,707 --> 00:04:31,169
let's go into the particular example
folder that we want to look at, so C3C4.

75
00:04:31,169 --> 00:04:33,192
You see each example has sub-folders, and

76
00:04:33,192 --> 00:04:36,265
the structure of those sub-folders
is pretty organized as well.

77
00:04:36,265 --> 00:04:41,880
But the thing that we first note is
there's a clean and a make script.

78
00:04:41,880 --> 00:04:43,452
What the clean script does,

79
00:04:43,452 --> 00:04:47,653
it basically deletes previous files
that were created from a previous run.

80
00:04:47,653 --> 00:04:50,652
And then, the make script kind of makes or

81
00:04:50,652 --> 00:04:54,523
builds the demonstration
artifacts files and so on.

82
00:04:54,523 --> 00:04:56,840
Let's look at the clean script first.

83
00:04:56,840 --> 00:04:58,968
You see what the clean script is doing.

84
00:04:58,968 --> 00:05:03,016
It's basically looking some,
looking up some directory variables.

85
00:05:03,016 --> 00:05:08,303
And then, it removes three folders, three
sub-folders for facts, views, and results.

86
00:05:08,303 --> 00:05:13,279
So if they exist from a previous run, or
maybe through a check out of the code or

87
00:05:13,279 --> 00:05:16,358
of the demo,
then we want to first delete them.

88
00:05:16,358 --> 00:05:19,151
So let's do that, let's create a shell.

89
00:05:19,151 --> 00:05:24,530
Editor likes to, it has its own mind
where to create those sub windows.

90
00:05:24,530 --> 00:05:27,727
So, we're going to run this clean first.

91
00:05:27,727 --> 00:05:31,789
So again, this is the folder in
which we are, we say clean.sh.

92
00:05:31,789 --> 00:05:35,043
That was easy, not a lot of output there.

93
00:05:35,043 --> 00:05:39,445
And sometimes this command line
demos are a little anticlimactic.

94
00:05:39,445 --> 00:05:42,224
So, we remove some folders great.

95
00:05:42,224 --> 00:05:45,211
Now let's look at this make.

96
00:05:45,211 --> 00:05:48,467
Okay, the make is there's
a little bit more going on.

97
00:05:48,467 --> 00:05:49,869
So let's just skim through it.

98
00:05:49,869 --> 00:05:54,620
I'm not expecting you to really understand
the shell script, but just I'm pointing

99
00:05:54,620 --> 00:05:58,395
out a few things so that you see
what are the ingredients being used.

100
00:05:58,395 --> 00:06:00,260
So we're creating these folders, and

101
00:06:00,260 --> 00:06:03,719
the folder names we get apparently
from the settings parent directory.

102
00:06:03,719 --> 00:06:07,146
So let's just go up one level
to the settings, so in settings,

103
00:06:07,146 --> 00:06:09,683
we've set lots of environmental variables.

104
00:06:09,683 --> 00:06:13,984
We tell what is the example directory,
what is the project route.

105
00:06:13,984 --> 00:06:18,580
We declare, for example,
facts directory and view directory and

106
00:06:18,580 --> 00:06:22,616
result directories to be
wherever the example is living.

107
00:06:22,616 --> 00:06:25,498
And then there are sub-folders for
facts and views and results.

108
00:06:25,498 --> 00:06:28,969
If we've done a clean,
now we need to make those folders first.

109
00:06:28,969 --> 00:06:31,861
And then what we do is we
run the YesWorkflow tool.

110
00:06:31,861 --> 00:06:35,576
You notice there's sort
of a YesWorkflow command.

111
00:06:35,576 --> 00:06:41,170
So how is that defined, yw command, cmd.

112
00:06:41,170 --> 00:06:45,797
So you see we use, the YesWorkflow command
as defined as a environment variable that

113
00:06:45,797 --> 00:06:47,439
has the value Java minus jar.

114
00:06:47,439 --> 00:06:50,226
So we're going to run
the Java archive file.

115
00:06:50,226 --> 00:06:51,291
And where does that come from?

116
00:06:51,291 --> 00:06:56,113
Well that again is defined in
another environment variable,

117
00:06:56,113 --> 00:06:58,718
which itself uses project root.

118
00:06:58,718 --> 00:07:02,441
So it's heavily parameterized
to make things generic and

119
00:07:02,441 --> 00:07:04,645
work across multiple examples and

120
00:07:04,645 --> 00:07:09,511
also in a way expose really the structure
of this prototype and of this demo.

121
00:07:09,511 --> 00:07:13,097
So we run YesWorkflow,
the command that we run is called model.

122
00:07:13,097 --> 00:07:17,809
It means create a model, output a model,
well, what are the inputs?

123
00:07:17,809 --> 00:07:23,138
The inputs are from the script directory
we take, in this case a MATLAB script.

124
00:07:23,138 --> 00:07:26,404
Now this MATLAB script has
DCS workflow annotations.

125
00:07:26,404 --> 00:07:30,152
We declare that the script
is written in MATLAB.

126
00:07:30,152 --> 00:07:32,630
I mean it's kind of implicit
in the extension, but

127
00:07:32,630 --> 00:07:34,138
we are explicit about it here.

128
00:07:34,138 --> 00:07:37,757
And then we have to tell
to YesWorkflow also,

129
00:07:37,757 --> 00:07:42,152
where should the outputs
from the YesWorkflow run go?

130
00:07:42,152 --> 00:07:47,110
So we declare what is the extract,
the fact file and the models.

131
00:07:47,110 --> 00:07:50,819
So where do the extracted facts go?

132
00:07:50,819 --> 00:07:53,144
So you got,
basically the user annotations.

133
00:07:53,144 --> 00:07:58,025
And where is the model itself going,
and what is the model?

134
00:07:58,025 --> 00:07:59,985
The model is a graph,
how do we represent the graph?

135
00:07:59,985 --> 00:08:03,594
As relational effects What
kind of relational facts,

136
00:08:03,594 --> 00:08:05,768
we could use SQLite or any SQL facts?

137
00:08:05,768 --> 00:08:08,095
But here we'll use this .P for Prolog,

138
00:08:08,095 --> 00:08:10,780
because we can run
recursive queries on them.

139
00:08:12,140 --> 00:08:16,654
Everybody who's done recursion in SQL
knows how tough this can be sometimes.

140
00:08:16,654 --> 00:08:20,954
And for our purposes, running powerful
queries in XSP is much easier.

141
00:08:20,954 --> 00:08:24,267
You can do everything from plumbing
to actual declarative queries to

142
00:08:24,267 --> 00:08:27,820
recursive prolog queries, we can all
do it in this one system called XSP.

143
00:08:27,820 --> 00:08:32,104
And so we declare that the query engine
in fact is XSP because that's what we

144
00:08:32,104 --> 00:08:33,600
want to use subsequently.

145
00:08:34,870 --> 00:08:39,750
And then we run a script that says,
okay, materialize to views and

146
00:08:39,750 --> 00:08:41,350
then that goes somewhere.

147
00:08:41,350 --> 00:08:46,580
And then we run another command,
ywmetlabreconcommand.

148
00:08:46,580 --> 00:08:48,210
So what is that?

149
00:08:48,210 --> 00:08:50,950
There is another Java file that we run for
that.

150
00:08:50,950 --> 00:08:51,940
And on it goes.

151
00:08:51,940 --> 00:08:55,140
And then eventually, we draw graphs.

152
00:08:55,140 --> 00:08:57,860
Here's that doc tool or graphics tool.

153
00:08:57,860 --> 00:09:00,410
So the command itself
is actually called dot.

154
00:09:00,410 --> 00:09:04,400
The package itself is called graphics, but
the executable command is called dot, so

155
00:09:04,400 --> 00:09:05,650
you have to have dot installed.

156
00:09:05,650 --> 00:09:11,050
So you can then, in the previous step,
the dot file was created and now you can

157
00:09:11,050 --> 00:09:16,710
render the graph itself and you can
render it as a PDF file or as a SVG file.

158
00:09:16,710 --> 00:09:19,000
So here's in particular the command.

159
00:09:19,000 --> 00:09:22,640
What this is saying,
go to the queries directory, look for

160
00:09:22,640 --> 00:09:25,490
a script called Render
complete workflow graph and

161
00:09:25,490 --> 00:09:30,170
this script will output or
generate a graphics file.

162
00:09:30,170 --> 00:09:31,930
So that's the extension .gv.

163
00:09:31,930 --> 00:09:36,475
That sometimes also called .dot,
confusingly.

164
00:09:36,475 --> 00:09:40,957
So period D-O-T, again confusing for
many reasons including

165
00:09:40,957 --> 00:09:46,250
because the operating system might
think it's a Microsoft dot file.

166
00:09:46,250 --> 00:09:51,290
So that's why we call it .gv, and
then we call the dot tool to read that

167
00:09:51,290 --> 00:09:56,450
just generated file, and create a PDF
file from it, as well as a SVG file.

168
00:09:57,530 --> 00:09:59,384
So one is good to look at in the browser,

169
00:09:59,384 --> 00:10:01,534
the other is good to look
at in the PDF viewer.

170
00:10:01,534 --> 00:10:03,801
And then there are particular queries.

171
00:10:03,801 --> 00:10:07,144
We just number them here, query1,
query2, 3, and so on, and

172
00:10:07,144 --> 00:10:09,788
several of them are prospective
problems queries.

173
00:10:09,788 --> 00:10:17,440
And some of them are I think, well not
here in this folder, hybrid queries, okay?

174
00:10:17,440 --> 00:10:18,100
All right, so

175
00:10:18,100 --> 00:10:23,120
let's run the demo after this sort
of somewhat lengthy introduction.

176
00:10:25,370 --> 00:10:31,953
So we already have seen what happens
when we run the clean script,

177
00:10:31,953 --> 00:10:38,551
now let's run this long make script
that makes all these things.

178
00:10:38,551 --> 00:10:43,573
We wait a moment while all of
these commands are being executed,

179
00:10:43,573 --> 00:10:44,880
and we are done.

180
00:10:44,880 --> 00:10:50,650
Okay, that is very exciting at this point.

181
00:10:50,650 --> 00:10:55,230
A script has been executed, no error was
reported, but the good news is we can now

182
00:10:55,230 --> 00:11:00,720
look into those various folders to find
what the script has generated, okay.

183
00:11:00,720 --> 00:11:04,590
So, again this is a demo where
sort of lots of queries have been

184
00:11:04,590 --> 00:11:05,902
assembled together.

185
00:11:05,902 --> 00:11:09,150
Everything is executed sort
of in one batch, if you like.

186
00:11:09,150 --> 00:11:14,090
So let's navigate those folders.

187
00:11:14,090 --> 00:11:19,140
So first of all, I'm showing this inside
of Emac so I can use it as a file browser

188
00:11:19,140 --> 00:11:23,590
and I could look also
at the execution time.

189
00:11:23,590 --> 00:11:26,730
We see at 10:37,
there's results folder and

190
00:11:26,730 --> 00:11:31,460
the facts folder and the views folder were
kind of touched, so these are brand new.

191
00:11:31,460 --> 00:11:33,880
Let's go first to the results folder and
maybe cut to the chase.

192
00:11:35,140 --> 00:11:42,539
And you see there's all these files
that have been created at 10:37.

193
00:11:42,539 --> 00:11:47,085
Just going to open slightly,
how do you say,

194
00:11:47,085 --> 00:11:52,532
optimistically all GV
files that were generated.

195
00:11:52,532 --> 00:11:58,209
So there are 14 graphic files that
have been generated by this script.

196
00:11:58,209 --> 00:12:02,599
So, apparently 14 questions were asked?

197
00:12:02,599 --> 00:12:06,440
And let's look at the answers
of those 14 questions.

198
00:12:06,440 --> 00:12:07,130
And here they come.

199
00:12:08,530 --> 00:12:16,420
So they're being opened and this certainly
could be improved in terms of explanation.

200
00:12:16,420 --> 00:12:18,270
These are the answers, but
what are the questions?

201
00:12:18,270 --> 00:12:21,980
We all know 42 is the answer, but
what was the question for that?

202
00:12:21,980 --> 00:12:25,250
Right, you might recall, anybody read
The Hitchhiker's Guide to the Galaxy?

203
00:12:26,460 --> 00:12:27,610
Not the right audience, okay?

204
00:12:28,640 --> 00:12:32,250
So here are the answers,
let's look at the question.

205
00:12:32,250 --> 00:12:36,330
The question is given away a little
bit in the file names here.

206
00:12:36,330 --> 00:12:40,790
So, here we see workflow
upstream of grass fraction data.

207
00:12:41,930 --> 00:12:43,580
What does that mean?

208
00:12:43,580 --> 00:12:44,238
It means,

209
00:12:44,238 --> 00:12:49,145
it is the workflow upstream of this output
product called grass fraction data.

210
00:12:49,145 --> 00:12:52,149
Another way to say that,
we can say that's the lineage,

211
00:12:52,149 --> 00:12:54,786
that's the data lineage
of grass fraction data.

212
00:12:54,786 --> 00:12:58,975
Grass fraction data,
according to the model that we've created,

213
00:12:58,975 --> 00:13:03,028
depends on only one input,
called SYNMAP, land cover map data.

214
00:13:03,028 --> 00:13:06,918
It does not depend on all these
other files that you've seen before.

215
00:13:06,918 --> 00:13:12,230
Yeah then, mean temperature and
mean precipitation data.

216
00:13:12,230 --> 00:13:13,250
It does not depend on that.

217
00:13:14,470 --> 00:13:15,590
Why does not it depend on it?

218
00:13:15,590 --> 00:13:19,630
Because as you can see it in the graph,
the other inputs are not mentioned.

219
00:13:19,630 --> 00:13:21,880
So it just depends on it,
it only depends on this one thing.

220
00:13:22,940 --> 00:13:23,990
And how does it depend on it?

221
00:13:23,990 --> 00:13:28,730
Well, there's a step called fetch
sinmap line covermap variable, okay.

222
00:13:28,730 --> 00:13:35,370
So first we apparently fetch this data and
then we generate the next CDR file for it.

223
00:13:35,370 --> 00:13:37,650
Is there any other input
that we need to consider?

224
00:13:37,650 --> 00:13:41,180
Yes, if you go to the right,
there's something called grass variable

225
00:13:41,180 --> 00:13:43,560
which comes from a step called
initialize grass matrix.

226
00:13:44,730 --> 00:13:50,456
So really, there's one external input
that feeds into this grass fraction

227
00:13:50,456 --> 00:13:56,850
data output, and then there's [INAUDIBLE]
internal data called Grass_variable.

228
00:13:56,850 --> 00:13:58,310
And we could now go to the script and

229
00:13:58,310 --> 00:14:02,000
try to look more closely
what the code actually does.

230
00:14:02,000 --> 00:14:04,770
But we have a high-level conceptual
overview, so that's one of the products.

231
00:14:06,510 --> 00:14:09,650
Here we see upstream of C4 fraction data.

232
00:14:09,650 --> 00:14:13,360
Now upstream of C4 in some
sense looks similar, but

233
00:14:13,360 --> 00:14:15,170
now there's kind of more stuff going on.

234
00:14:15,170 --> 00:14:19,938
So C4 fraction data also
has this step generate

235
00:14:19,938 --> 00:14:24,117
material file, but in this case for C4.

236
00:14:24,117 --> 00:14:31,034
And then also we have this length
cover map variable dependency,

237
00:14:31,034 --> 00:14:37,712
so we have that as well, but
we don't have the grass fraction,

238
00:14:42,662 --> 00:14:47,519
Actually we have the dependency on SYNMAP
blank cover map data, but the grass

239
00:14:47,519 --> 00:14:51,940
fraction output here is not there and
some of its details are not here.

240
00:14:53,540 --> 00:14:57,410
That grass, to initialize,
remember the initialize grass metrics?

241
00:14:57,410 --> 00:14:59,056
That's not here on this diagram.

242
00:15:02,098 --> 00:15:07,005
C3's just the same as C4, apart from the
fact that it's the output is different and

243
00:15:07,005 --> 00:15:09,270
the last step is different.

244
00:15:09,270 --> 00:15:11,910
So basically,
you could now begin to compare,

245
00:15:11,910 --> 00:15:14,790
how does the lineage of this
data compare to the other?

246
00:15:14,790 --> 00:15:18,820
You could do sort of
a graph diff if you like.

247
00:15:18,820 --> 00:15:20,350
What's the same and what's different?

248
00:15:20,350 --> 00:15:22,310
That would be an interesting question.

249
00:15:22,310 --> 00:15:27,430
Tell me how C3 fraction data and C4
fraction data are the same or different.

250
00:15:27,430 --> 00:15:30,193
You could maybe grey out
the parts that are the same and

251
00:15:30,193 --> 00:15:32,357
highlight the parts that are different.

252
00:15:32,357 --> 00:15:33,633
No?

253
00:15:35,948 --> 00:15:40,728
Okay, now whenever there's
something orange going on here,

254
00:15:40,728 --> 00:15:46,139
then this is the hybrid providence,
where we have sort of instantiated

255
00:15:46,139 --> 00:15:51,360
some of the data elements as per
the available files on disk.

256
00:15:51,360 --> 00:15:55,542
And as we have linked them
to the ES workflow model

257
00:15:55,542 --> 00:15:59,130
by way of these uri templates.

258
00:15:59,130 --> 00:16:01,620
So you might recall that
there were uri templates,

259
00:16:01,620 --> 00:16:03,745
let's look at the script again itself.

260
00:16:03,745 --> 00:16:05,230
To make that connection very clear.

261
00:16:06,960 --> 00:16:11,188
So we go here to the script subfolder and
here is the actual script,

262
00:16:11,188 --> 00:16:14,650
the MATLAB script that we've
been asking questions about.

263
00:16:17,350 --> 00:16:21,809
And whoops, it zoomed out again.

264
00:16:21,809 --> 00:16:25,641
And if I look at these URI templates,

265
00:16:25,641 --> 00:16:29,730
I see that they are in multiple places.

266
00:16:33,303 --> 00:16:38,484
So for example, the grass fraction

267
00:16:38,484 --> 00:16:43,327
output is over here, this file.

268
00:16:43,327 --> 00:16:44,910
But there are also inputs, yeah.

269
00:16:45,990 --> 00:16:51,460
So for example here,
the monthly precipitation probably and

270
00:16:51,460 --> 00:16:55,045
the monthly air temperature over here.

271
00:16:55,045 --> 00:16:57,840
They are declared through a variable.

272
00:17:01,930 --> 00:17:06,884
And actually,
let me see whether I can create this also

273
00:17:06,884 --> 00:17:12,180
quickly ad-hoc in
the workflow user interface.

274
00:17:12,180 --> 00:17:15,649
If I change the scripting
language to MATLAB.

275
00:17:15,649 --> 00:17:17,981
This is for the syntax, okay.

276
00:17:17,981 --> 00:17:23,190
So here, so this is now the browser,
right, I just ran that in the browser.

277
00:17:24,430 --> 00:17:27,370
And you see here these URI
template variables, you see that?

278
00:17:28,390 --> 00:17:30,430
Let me zoom in even more.

279
00:17:32,240 --> 00:17:34,610
See how's that, yeah.

280
00:17:34,610 --> 00:17:40,650
So these are the UI templates
that I declared in the script.

281
00:17:40,650 --> 00:17:44,527
And those are really valuable hooks that
connect the conceptual model to the files

282
00:17:44,527 --> 00:17:47,040
that this code reads and writes.

283
00:17:47,040 --> 00:17:51,106
And you see over here is a part,
when we ask for C3 and

284
00:17:51,106 --> 00:17:56,841
C4 fraction data input, there's
a part that we don't reach from here,

285
00:17:56,841 --> 00:18:01,060
like generate netcdf file for
grass fraction.

286
00:18:01,060 --> 00:18:03,030
These guys over here don't care about it,

287
00:18:03,030 --> 00:18:06,400
they don't care about the grass variable
and they don't care about this step.

288
00:18:06,400 --> 00:18:09,930
On the other hand, they do care about the
latitude and the longitude variables and

289
00:18:09,930 --> 00:18:11,760
so on.

290
00:18:12,870 --> 00:18:16,122
Okay, so back to the script.

291
00:18:19,709 --> 00:18:21,100
So this is what we've seen.

292
00:18:21,100 --> 00:18:27,328
And now this helps us understand
these diagrams that we're looking at.

293
00:18:27,328 --> 00:18:29,210
Okay, let's look at this one here.

294
00:18:32,570 --> 00:18:36,017
This is what I mentioned before again,

295
00:18:36,017 --> 00:18:40,829
this file was just created
from sort of the demo facts.

296
00:18:40,829 --> 00:18:45,248
And we see that this particular
output file depends,

297
00:18:45,248 --> 00:18:50,254
according to the model, and
according to the reconstructed

298
00:18:50,254 --> 00:18:55,181
problems that was found on disk,
it depends on 25 files.

299
00:18:55,181 --> 00:19:00,000
And when you look closely,
you see this precipitation data.

300
00:19:01,150 --> 00:19:04,050
The file name is actually APCP.

301
00:19:04,050 --> 00:19:07,030
Now we know it's precipitation,
[INAUDIBLE] rain.

302
00:19:07,030 --> 00:19:11,400
The years are there, between 2000-2010.

303
00:19:11,400 --> 00:19:15,297
And per month.

304
00:19:15,297 --> 00:19:18,380
This is not sorted nicely, but
you see there's 12 of them.

305
00:19:18,380 --> 00:19:20,930
So these are 12 netcdf files.

306
00:19:20,930 --> 00:19:23,770
And similar for air temperature.

307
00:19:23,770 --> 00:19:27,500
And so these are really the products,
and there's quite a few more.

308
00:19:29,570 --> 00:19:34,720
And again, the file name

309
00:19:34,720 --> 00:19:41,270
here gives away what the question was.

310
00:19:41,270 --> 00:19:42,040
So again, this is a prototype.

311
00:19:42,040 --> 00:19:47,744
Of course you could maybe embed this
as a little text in the graph itself.

312
00:19:47,744 --> 00:19:50,553
Or make this whole thing
more dynamic instead of

313
00:19:50,553 --> 00:19:52,527
sort of a batch processing demo.

314
00:19:52,527 --> 00:19:55,660
But for us, the important part
was that everything is there.

315
00:19:57,810 --> 00:19:59,910
Okay now, what about this one?

316
00:19:59,910 --> 00:20:04,117
Now, this one looks very different,
what is this?

317
00:20:04,117 --> 00:20:05,700
Why does this look so different?

318
00:20:08,090 --> 00:20:09,600
Any idea why this looks so different?

319
00:20:13,630 --> 00:20:20,070
So we know that c3 fraction data and c4
fraction data depend on a lot of things.

320
00:20:20,070 --> 00:20:22,830
If you look at the files,
it's even 25 files.

321
00:20:22,830 --> 00:20:25,319
If you look conceptually,
it's three inputs.

322
00:20:25,319 --> 00:20:26,980
But we don't see three inputs here.

323
00:20:28,380 --> 00:20:29,690
Any idea?

324
00:20:29,690 --> 00:20:32,288
Again, this is the answer,
but what was the question?

325
00:20:37,759 --> 00:20:44,240
The question here was not what was
upstream of C3 or C4_fraction_data.

326
00:20:44,240 --> 00:20:48,810
The question is,
what is downstream of mean precipitation?

327
00:20:48,810 --> 00:20:50,910
This is a different question.

328
00:20:50,910 --> 00:20:54,970
It's subtle, when you all look at these
graphs, if you only look at the graphs and

329
00:20:54,970 --> 00:21:00,570
don't think more about it, you might
miss out on a lot of the finer points.

330
00:21:00,570 --> 00:21:04,460
Normally, we're interested in sort of
the upstream lineage of an output.

331
00:21:04,460 --> 00:21:07,400
We say, okay, here's an output,
what went into it?

332
00:21:09,270 --> 00:21:11,710
Why, because maybe you want to
publish that output and

333
00:21:11,710 --> 00:21:15,400
you want to just cut out
as much as you need, right?

334
00:21:15,400 --> 00:21:18,080
You don't want to publish
more than you need, so

335
00:21:18,080 --> 00:21:22,650
you output just that particular
product that you're interested in

336
00:21:22,650 --> 00:21:24,960
together with everything
that you need to produce it.

337
00:21:27,620 --> 00:21:32,523
On the other hand, maybe you know that
some of your input data sets was tainted,

338
00:21:32,523 --> 00:21:34,850
there's some problem with it.

339
00:21:34,850 --> 00:21:36,110
Now you have a different question.

340
00:21:36,110 --> 00:21:44,045
Now you say, okay, what output products
are influenced by this particular input?

341
00:21:44,045 --> 00:21:44,979
It's not the same question.

342
00:21:44,979 --> 00:21:46,605
It's not the same graph.

343
00:21:46,605 --> 00:21:50,640
So here you would say, well,
if my precipitation data has flaws.

344
00:21:50,640 --> 00:21:53,050
Later we found out there was
something wrong with it.

345
00:21:53,050 --> 00:21:58,731
But what are my products that
are now spoiled because of it?

346
00:21:58,731 --> 00:22:01,859
And what we see here is
the C3_fraction_data and

347
00:22:01,859 --> 00:22:04,560
the C4_fraction_data will be spoiled.

348
00:22:04,560 --> 00:22:08,412
If you were to go upstream again, there's
many more things that C3 and C4 depend on.

349
00:22:08,412 --> 00:22:10,803
But that was not the question.

350
00:22:10,803 --> 00:22:14,720
The question here was, what is
downstream of mean precipitation data?

351
00:22:15,780 --> 00:22:20,810
So what is the influence of this
particular input on outputs?

352
00:22:20,810 --> 00:22:23,840
And then we see, well,
these are the paths taken.

353
00:22:23,840 --> 00:22:28,570
So this is how this particular input
could flow into the output data products.

354
00:22:28,570 --> 00:22:33,570
And if the input was problematic,
then maybe these two products have to be

355
00:22:33,570 --> 00:22:40,810
recreated, but not the third, because
that's not influenced by this input, okay?

356
00:22:40,810 --> 00:22:43,318
And of course, I was hiding this from you.

357
00:22:43,318 --> 00:22:49,339
If you look at the file name, it is
called downstream of mean precipitation.

358
00:22:52,250 --> 00:22:55,630
Well, it's text, so where is that encoded?

359
00:22:55,630 --> 00:22:58,940
So somewhere in the query,
there's an encoding.

360
00:22:58,940 --> 00:23:03,470
So think of it as an equivalent maybe
Datalog or SQL where you write a query

361
00:23:03,470 --> 00:23:07,830
that corresponds to, take this node and
go downstream of it.

362
00:23:07,830 --> 00:23:10,169
That's actually the query
being executed here.

363
00:23:10,169 --> 00:23:13,783
And this is just a rendering
of the output subgraph.

364
00:23:17,357 --> 00:23:22,162
But it looks very different from
the other graphs we've seen,

365
00:23:22,162 --> 00:23:27,250
because it seems to be missing,
whoops, time to do other things.

366
00:23:27,250 --> 00:23:33,233
My calendar likes to jump into the action,
not very nice.

367
00:23:39,192 --> 00:23:44,835
So again, over here we see this
downstream question answered.

368
00:23:46,030 --> 00:23:50,062
And we see that several items on the right
are missing, or upstream are missing.

369
00:23:50,062 --> 00:23:54,287
But they're missing on purpose,
because we had asked another question.

370
00:23:54,287 --> 00:23:57,063
Okay, so
let's go through the other data products.

371
00:23:57,063 --> 00:23:59,668
What is this, downstream.

372
00:23:59,668 --> 00:24:02,939
And so there's lots of
little queries in a way now.

373
00:24:02,939 --> 00:24:05,779
So downstream of the latitude variable.

374
00:24:05,779 --> 00:24:09,083
Again, this is a downstream query,
not an upstream one.

375
00:24:09,083 --> 00:24:11,688
More downstream business.

376
00:24:11,688 --> 00:24:13,118
This is the complete workflow graph.

377
00:24:13,118 --> 00:24:15,151
Of course, this is sort of the user model,

378
00:24:15,151 --> 00:24:18,548
with the only exception that the URI
templates are not mentioned here.

379
00:24:18,548 --> 00:24:21,141
But it is the full graph.

380
00:24:21,141 --> 00:24:23,500
And, again,
you can see when you ask an upstream and

381
00:24:23,500 --> 00:24:25,867
a downstream question how
they would be different.

382
00:24:25,867 --> 00:24:30,469
If you say, upstream of C_fraction_data,
you will get all the inputs,

383
00:24:30,469 --> 00:24:34,777
mean precip, mean air temperature,
and SYNMAP land cover map data,

384
00:24:34,777 --> 00:24:36,547
if you go upstream from C3.

385
00:24:36,547 --> 00:24:40,197
But if you go say downstream
from mean temperature only,

386
00:24:40,197 --> 00:24:43,314
if you only go downstream,
well, first of all,

387
00:24:43,314 --> 00:24:46,902
all of this stuff on the right
you will never hit, yeah.

388
00:24:46,902 --> 00:24:51,205
But you will get C3 and C4, but
you will not get grass friction data.

389
00:24:51,205 --> 00:24:55,228
Also you will not get this stuff up
here that has to do with precipitation.

390
00:24:55,228 --> 00:24:58,860
We just get the temperature stuff, yeah.

391
00:24:58,860 --> 00:25:02,371
So again, depending on whether you go
upstream or downstream, obviously that's

392
00:25:02,371 --> 00:25:05,950
a different question and you got different
answers, you shouldn't be surprised.

393
00:25:05,950 --> 00:25:10,352
It's like asking about your offspring
versus about your ancestors,

394
00:25:10,352 --> 00:25:11,850
not the same question.

395
00:25:11,850 --> 00:25:15,920
But when you just look at the graph,
unless you say in the caption or

396
00:25:15,920 --> 00:25:19,629
in the explanation close to
the graph what the question was,

397
00:25:19,629 --> 00:25:22,046
you might read the graph the wrong way.

398
00:25:22,046 --> 00:25:27,222
Very tempting or very easy pitfall

399
00:25:27,222 --> 00:25:35,077
here because it's easy to
create these artifacts.

400
00:25:35,077 --> 00:25:40,758
[MUSIC]