1
00:00:00,019 --> 00:00:08,344
[MUSIC]

2
00:00:08,344 --> 00:00:12,160
Hello and welcome to week two of
Theory and Practice of Data Cleaning.

3
00:00:12,160 --> 00:00:16,020
Last week, I gave a general overview of
data cleaning, data quality dimensions and

4
00:00:16,020 --> 00:00:19,050
topics and
tools to be covered in this course.

5
00:00:19,050 --> 00:00:21,640
This week,
we will already get our hands dirty.

6
00:00:21,640 --> 00:00:24,430
Maybe not surprising if you
want to clean dirty data.

7
00:00:24,430 --> 00:00:27,680
And we do this by learning about and
then exercising an approach for

8
00:00:27,680 --> 00:00:31,290
recognizing syntactic patterns and
data quality issues.

9
00:00:31,290 --> 00:00:34,660
Specifically this week we'll
learn about regular expressions.

10
00:00:34,660 --> 00:00:37,370
First by looking at the roots of
regular expressions in theoretical

11
00:00:37,370 --> 00:00:38,640
computer science.

12
00:00:38,640 --> 00:00:41,470
But then, also by learning about
the practical aspects of using

13
00:00:41,470 --> 00:00:42,900
real world regular expressions.

14
00:00:43,990 --> 00:00:46,300
These regular expressions are found
in modern programming and

15
00:00:46,300 --> 00:00:51,040
scripting languages, text editors and
even special tools such as open refine for

16
00:00:51,040 --> 00:00:52,490
data cleaning.

17
00:00:52,490 --> 00:00:55,720
And they do differ quite a bit from
the theoretical regular expressions,

18
00:00:55,720 --> 00:00:57,680
studied in computer science theory.

19
00:00:57,680 --> 00:01:01,220
After you've worked through this week's
material, you should be able to understand

20
00:01:01,220 --> 00:01:04,880
how regular expressions and
regular languages fit in a larger

21
00:01:04,880 --> 00:01:09,020
theoretical framework of formal
languages studied in computer science.

22
00:01:09,020 --> 00:01:12,870
But then from a practical point of view,
you should be able to apply real world

23
00:01:12,870 --> 00:01:16,970
regular expressions to match certain
patterns in order to determine

24
00:01:16,970 --> 00:01:20,390
whether a data string corresponds
to a standard format or not.

25
00:01:20,390 --> 00:01:22,490
Say for example the ISo date format.

26
00:01:24,040 --> 00:01:27,790
Having even a basic understanding in some
practical skills of regular expressions

27
00:01:27,790 --> 00:01:31,220
go a very long way to what's more
effectively working with data,

28
00:01:31,220 --> 00:01:34,590
whether just doing the initial data
extraction phase or the matching,

29
00:01:34,590 --> 00:01:37,300
checking, and
transformation of data at the later stage.

30
00:01:38,800 --> 00:01:41,470
Regular expression skills can be
applied in general scripting and

31
00:01:41,470 --> 00:01:45,580
programming languages, ranging from R and
Python to Java, to name a few.

32
00:01:47,230 --> 00:01:49,970
Even when using specialized tools,
for example, OpenRefine for

33
00:01:49,970 --> 00:01:53,160
data cleaning,
regular expressions will come very handy.

34
00:01:53,160 --> 00:01:55,820
At the end of this week the hands
on assignment will await you

35
00:01:55,820 --> 00:01:58,570
to test your understanding
of regular expressions.

36
00:01:58,570 --> 00:01:59,160
In particular,

37
00:01:59,160 --> 00:02:03,310
in the first hands-on assignment, we'll
have to come up with regular expressions

38
00:02:03,310 --> 00:02:08,090
that match certain data formats for
example, for dates or email addresses.

39
00:02:08,090 --> 00:02:10,870
It will be important and
can sometimes be a bit tricky

40
00:02:10,870 --> 00:02:15,030
to come up with regular expressions that
match the desired positive examples.

41
00:02:15,030 --> 00:02:17,340
But do not match the undesired
negative examples.

42
00:02:18,650 --> 00:02:21,900
I will point you to an online website that
allows you to experiment with regular

43
00:02:21,900 --> 00:02:24,860
expressions easily and interactively.

44
00:02:24,860 --> 00:02:28,940
Okay, let's jump right into the first
lecture on regular expressions.

45
00:02:28,940 --> 00:02:39,246
[MUSIC]

46
00:02:39,246 --> 00:02:42,369
[SOUND]