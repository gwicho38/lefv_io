In this video, I want to show you how to use a website for exploring regular expressions. This is part of one of the assignments, and so we're going to also look at how to use the auto grading tool for the assignment. So, let's take a look at quickly at this comic again from xkcd. It describes an ISO standard or the theme is an ISO standard, how dates should be written. There are many ways how dates can be written and you find some commonly used ones and not so commonly used ones in this comic down here. Because there are these very different ways to spell the dates and to write the dates, there are a lot of data integration and data quality issues when we work with data sets. So, one of the first tasks that we want to explore here is how can we detect whether a date in a data set is in fact conforming to the ISO standard or not? So how would I detect whether my data set, for example, has this format 2013-02-27 which is a valid date and advantage that should be obvious from writing this date is that you can sort just regular sorting order, lexicographic order and it will work for these kinds of formatted strings. All right. So we want to check using a regular expression how this works. And so first, lets have a look at the Website that will help us for exploring regular expressions. In case you do want to know more about this particular ISO standard, the Wikipedia page is not the worst starting point. In fact, as often this is a great starting point to get an idea. For the purposes however, of our exercise and the assignment, we will use a simplified format for regular expressions and for dates in particular. OK. So let's go to this Web site. It's called RegExr- RegExr dot com. So for regular expressions and what it allows us to do is to plug in an irregular expression here, the upper part, it also explains as you hover over this expression, website explains to you what you're looking at and then it shows what is being matched. So let's look at a simple example, so for example, here the expression says 'I want to match', and this is a character set from A through Z so uppercase characters only, but then followed by the symbol backslash W means a word character, and then there's a modifier called Plus which says, that we want to match a word character one or more times. So taken together what does this regular expression say? It says match all the words that start with a capital letter and then have at least one more word character after it. So if I just had a single A for example, like so, this would not be matched. But as soon as I have another word character afterwards say A1, AA, AB, then it will match. So we have a single capital letter, followed by one or more word characters. So for example atom would match. All right, now let's look at examples that are relevant for our data cleaning course in particular, let's first look at the simple examples for matching IP addresses. This is another common example, we want to match IP addresses in a data set. So here are some examples of positive matches that we should detect and here are also some negative examples that our tools should not detect, or our regular expression should not detect. Let's try. For example maybe our first attempt here is the full expression I'm going to plug it up here. You see the number of matches has been changed and we can actually delete these things that we don't need here and we'll just move towards our particular example we want to match. So we want to match IP addresses, and it's indeed, you know, these IP address is here a 1 2 3 4 or 192.168.01, they indeed have been matched but so have our negative examples or some of our negative examples, so our regular expression here is too broad. In particular, it says match word characters or words- one or more word characters separated by a dot. So this is not quite right. So what we should match instead of general word characters, we should just match numeric characters. So 0 to 9, so I am going to replace this here. And now we see our Internet address is here still are being matched, but several of the negative examples are no longer match although, there are still some examples that are being matched. So this is not quite right. So we're going to modify this a little more, but first let's have a look here. This character set from 0 to 9 is also a shortcut and that is called backslash d for the digit. So first of all, let's simplify this expression some more. I'm going to copy and paste this up in here, and we see this matches exactly the same Internet address as before. There are seven total matches, five of these are okay but there are also two false positives, so we want to eliminate those. So what's going on here, well let's have a look: We notice that for example, this false positive match has numbers in the thousands not in the hundreds. So we could modify this further by saying, we have between 1 and 3 digits only and then remove the plus sign and again for each of the pluses, we say between 1 and 3. So if we do this between 1 and 3 and also for the last one, so we will notice that still are positive examples all match and we have now only one negative example. And so you can think about well, we have a partial match here. So but this other dot 5 should rule out the match. How could we do this? Maybe by putting some expression at the end where we say what we don't want to match. There are different options. So, I'll leave it at that, but this is an example of how we can match Internet addresses and this is approximately right. Let's look at another example where we want to match, not Internet addresses, but dates. So let's remove these examples for the down. I have some examples of dates. So here we have validating simple ISO dates. So the format is four characters for the year, of course four digits, two for the month and two for the day, so that the sorting works. And we also have a slash between them. So here are positive examples and none of the positive examples is matched. So but here we get already an idea from our previous construction for Internet addresses. So we're going to pluck this one in. What does it say? It says 'start with the digit exactly four' then a dash then exactly two digits and another dash and again exactly two digits. So the only problem here is that we have one false positive match which is this data that says the day is 100, there's of course no 100 days in any month. So we might want to put another delimiter there and say well maybe, after these two there cannot be a digit. So how could we define that? Example, we could use this not 0 through 1, 0 through 9, and now we see over exactly five matches, and there are other ways. So maybe we'll have a word boundary there. Yeah. And again we have only five digits. So, there are different ways to match this. Okay, so you see the RegExr tool, or the RegExr website is a wonderful site to play and explore regular expressions, and it will also be useful to have positive and negative examples from the assignment that you can try out.