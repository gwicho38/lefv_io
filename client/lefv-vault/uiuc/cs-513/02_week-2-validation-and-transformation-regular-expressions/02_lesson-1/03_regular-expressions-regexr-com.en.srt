1
00:00:07,629 --> 00:00:14,640
In this video, I want to show you how to use a website for exploring regular expressions.

2
00:00:14,640 --> 00:00:16,901
This is part of one of the assignments,

3
00:00:16,901 --> 00:00:21,574
and so we're going to also look at how to use the auto grading tool for the assignment.

4
00:00:21,574 --> 00:00:26,024
So, let's take a look at quickly at this comic again from xkcd.

5
00:00:26,024 --> 00:00:29,989
It describes an ISO standard or the theme is an ISO standard,

6
00:00:29,989 --> 00:00:31,760
how dates should be written.

7
00:00:31,760 --> 00:00:34,009
There are many ways how dates can be written and you find

8
00:00:34,009 --> 00:00:39,469
some commonly used ones and not so commonly used ones in this comic down here.

9
00:00:39,469 --> 00:00:43,460
Because there are these very different ways to spell the dates and to write the dates,

10
00:00:43,460 --> 00:00:49,320
there are a lot of data integration and data quality issues when we work with data sets.

11
00:00:49,320 --> 00:00:54,784
So, one of the first tasks that we want to explore here is how can we detect

12
00:00:54,784 --> 00:01:00,939
whether a date in a data set is in fact conforming to the ISO standard or not?

13
00:01:00,939 --> 00:01:04,250
So how would I detect whether my data set, for example,

14
00:01:04,250 --> 00:01:08,870
has this format 2013-02-27 which is

15
00:01:08,870 --> 00:01:12,530
a valid date and advantage that should be obvious from writing

16
00:01:12,530 --> 00:01:16,810
this date is that you can sort just regular sorting order,

17
00:01:16,810 --> 00:01:21,799
lexicographic order and it will work for these kinds of formatted strings.

18
00:01:21,799 --> 00:01:27,045
All right. So we want to check using a regular expression how this works.

19
00:01:27,045 --> 00:01:30,560
And so first, lets have a look at the Website that will help

20
00:01:30,560 --> 00:01:34,424
us for exploring regular expressions.

21
00:01:34,424 --> 00:01:39,120
In case you do want to know more about this particular ISO standard,

22
00:01:39,120 --> 00:01:42,680
the Wikipedia page is not the worst starting point.

23
00:01:42,680 --> 00:01:46,504
In fact, as often this is a great starting point to get an idea.

24
00:01:46,504 --> 00:01:50,555
For the purposes however, of our exercise and the assignment,

25
00:01:50,555 --> 00:01:54,965
we will use a simplified format for regular expressions and for dates in particular.

26
00:01:54,965 --> 00:01:57,109
OK. So let's go to this Web site.

27
00:01:57,109 --> 00:02:00,829
It's called RegExr- RegExr dot com.

28
00:02:00,829 --> 00:02:04,489
So for regular expressions and what it allows us to

29
00:02:04,489 --> 00:02:08,719
do is to plug in an irregular expression here, the upper part,

30
00:02:08,719 --> 00:02:12,139
it also explains as you hover over this expression,

31
00:02:12,139 --> 00:02:17,604
website explains to you what you're looking at and then it shows what is being matched.

32
00:02:17,604 --> 00:02:20,330
So let's look at a simple example, so for example,

33
00:02:20,330 --> 00:02:24,719
here the expression says 'I want to match',

34
00:02:24,719 --> 00:02:29,764
and this is a character set from A through Z so uppercase characters only,

35
00:02:29,764 --> 00:02:35,689
but then followed by the symbol backslash W means a word character,

36
00:02:35,689 --> 00:02:39,740
and then there's a modifier called Plus which says,

37
00:02:39,740 --> 00:02:44,349
that we want to match a word character one or more times.

38
00:02:44,349 --> 00:02:47,000
So taken together what does this regular expression say?

39
00:02:47,000 --> 00:02:51,050
It says match all the words that start with a capital letter and then

40
00:02:51,050 --> 00:02:55,310
have at least one more word character after it.

41
00:02:55,310 --> 00:02:58,455
So if I just had a single A for example,

42
00:02:58,455 --> 00:03:01,995
like so, this would not be matched.

43
00:03:01,995 --> 00:03:06,409
But as soon as I have another word character afterwards say A1,

44
00:03:06,409 --> 00:03:12,064
AA, AB, then it will match.

45
00:03:12,064 --> 00:03:14,495
So we have a single capital letter,

46
00:03:14,495 --> 00:03:18,780
followed by one or more word characters.

47
00:03:18,780 --> 00:03:22,514
So for example atom would match.

48
00:03:22,514 --> 00:03:25,530
All right, now let's look at examples that are relevant for

49
00:03:25,530 --> 00:03:28,830
our data cleaning course in particular,

50
00:03:28,830 --> 00:03:32,215
let's first look at the simple examples for matching IP addresses.

51
00:03:32,215 --> 00:03:34,740
This is another common example,

52
00:03:34,740 --> 00:03:39,025
we want to match IP addresses in a data set.

53
00:03:39,025 --> 00:03:42,150
So here are some examples of positive matches that we should

54
00:03:42,150 --> 00:03:46,849
detect and here are also some negative examples that our tools should not detect,

55
00:03:46,849 --> 00:03:48,775
or our regular expression should not detect.

56
00:03:48,775 --> 00:03:50,914
Let's try.

57
00:03:50,914 --> 00:03:53,009
For example maybe our first attempt

58
00:03:53,009 --> 00:03:56,229
here is the full expression I'm going to plug it up here.

59
00:03:56,229 --> 00:03:57,659
You see the number of matches has been

60
00:03:57,659 --> 00:04:01,259
changed and we can actually delete these things that we

61
00:04:01,259 --> 00:04:06,585
don't need here and we'll just move towards our particular example we want to match.

62
00:04:06,585 --> 00:04:10,324
So we want to match IP addresses, and it's indeed,

63
00:04:10,324 --> 00:04:14,819
you know, these IP address is here a 1 2 3 4 or 192.168.01,

64
00:04:14,819 --> 00:04:17,550
they indeed have been matched but so

65
00:04:17,550 --> 00:04:21,375
have our negative examples or some of our negative examples,

66
00:04:21,375 --> 00:04:24,535
so our regular expression here is too broad.

67
00:04:24,535 --> 00:04:28,910
In particular, it says match word characters or

68
00:04:28,910 --> 00:04:33,514
words- one or more word characters separated by a dot.

69
00:04:33,514 --> 00:04:34,790
So this is not quite right.

70
00:04:34,790 --> 00:04:37,845
So what we should match instead of general word characters,

71
00:04:37,845 --> 00:04:41,550
we should just match numeric characters.

72
00:04:41,550 --> 00:04:44,375
So 0 to 9, so I am going to replace this here.

73
00:04:44,375 --> 00:04:49,355
And now we see our Internet address is here still are being matched,

74
00:04:49,355 --> 00:04:52,279
but several of the negative examples are no longer match although,

75
00:04:52,279 --> 00:04:55,204
there are still some examples that are being matched.

76
00:04:55,204 --> 00:04:57,064
So this is not quite right.

77
00:04:57,064 --> 00:04:58,704
So we're going to modify this a little more,

78
00:04:58,704 --> 00:05:00,466
but first let's have a look here.

79
00:05:00,466 --> 00:05:04,550
This character set from 0 to 9 is also

80
00:05:04,550 --> 00:05:08,790
a shortcut and that is called backslash d for the digit.

81
00:05:08,790 --> 00:05:11,629
So first of all, let's simplify this expression some more.

82
00:05:11,629 --> 00:05:13,897
I'm going to copy and paste this up in here,

83
00:05:13,897 --> 00:05:17,660
and we see this matches exactly the same Internet address as before.

84
00:05:17,660 --> 00:05:19,642
There are seven total matches,

85
00:05:19,642 --> 00:05:24,808
five of these are okay but there are also two false positives,

86
00:05:24,808 --> 00:05:26,269
so we want to eliminate those.

87
00:05:26,269 --> 00:05:27,689
So what's going on here,

88
00:05:27,689 --> 00:05:32,889
well let's have a look: We notice that for example,

89
00:05:32,889 --> 00:05:40,490
this false positive match has numbers in the thousands not in the hundreds.

90
00:05:40,490 --> 00:05:44,194
So we could modify this further by saying,

91
00:05:44,194 --> 00:05:48,600
we have between 1 and 3 digits only and then

92
00:05:48,600 --> 00:05:52,845
remove the plus sign and again for each of the pluses,

93
00:05:52,845 --> 00:05:57,254
we say between 1 and 3.

94
00:05:57,254 --> 00:06:02,174
So if we do this between 1 and 3 and also for the last one,

95
00:06:02,174 --> 00:06:04,959
so we will notice that still are

96
00:06:04,959 --> 00:06:10,370
positive examples all match and we have now only one negative example.

97
00:06:10,370 --> 00:06:12,175
And so you can think about well,

98
00:06:12,175 --> 00:06:14,425
we have a partial match here.

99
00:06:14,425 --> 00:06:19,540
So but this other dot 5 should rule out the match. How could we do this?

100
00:06:19,540 --> 00:06:26,425
Maybe by putting some expression at the end where we say what we don't want to match.

101
00:06:26,425 --> 00:06:29,060
There are different options. So, I'll leave it at that,

102
00:06:29,060 --> 00:06:31,225
but this is an example of how we can match

103
00:06:31,225 --> 00:06:34,225
Internet addresses and this is approximately right.

104
00:06:34,225 --> 00:06:37,274
Let's look at another example where we want to match,

105
00:06:37,274 --> 00:06:39,470
not Internet addresses, but dates.

106
00:06:39,470 --> 00:06:42,795
So let's remove these examples for the down.

107
00:06:42,795 --> 00:06:45,064
I have some examples of dates.

108
00:06:45,064 --> 00:06:48,139
So here we have validating simple ISO dates.

109
00:06:48,139 --> 00:06:52,219
So the format is four characters for the year,

110
00:06:52,219 --> 00:06:53,589
of course four digits,

111
00:06:53,589 --> 00:06:55,639
two for the month and two for the day,

112
00:06:55,639 --> 00:06:57,699
so that the sorting works.

113
00:06:57,699 --> 00:07:00,800
And we also have a slash between them.

114
00:07:00,800 --> 00:07:05,180
So here are positive examples and none of the positive examples is matched.

115
00:07:05,180 --> 00:07:10,290
So but here we get already an idea from our previous construction for Internet addresses.

116
00:07:10,290 --> 00:07:12,105
So we're going to pluck this one in.

117
00:07:12,105 --> 00:07:14,220
What does it say?

118
00:07:14,220 --> 00:07:19,725
It says 'start with the digit exactly four' then a dash

119
00:07:19,725 --> 00:07:25,944
then exactly two digits and another dash and again exactly two digits.

120
00:07:25,944 --> 00:07:30,069
So the only problem here is that we have

121
00:07:30,069 --> 00:07:35,910
one false positive match which is this data that says the day is 100,

122
00:07:35,910 --> 00:07:39,634
there's of course no 100 days in any month.

123
00:07:39,634 --> 00:07:44,254
So we might want to put another delimiter there and say well maybe,

124
00:07:44,254 --> 00:07:48,105
after these two there cannot be a digit.

125
00:07:48,105 --> 00:07:49,920
So how could we define that?

126
00:07:49,920 --> 00:07:55,796
Example, we could use this not 0 through 1,

127
00:07:55,796 --> 00:08:00,040
0 through 9, and now we see over exactly five matches,

128
00:08:00,040 --> 00:08:01,694
and there are other ways.

129
00:08:01,694 --> 00:08:04,514
So maybe we'll have a word boundary there.

130
00:08:04,514 --> 00:08:06,665
Yeah. And again we have only five digits.

131
00:08:06,665 --> 00:08:08,439
So, there are different ways to match this.

132
00:08:08,439 --> 00:08:10,625
Okay, so you see the RegExr tool,

133
00:08:10,625 --> 00:08:15,235
or the RegExr website is a wonderful site to play and explore regular expressions,

134
00:08:15,235 --> 00:08:16,810
and it will also be useful to have

135
00:08:16,810 --> 00:08:21,449
positive and negative examples from the assignment that you can try out.