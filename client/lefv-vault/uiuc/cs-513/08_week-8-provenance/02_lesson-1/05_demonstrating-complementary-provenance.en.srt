1
00:00:07,469 --> 00:00:13,929
Now there is sometimes the need to have even finer-grained dependencies.

2
00:00:13,929 --> 00:00:22,375
And I want to briefly report on a collaboration between our team,

3
00:00:22,375 --> 00:00:23,934
who has developed YesWorkflow,

4
00:00:23,934 --> 00:00:30,100
and another team from Brazil that has developed another system called noWorkflow.

5
00:00:30,100 --> 00:00:31,660
Now that sounds a little strange.

6
00:00:31,660 --> 00:00:34,320
So there's a YesWorkflow system and a noWorkflow system.

7
00:00:34,320 --> 00:00:35,920
So what noWorkflow is doing, well,

8
00:00:35,920 --> 00:00:38,380
first of all, what does noWorkflow stand for?

9
00:00:38,380 --> 00:00:44,464
It's not "against workflows," as the name might suggest,

10
00:00:44,464 --> 00:00:50,724
but it stands for "not only workflow," which is a little play on noSQL or "no sequel",

11
00:00:50,724 --> 00:00:53,424
which stands for either,

12
00:00:53,424 --> 00:00:55,210
depending who you ask,

13
00:00:55,210 --> 00:00:56,734
"We don't like sequel.

14
00:00:56,734 --> 00:00:58,161
We have other ways to do things,

15
00:00:58,161 --> 00:01:01,500
" or it stands for "not only SQL."

16
00:01:01,500 --> 00:01:05,694
So maybe there are specialized query mechanisms and languages

17
00:01:05,694 --> 00:01:10,730
and database models that are useful for certain applications.

18
00:01:10,730 --> 00:01:16,299
So, the noSQL kind of name I think gave rise for this group to decide,

19
00:01:16,299 --> 00:01:18,639
well, we call our system noWorkflow.

20
00:01:18,639 --> 00:01:21,519
And what it's about, as you shall see,

21
00:01:21,519 --> 00:01:25,650
it's about capturing provenance from script runs.

22
00:01:25,650 --> 00:01:28,480
So their attitude was to say, "Well,

23
00:01:28,480 --> 00:01:32,825
we need provenance not only from proper workflows but also from scripts."

24
00:01:32,825 --> 00:01:35,019
We kind of turned this around a little bit and said,

25
00:01:35,019 --> 00:01:38,260
"Well, but the scripts are kind of worthless too.

26
00:01:38,260 --> 00:01:39,760
So we say YesWorkflow."

27
00:01:39,760 --> 00:01:43,415
But the tools turn out to be very complimentary in their goals.

28
00:01:43,415 --> 00:01:46,409
Again, noWorkflow captures mostly runtime provenance,

29
00:01:46,409 --> 00:01:49,734
although it has a prospective provenance element as well.

30
00:01:49,734 --> 00:01:52,489
And YesWorkflow is mostly about prospective provenance,

31
00:01:52,489 --> 00:01:55,734
but it can also do something with retrospective provenance.

32
00:01:55,734 --> 00:01:59,064
So, they're sort of starting out at different ends,

33
00:01:59,064 --> 00:02:00,670
and in this little project,

34
00:02:00,670 --> 00:02:04,614
we found a way to use those systems with good effect together.

35
00:02:04,614 --> 00:02:08,664
So I'm gonna just briefly go into this demonstration,

36
00:02:08,664 --> 00:02:11,560
and then I'll do a hands-on demonstration myself.

37
00:02:11,560 --> 00:02:13,629
So the history of what I like to call

38
00:02:13,629 --> 00:02:18,699
the YesWorkflow-noWorkflow Demo or the Yin and Yang Demo is that we

39
00:02:18,699 --> 00:02:26,755
have demonstrated the use of YesWorkflow in combination with retrospective provenance.

40
00:02:26,755 --> 00:02:32,500
And, there was a research seminar at a certain venue in Dagstuhl ,

41
00:02:32,500 --> 00:02:37,479
which is a well-known computer science research meeting place in Germany,

42
00:02:37,479 --> 00:02:40,039
and so we got together,

43
00:02:40,039 --> 00:02:43,679
the people behind YesWorkflow and the people behind noWorkflow.

44
00:02:43,679 --> 00:02:46,810
We got together and said, you know, we should really see whether we can build a bridge

45
00:02:46,810 --> 00:02:50,310
between these two kinds of provenance information and see what we can do with it.

46
00:02:50,310 --> 00:02:53,780
So, let me briefly,

47
00:02:53,780 --> 00:02:56,884
you know, explain how that thing works.

48
00:02:56,884 --> 00:02:58,224
So as I mentioned before,

49
00:02:58,224 --> 00:03:01,239
many workflows are not built using workflow systems,

50
00:03:01,239 --> 00:03:02,344
they build the scripts.

51
00:03:02,344 --> 00:03:03,820
So here you have a script.

52
00:03:03,820 --> 00:03:07,659
And so how do you see what the big picture is?

53
00:03:07,659 --> 00:03:10,574
How do you see the method? How do you see a workflow from that?

54
00:03:10,574 --> 00:03:12,715
It's very hard to decipher.

55
00:03:12,715 --> 00:03:14,860
And also, it's maybe not even in there because there are

56
00:03:14,860 --> 00:03:17,955
certain things that the code really doesn't talk about.

57
00:03:17,955 --> 00:03:19,930
Or sometimes you call an external function,

58
00:03:19,930 --> 00:03:21,289
if you call an external function,

59
00:03:21,289 --> 00:03:23,055
you don't know what the external function is doing,

60
00:03:23,055 --> 00:03:25,305
so you don't even have that code, maybe.

61
00:03:25,305 --> 00:03:29,534
So there are clearly limitations to what you can do by just looking at the script.

62
00:03:29,534 --> 00:03:33,669
On the other hand, if you monitor the execution of a script,

63
00:03:33,669 --> 00:03:38,680
you can collect a lot of fine-grained runtime provenance,

64
00:03:38,680 --> 00:03:42,025
and this is what the focus is of the noWorkflow system.

65
00:03:42,025 --> 00:03:43,564
So let me just show you this.

66
00:03:43,564 --> 00:03:47,500
So again, this is a group mostly based in Brazil.

67
00:03:47,500 --> 00:03:51,099
noWorkflow stands for "not only workflow".

68
00:03:51,099 --> 00:03:57,650
Their sort of starting point was the observation that scripts can have provenance too,

69
00:03:57,650 --> 00:04:00,905
or we should support provenance for scripts.

70
00:04:00,905 --> 00:04:05,344
And so the idea was to transparently capture some or all provenance from,

71
00:04:05,344 --> 00:04:09,074
in this particular case, from Python scripts.

72
00:04:09,074 --> 00:04:16,199
And then you can use queries to or other mechanisms to zoom into that problem.

73
00:04:16,199 --> 00:04:18,430
So what is that big graph that you see?

74
00:04:18,430 --> 00:04:19,975
We're gonna zoom in in a moment,

75
00:04:19,975 --> 00:04:24,995
but it is essentially runtime provenance captured from a script execution,

76
00:04:24,995 --> 00:04:29,819
so just as you see in the conceptual diagram in sort of this greenish-yellowish style.

77
00:04:29,819 --> 00:04:31,194
In this bluish style,

78
00:04:31,194 --> 00:04:34,240
you see retrospective provenance,

79
00:04:34,240 --> 00:04:39,495
trace information essentially, collected from the noWorkflow system.

80
00:04:39,495 --> 00:04:42,589
So imagine now you have a Python script.

81
00:04:42,589 --> 00:04:46,694
So you use the noWorkflow system to capture runtime provenance,

82
00:04:46,694 --> 00:04:51,160
and you can use the YesWorkflow system to model overall what your script is doing,

83
00:04:51,160 --> 00:04:56,149
and that we call, of course, prospective provenance.

84
00:04:56,149 --> 00:05:02,925
So here is an example of the script that I showed you earlier using YesWorkflow.

85
00:05:02,925 --> 00:05:07,654
Now you see some of the provenance using the noWorkflow system.

86
00:05:07,654 --> 00:05:09,310
So the way you run this — again,

87
00:05:09,310 --> 00:05:10,736
it works only for Python,

88
00:05:10,736 --> 00:05:12,435
so there is a little difference there.

89
00:05:12,435 --> 00:05:15,947
The YesWorkflow system lifts from,

90
00:05:15,947 --> 00:05:17,470
you know, based on,

91
00:05:17,470 --> 00:05:18,959
really, comments that you put,

92
00:05:18,959 --> 00:05:22,675
so annotations that you put inside of your comments in your script.

93
00:05:22,675 --> 00:05:25,170
So the YesWorkflow system doesn't care whether you annotate

94
00:05:25,170 --> 00:05:28,959
R or Matlab or Python or no script at all.

95
00:05:28,959 --> 00:05:31,345
You can create that model, you know,

96
00:05:31,345 --> 00:05:34,639
in a blank space if you don't have a script yet.

97
00:05:34,639 --> 00:05:37,944
You can use it as a design tool.

98
00:05:37,944 --> 00:05:41,345
The noWorkflow tool, on the other side, on the other hand,

99
00:05:41,345 --> 00:05:46,069
is really based on an implementation of a library that

100
00:05:46,069 --> 00:05:50,904
captures runtime provenance for Python scripts.

101
00:05:50,904 --> 00:05:55,279
So in particular, there's a Python profiling library that allows, for example,

102
00:05:55,279 --> 00:05:57,590
Python programmers to see,

103
00:05:57,590 --> 00:05:59,480
to profile their code,

104
00:05:59,480 --> 00:06:00,899
to see where's the time spent.

105
00:06:00,899 --> 00:06:02,629
You know, maybe my code runs slow.

106
00:06:02,629 --> 00:06:05,715
Which functions are called the most often?

107
00:06:05,715 --> 00:06:07,580
Where is the time really burnt?

108
00:06:07,580 --> 00:06:12,055
But you can use that kind of information and sort of hijack it, if you like,

109
00:06:12,055 --> 00:06:17,389
capture it, and sort of repackage it as retrospective provenance and, you know,

110
00:06:17,389 --> 00:06:20,389
enrich this information with

111
00:06:20,389 --> 00:06:24,425
also information about the script — sort of another kind of prospective provenance,

112
00:06:24,425 --> 00:06:28,235
and then create really informative, large,

113
00:06:28,235 --> 00:06:30,585
and detailed provenance graphs,

114
00:06:30,585 --> 00:06:33,324
the blue ones that you see here.

115
00:06:33,324 --> 00:06:34,730
So if you run, for example,

116
00:06:34,730 --> 00:06:40,355
this particular script for data collection that I showed earlier in YesWorkflow,

117
00:06:40,355 --> 00:06:44,610
you can run this in the noWorkflow tool

118
00:06:44,610 --> 00:06:47,750
and then you would get another kind of provenance,

119
00:06:47,750 --> 00:06:50,420
another kind of data lineage,

120
00:06:50,420 --> 00:06:52,569
now in terms of the script.

121
00:06:52,569 --> 00:06:55,040
So whereas the YesWorkflow diagram was in terms of

122
00:06:55,040 --> 00:07:00,290
your mental model and maybe in terms of the folders and files that are on disk,

123
00:07:00,290 --> 00:07:05,329
this is now in terms of the specific functions,

124
00:07:05,329 --> 00:07:09,225
in this case, Python functions in the code and changes to variables.

125
00:07:09,225 --> 00:07:11,800
So this both an advantage,

126
00:07:11,800 --> 00:07:14,995
and maybe also a difficulty with this approach is that

127
00:07:14,995 --> 00:07:18,670
you get a lot of fine-grained provenance,

128
00:07:18,670 --> 00:07:21,879
so when you think of a script that does a certain job,

129
00:07:21,879 --> 00:07:23,589
well, it does it using loops,

130
00:07:23,589 --> 00:07:25,540
using if-then-else, using function calls,

131
00:07:25,540 --> 00:07:29,109
using variables, and all of that good stuff,

132
00:07:29,109 --> 00:07:34,769
or all of that detail stuff is now available for you through the noWorkflow trace.

133
00:07:34,769 --> 00:07:36,910
OK? So our goal was to say, "Okay,

134
00:07:36,910 --> 00:07:39,860
well how about if we were to combine these different things?"

135
00:07:39,860 --> 00:07:41,774
We have the low level, in some sense,

136
00:07:41,774 --> 00:07:44,854
you know, code-oriented, script-oriented,

137
00:07:44,854 --> 00:07:47,435
code-oriented model of retrospective provenance,

138
00:07:47,435 --> 00:07:49,120
and we have the YesWorkflow model which is more

139
00:07:49,120 --> 00:07:52,194
conceptual and maybe you don't even have a script.

140
00:07:52,194 --> 00:07:54,009
But in this case we have both,

141
00:07:54,009 --> 00:07:56,759
and we wanted to put them together and see what we get.

142
00:07:56,759 --> 00:07:59,680
So this is what we're gonna explain in the remainder.

143
00:07:59,680 --> 00:08:05,819
So again, here, we have the YesWorkflow side of the same script,

144
00:08:05,819 --> 00:08:08,134
and I've already talked about it.

145
00:08:08,134 --> 00:08:10,259
You have these annotations,

146
00:08:10,259 --> 00:08:16,745
basically you put these in and out annotations in your script,

147
00:08:16,745 --> 00:08:20,735
and you connect them to those steps or code blocks,

148
00:08:20,735 --> 00:08:25,475
and then you get a diagram for free once you've wired it up correctly.

149
00:08:25,475 --> 00:08:28,160
And this, I also indicated previously,

150
00:08:28,160 --> 00:08:29,509
you can have a process view or

151
00:08:29,509 --> 00:08:34,840
a data view for free once you've created the workflow view first.

152
00:08:34,840 --> 00:08:38,820
And now, what are the kinds of questions that you can answer using this?

153
00:08:38,820 --> 00:08:40,980
So if you use YesWorkflow alone,

154
00:08:40,980 --> 00:08:43,680
without noWorkflow, without retrospective provenance,

155
00:08:43,680 --> 00:08:45,409
just the prospective stuff,

156
00:08:45,409 --> 00:08:49,460
you can already ask questions about data dependencies.

157
00:08:49,460 --> 00:08:52,700
So for example, you could say,

158
00:08:52,700 --> 00:08:55,125
what is the lineage of corrected_image?

159
00:08:55,125 --> 00:09:01,429
So if you have a corrected image artifact,

160
00:09:01,429 --> 00:09:03,735
you could say, OK,

161
00:09:03,735 --> 00:09:05,875
well, what is upstream of that?

162
00:09:05,875 --> 00:09:10,855
What are the things that might have influenced this or what are the things,

163
00:09:10,855 --> 00:09:13,139
what are the data items and maybe steps,

164
00:09:13,139 --> 00:09:16,549
from which this data could have been possibly derived?

165
00:09:16,549 --> 00:09:18,299
Because if you can't get to it,

166
00:09:18,299 --> 00:09:20,830
this seems to indicate that they're independent;

167
00:09:20,830 --> 00:09:22,220
and if you can get to it,

168
00:09:22,220 --> 00:09:25,070
it at least suggests that they may be dependent.

169
00:09:25,070 --> 00:09:26,235
So in this particular case,

170
00:09:26,235 --> 00:09:29,254
if you want to look at corrected_image, you can say, OK,

171
00:09:29,254 --> 00:09:33,990
compute everything from corrected_image upwards in my model.

172
00:09:33,990 --> 00:09:37,485
And this gives you sort of the specialized family history,

173
00:09:37,485 --> 00:09:40,735
just this particular part of the family.

174
00:09:40,735 --> 00:09:44,639
Think of it just on the mother's side or just on the father's side, right?

175
00:09:44,639 --> 00:09:48,710
So you're cutting out a lot of the stuff that maybe you're not interested in.

176
00:09:48,710 --> 00:09:52,589
If you want to know the lineage of your father or your mother,

177
00:09:52,589 --> 00:09:55,544
right, you get us a different graph.

178
00:09:55,544 --> 00:09:57,144
And this is what's happening here.

179
00:09:57,144 --> 00:10:00,815
If you're only interested in one part on the left or on the right,

180
00:10:00,815 --> 00:10:04,375
a certain other part goes out the window.

181
00:10:04,375 --> 00:10:08,085
You're saying, you know, I really want to focus on this particular aspect.

182
00:10:08,085 --> 00:10:09,649
So you can do this already with YesWorkflow.

183
00:10:09,649 --> 00:10:12,225
So you can write queries against these models,

184
00:10:12,225 --> 00:10:16,259
which is something that we're gonna exercise as part of the project.

185
00:10:16,259 --> 00:10:19,365
OK, so we get a smaller graph.

186
00:10:19,365 --> 00:10:24,860
Now, again, what was the goal with hours of collaboration here?

187
00:10:24,860 --> 00:10:26,414
It was to say, all right,

188
00:10:26,414 --> 00:10:27,845
so we have on the left,

189
00:10:27,845 --> 00:10:30,785
we have this conceptual workflow model;

190
00:10:30,785 --> 00:10:33,370
and on the right,

191
00:10:33,370 --> 00:10:38,245
we have a runtime trace that the noWorkflow system gives us.

192
00:10:38,245 --> 00:10:41,899
So in addition to maybe the files and the metadata

193
00:10:41,899 --> 00:10:45,830
that is deposited on disk or that's written to disk,

194
00:10:45,830 --> 00:10:47,835
maybe there's even log file information,

195
00:10:47,835 --> 00:10:51,504
there's various kinds of retrospective provenance that we could use.

196
00:10:51,504 --> 00:10:52,730
But in this particular case,

197
00:10:52,730 --> 00:10:54,424
since we have a Python script,

198
00:10:54,424 --> 00:10:56,600
we can use the noWorkflow system to give us

199
00:10:56,600 --> 00:11:01,565
this very fine-grained code-oriented provenance.

200
00:11:01,565 --> 00:11:04,500
And the goal for us was to see — can we get

201
00:11:04,500 --> 00:11:08,159
some value out of connecting these two kinds of provenance?

202
00:11:08,159 --> 00:11:14,360
Because the prospective model on the left may not have runtime information,

203
00:11:14,360 --> 00:11:18,835
although we've seen a little bit of that we can get for free using file and folder names.

204
00:11:18,835 --> 00:11:21,254
But there might be more that we want to know,

205
00:11:21,254 --> 00:11:24,940
and maybe we can't get that directly,

206
00:11:24,940 --> 00:11:29,125
so we want to maybe use the retrospective provenance information provided by noWorkflow.

207
00:11:29,125 --> 00:11:31,320
Conversely, the noWorkflow people should

208
00:11:31,320 --> 00:11:33,809
be interested in this as well because they say, well,

209
00:11:33,809 --> 00:11:38,889
our code-oriented view could be sort of refactored,

210
00:11:38,889 --> 00:11:42,279
reorganized into a more conceptual view if we built

211
00:11:42,279 --> 00:11:46,794
this bridge between those two worlds or these two models.

212
00:11:46,794 --> 00:11:49,299
And this is what we did.

213
00:11:49,299 --> 00:11:51,144
And to remind you of the bridge,

214
00:11:51,144 --> 00:11:53,399
at the very conceptual level,

215
00:11:53,399 --> 00:11:56,169
this bridge is something that,

216
00:11:56,169 --> 00:11:59,110
in a workflow system might already exist for free.

217
00:11:59,110 --> 00:12:00,970
So if instead of using a script,

218
00:12:00,970 --> 00:12:02,980
you would use a workflow system,

219
00:12:02,980 --> 00:12:05,575
then you have your workflow diagram on top,

220
00:12:05,575 --> 00:12:11,629
and then the execution of the workflow creates in a fairly obvious manner sort of

221
00:12:11,629 --> 00:12:17,865
an image or instances of that conceptual workflow as part of the problem's trace.

222
00:12:17,865 --> 00:12:19,879
So, in workflow-land on top,

223
00:12:19,879 --> 00:12:21,389
you have prospective provenance.

224
00:12:21,389 --> 00:12:24,264
If you use a workflow system you kind of get that for free.

225
00:12:24,264 --> 00:12:26,914
And then the retrospective provenance, so the traces,

226
00:12:26,914 --> 00:12:30,529
you then can also often get for free in a workflow system because

227
00:12:30,529 --> 00:12:34,529
the system often has mechanisms to record this.

228
00:12:34,529 --> 00:12:37,534
But if you don't use a workflow system, if you use a script,

229
00:12:37,534 --> 00:12:39,500
you'll have to find other ways to get

230
00:12:39,500 --> 00:12:42,894
those two levels built and then also to get them connected.

231
00:12:42,894 --> 00:12:46,039
And the connection can be a little bit of a headache depending on

232
00:12:46,039 --> 00:12:50,090
how fine-grained you want to do this and what exactly you want to do with it.

233
00:12:50,090 --> 00:12:55,389
OK. I should also mention since I talked earlier about the PROV model,

234
00:12:55,389 --> 00:12:57,810
the W3C PROV model,

235
00:12:57,810 --> 00:13:00,195
I want to point out that the provenance model,

236
00:13:00,195 --> 00:13:02,225
the standard provenance model, both OPM,

237
00:13:02,225 --> 00:13:05,245
the earlier standard, and then W3C PROV,

238
00:13:05,245 --> 00:13:07,284
both don't talk about workflows.

239
00:13:07,284 --> 00:13:10,065
They really talk just about retrospective provenance.

240
00:13:10,065 --> 00:13:16,210
So in another one of these projects called DataONE,

241
00:13:16,210 --> 00:13:23,875
we have extended the W3C PROV model to not only deal with retrospective provenance,

242
00:13:23,875 --> 00:13:28,284
which is where the W3C model really focuses on;

243
00:13:28,284 --> 00:13:33,929
but also attached to it a layer called,

244
00:13:33,929 --> 00:13:37,120
for workflow-land, basically for prospective provenance.

245
00:13:37,120 --> 00:13:38,289
So the ProvONE model,

246
00:13:38,289 --> 00:13:46,360
that's sort of a hybrid between using W3C PROV in the context of the DataONE project.

247
00:13:46,360 --> 00:13:47,590
That's why it's called ProvONE,

248
00:13:47,590 --> 00:13:50,259
so there's a little history right there.

249
00:13:50,259 --> 00:13:57,254
W3C PROV standard extended for DataONE use case where we have scientific workflows.

250
00:13:57,254 --> 00:14:03,470
This has been developed to allow this bridge building.