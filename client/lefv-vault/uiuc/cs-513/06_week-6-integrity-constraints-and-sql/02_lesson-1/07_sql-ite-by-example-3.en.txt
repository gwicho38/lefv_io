[MUSIC] Okay, now let's introduce another very
important topic called Aggregation. This allows us to do certain
simple data analysis if you like right there within SQL. So for example, let's say we want to
know how many temperature readings did Frank Pabodie record, and
what was their average value? Temperature readings. So first of all,
we need to go again into our data table. That has the main data. That's the survey table. Let's look again at
the schema just to be sure. So that's the survey table let's
take in by certain person and a certain quality at a certain reading. So the question was, how many temperature readings
different did Frank Pabodie records? So let's start first by maybe
saying select Star from survey so we can get started with a simple query. Aha! Mr. Pabodie here is I think PB. So let's just focus on his values. So we would say where person equals
the idea of that person is PB. Oops! Did you see that error message
that was hopefully instructive? When I say a person equals PB,
without the quotes, what I'm asking SQL to kind of join. Basically, look at what's in the person
column and what's in the PB column. Well, there is no PB column for
that table. When I put the quotes, I indicate well no, that's a value in the person
table that I'm looking for. So that's helpful. So we want to do what? We want to count how many
readings there were and what the average reading was. But only for temperature. So first of all, we need to also
say where the quantity, and quantity equals temperature. So let's make upper case our key words
again from SQL SELECT FROM WHERE. Person equals the person we're interested
in and quantity equals temperature. Now, we want the average temperature and
the number of values. In this case it's easy to,
there's two values. So how would we do that? So we're interested in the person,
we're selecting on the person. And then we count how
many readings there are. So we can put an aggregation operation
in the head of the clause if you like, in the select part of the clause. Where we select the result columns. We say well the result column that I
want is the count of the readings. So, how many reading values are there? And then, I want to actually report
on the average reading itself. So, that's another operation
called average reading. And let's see what we get. So, we see there are two readings indeed. We've seen this before. But now we have this s data in our hand. It's now a value in our data table itself. And the average, that looks reasonable. If you add up these values, we get what? Minus 40 adds up nicely and
then, so the average, because they're two values is minus 20. And we can also round this, but
I let you check this out yourself. In this case, let's pick somebody else. Who else is doing
temperature measurements? Let's go back up. It's only Lake is also doing
temperature measurements. Let's see what's the story with Lake. He has only one temperature measurement,
not very exciting. Who is doing lots of measurements? Maybe Dyer and radiation. Let's pick another one. So you see how it's fairly
easy once you get the pattern, you can write all kinds of other things. Dyer, is Dyer measuring temperature? Oops no, but he's measuring radiation. And here's two values and
the average is 8.81. We can also round this, again, so
there's lots of other operations in SQL. If you feel you want to round
this maybe to one digit. And you see 8.8. So there's quite a bit of functionality
that even SQLite gives you right there. Okay. So let's generalize this query for
other people using GROUP BY. This is where actually the real power
of aggregation comes into play. So, this basic example, like we got there from software carpentry,
that doesn't use group by. It feels like it's falling
short a little bit. So the real power comes from group by. So, let's go back to our original query. So, where we're looking at
the count of the reading and the average reading from survey. Where the person was PB and
the quantity of temperature. But instead, I could say, well,
let's not select any particular person PB. But let's group by person, so for
each person create a group and calculate the aggregate for each person. So, GROUP BY person. So the difference here was previously
we selected exactly one person and we didn't aggregate for that one person. But now we want to do lots of
aggregates one for each person. And there are certain rules that
when you use a group by clause, most database systems will tell you
that the attributes or columns by which you group are exactly the ones that
you should use in the select clause here. And then you can have aggregates
of the remaining attributes. Okay, but let's see this first. We'll come to it in a moment. So that's interesting. So Lake has one reading with
an average temperature of minus 16. And PB has two readings with
an average temperature of minus 20. And then nobody has one
reading with minus 26. So what's going on there? So let's look at the table again select
star from survey, so what happen there. Okay, so here Temperature minus 26. So this is basically,
we don't know who that is. But this comes out correctly here. So now we were grouping by person and
by quantity. How about, so we were, excuse me, the quantity was fixed to temperature and
we were grouping by person. We can push this one level further. We can say, well, let's group it for
each quantity also. So if you had to implement this, we're
looking now at loops and nested loops and all of that. We're in SQL,
this is fairly straight-forward. So, we take instead of GROUP By person, we also say we're going to
group this by quantity. And what we should do here is we
should list the quantity here. So we have a person and the quantity. Or we can do it like quantity and person. But it doesn't matter. There. And then we look at how many measurements
are there and what's the average. So it's pretty powerful. Of course, the WHERE quantity equals temperature
we're going to get rid of that. Because we're going to GROUP BY
all possible quantities. So let's see what we got. So, Dyer has radiation measurements,
two of them. And the average is 8.81. And so, we have all the radiation
measurements here first by four different people,
Dyer, Lake, PB, and Roe. The most radiation
measurements were done by PB. Then we have a bunch of
salinity measurements. Here, Lake has done the most. Aptly named, Lake. As the most salinity measurements, and then we have a bunch of
temperature measurements. We can flip the order a little bit. We can say, well, maybe we want to
have it grouped first by person, and then by quantity. What happens if I leave
the GROUP BY statement like this? Still works out okay, right, first by
person, hold on let's flip it like this. So this is actually what we want. So we're selecting first by person and
then by quantity and we group by these. So for each person and
each quantity, what is it we have? So, for example, for Dyer,
he was measuring radiation, had two values and that's the average. And he was measuring salinity and
he has two values. But he wasn't measuring temperature,
for example. Lake, on the other hand, was measuring
radiation, salinity, and temperature. PB was measuring radiation,
temperature, but not salinity. And Roe was measuring radiation,
salinity, but not temperature. So you see there's a rather
powerful query here. We can round a little bit. Again, if you want to say just one digit,
one decimal. So we get this for example,
a little bit rounded. And you've seen also I can
group it either by person and quantity or by quantity and person. So I think this should give you a first
idea of how powerful SQL can be for doing simple analytics right there. On your data. So this is what we got here. [MUSIC]