1
00:00:00,258 --> 00:00:06,296
[MUSIC]

2
00:00:08,405 --> 00:00:09,520
Combining Data.

3
00:00:09,520 --> 00:00:13,920
That's really in a way what relational
databases were originally invented for.

4
00:00:13,920 --> 00:00:16,570
Relational data bases
are really old as a technology.

5
00:00:16,570 --> 00:00:20,250
Even before relational databases there
were other databases before that, okay?

6
00:00:20,250 --> 00:00:21,870
Even before I was born.

7
00:00:21,870 --> 00:00:25,950
And what was difficult there was that
the data access, you could not just

8
00:00:25,950 --> 00:00:29,780
organize your data any way you like,
and then combine data in new ways.

9
00:00:29,780 --> 00:00:32,130
So there were these things
called hierarchical databases or

10
00:00:32,130 --> 00:00:33,850
network databases.

11
00:00:33,850 --> 00:00:39,590
Now 30, 40 years later, things become
popular again under various names.

12
00:00:39,590 --> 00:00:43,330
That feel like they were the things
before relational databases.

13
00:00:43,330 --> 00:00:47,620
One of the benefits of the relational
database is that you can spread your data

14
00:00:47,620 --> 00:00:51,800
anyway you like into different tables and
then recombine the tables again.

15
00:00:51,800 --> 00:00:53,905
That's what that word
relational really comes from,

16
00:00:53,905 --> 00:00:56,050
we're combining things together.

17
00:00:56,050 --> 00:00:58,600
So I just wanted to give you
a quick example of that.

18
00:00:58,600 --> 00:01:04,230
So if you look at the schema,
it would be actually nice to have

19
00:01:04,230 --> 00:01:09,030
a diagram that shows the sort of
a Diagram, or if you like all the UML

20
00:01:09,030 --> 00:01:13,030
class diagram that shows how the different
tables are related to one another.

21
00:01:13,030 --> 00:01:15,540
But let me just do
a simple example of this.

22
00:01:15,540 --> 00:01:17,550
If you look at the Site table and

23
00:01:17,550 --> 00:01:20,930
if you look at the Visited table
we can join these two tables.

24
00:01:20,930 --> 00:01:22,820
What does it mean to join them,

25
00:01:22,820 --> 00:01:26,389
something we've seen previously
in the dialogue rules.

26
00:01:26,389 --> 00:01:29,392
There are some columns where the Site and

27
00:01:29,392 --> 00:01:34,250
the Visited schema agree,
let's look at it right here.

28
00:01:34,250 --> 00:01:37,950
Let's look at the schema again,
so the Site table and

29
00:01:37,950 --> 00:01:40,740
the Visited table, what do they have?

30
00:01:40,740 --> 00:01:47,050
Site has a name, lat and long and
Visited has id and the site and dated.

31
00:01:47,050 --> 00:01:52,260
Okay, so this is actually slightly
misleading Site JOIN Visited.

32
00:01:52,260 --> 00:01:56,300
So site and
Visited don't have any columns in common.

33
00:01:56,300 --> 00:02:00,850
However, if you look more
closely at the example data.

34
00:02:00,850 --> 00:02:06,470
What is called name in one column
is called site in the other.

35
00:02:06,470 --> 00:02:09,180
The way of combining the two
tables in this way is

36
00:02:09,180 --> 00:02:10,770
kind of a little bit brain dead.

37
00:02:10,770 --> 00:02:13,910
We're comparing every value in this table,

38
00:02:13,910 --> 00:02:16,530
every row in one table with
every row in the other table.

39
00:02:16,530 --> 00:02:17,780
That's normally not what you want to do.

40
00:02:17,780 --> 00:02:19,710
This is called a Cartesian product.

41
00:02:19,710 --> 00:02:24,432
It's everybody here with everybody there,
it's sort of when we go to our student and

42
00:02:24,432 --> 00:02:28,825
classes table, we would say create a table
that says, well which classes could

43
00:02:28,825 --> 00:02:33,910
a student enroll in, not what class has a
student enrolled in but what, could they?

44
00:02:33,910 --> 00:02:36,081
Well here are all the students,
here are all the classes,

45
00:02:36,081 --> 00:02:37,111
you get a very large table.

46
00:02:37,111 --> 00:02:39,092
So for
multiplying out all the combinations,

47
00:02:39,092 --> 00:02:41,800
sounds like database repair and
trying out all combinations.

48
00:02:41,800 --> 00:02:43,670
Really not normally what we want to do.

49
00:02:43,670 --> 00:02:47,940
You would say, okay let's see who has
taken what class or in this case,

50
00:02:47,940 --> 00:02:54,150
what measurement or what do we have here,
yeah what records, survey record.

51
00:02:54,150 --> 00:02:59,170
Or Site record here joins with Visited by
aligning the name and the site column.

52
00:02:59,170 --> 00:03:02,780
So this DR-1 and DR-3 doesn't align.

53
00:03:02,780 --> 00:03:04,710
For JOIN, they need to be the same value.

54
00:03:04,710 --> 00:03:08,065
So what we've done here is a cross
product of a Cartesian product.

55
00:03:08,065 --> 00:03:11,497
Instead, what we should say
is we should run this query.

56
00:03:11,497 --> 00:03:16,620
We say okay, SELECT * FROM Site JOIN
Visited and where do we join the tables?

57
00:03:16,620 --> 00:03:21,940
We say, well, the site name column should
be the same as the visited site columns.

58
00:03:21,940 --> 00:03:24,270
So these columns don't have the same name.

59
00:03:24,270 --> 00:03:28,020
A nice database design is often that you
name your columns in a way that the join

60
00:03:28,020 --> 00:03:29,280
comes for free.

61
00:03:29,280 --> 00:03:31,990
That's then called a natural
join in relational algebra.

62
00:03:31,990 --> 00:03:33,460
Right?
You name the columns in a way that

63
00:03:33,460 --> 00:03:35,900
suggests where you can sort of join them.

64
00:03:35,900 --> 00:03:38,670
In this case the schema
has different call names.

65
00:03:38,670 --> 00:03:41,570
So you have to explicitly
state the join condition.

66
00:03:41,570 --> 00:03:46,468
That's right, let's run this query,
so again we see the site.name.

67
00:03:46,468 --> 00:03:52,250
So site.name the first column of site
should be the name as visited.site.

68
00:03:52,250 --> 00:03:56,920
So it should be the same as the second
column in the Visited table.

69
00:03:56,920 --> 00:03:59,800
If that's what we want to run,
we get this.

70
00:03:59,800 --> 00:04:05,190
So we've combined Site data
with this Visited data.

71
00:04:05,190 --> 00:04:07,060
That's what we mean by combine.

72
00:04:07,060 --> 00:04:09,010
For good reasons we've split these things.

73
00:04:09,010 --> 00:04:12,810
Maybe to avoid redundancy we split
our data into different tables.

74
00:04:12,810 --> 00:04:16,600
Some information is, some table has
more information about the site.

75
00:04:16,600 --> 00:04:20,150
The other just has a site ID and then it

76
00:04:21,920 --> 00:04:26,140
records measurements or
location, different things.

77
00:04:26,140 --> 00:04:29,490
And through the join,
we can bring them back together again.

78
00:04:29,490 --> 00:04:33,320
So, this is the join syntax.

79
00:04:33,320 --> 00:04:39,780
We could have also done it in like in the
old days we could write instead of join,

80
00:04:39,780 --> 00:04:44,507
let's try this out, so
let's start from Site, Visited WHERE,

81
00:04:44,507 --> 00:04:48,170
Site.name=Visited.site.

82
00:04:48,170 --> 00:04:52,915
Since name and site are unique names,
I could even say where name=site.

83
00:04:52,915 --> 00:04:55,650
I'm going to be very lazy.

84
00:04:55,650 --> 00:04:59,420
So this would be the old-fashioned
way of writing this.

85
00:04:59,420 --> 00:05:02,660
So I take the Site table,
I take the Visited table, and

86
00:05:02,660 --> 00:05:06,920
I look where the name column,
which is from one of the tables,

87
00:05:06,920 --> 00:05:12,110
coincides, agrees with the side
column value in the other table.

88
00:05:12,110 --> 00:05:15,080
And I should get exactly
the same table back, okay, so

89
00:05:15,080 --> 00:05:18,500
these are just to syntactic variants.

90
00:05:18,500 --> 00:05:20,640
This is sort of the variant
with JOIN syntax,

91
00:05:20,640 --> 00:05:23,150
which makes it very explicit
what we're joining on.

92
00:05:24,160 --> 00:05:28,920
And here is an alternative syntax,

93
00:05:28,920 --> 00:05:32,820
which is also fairly clear
once you know the schema.

94
00:05:32,820 --> 00:05:41,020
Again, I could have said, okay,
from Site, Visited WHERE.

95
00:05:41,020 --> 00:05:46,870
Again, I'm just showing you that SQL
has grown organically over many years.

96
00:05:46,870 --> 00:05:52,324
And so there's often different
ways to do the same thing.

97
00:05:52,324 --> 00:06:02,607
[MUSIC]

98
00:06:02,607 --> 00:06:05,837
[SOUND]