[MUSIC] Combining Data. That's really in a way what relational
databases were originally invented for. Relational data bases
are really old as a technology. Even before relational databases there
were other databases before that, okay? Even before I was born. And what was difficult there was that
the data access, you could not just organize your data any way you like,
and then combine data in new ways. So there were these things
called hierarchical databases or network databases. Now 30, 40 years later, things become
popular again under various names. That feel like they were the things
before relational databases. One of the benefits of the relational
database is that you can spread your data anyway you like into different tables and
then recombine the tables again. That's what that word
relational really comes from, we're combining things together. So I just wanted to give you
a quick example of that. So if you look at the schema,
it would be actually nice to have a diagram that shows the sort of
a Diagram, or if you like all the UML class diagram that shows how the different
tables are related to one another. But let me just do
a simple example of this. If you look at the Site table and if you look at the Visited table
we can join these two tables. What does it mean to join them, something we've seen previously
in the dialogue rules. There are some columns where the Site and the Visited schema agree,
let's look at it right here. Let's look at the schema again,
so the Site table and the Visited table, what do they have? Site has a name, lat and long and
Visited has id and the site and dated. Okay, so this is actually slightly
misleading Site JOIN Visited. So site and
Visited don't have any columns in common. However, if you look more
closely at the example data. What is called name in one column
is called site in the other. The way of combining the two
tables in this way is kind of a little bit brain dead. We're comparing every value in this table, every row in one table with
every row in the other table. That's normally not what you want to do. This is called a Cartesian product. It's everybody here with everybody there,
it's sort of when we go to our student and classes table, we would say create a table
that says, well which classes could a student enroll in, not what class has a
student enrolled in but what, could they? Well here are all the students,
here are all the classes, you get a very large table. So for
multiplying out all the combinations, sounds like database repair and
trying out all combinations. Really not normally what we want to do. You would say, okay let's see who has
taken what class or in this case, what measurement or what do we have here,
yeah what records, survey record. Or Site record here joins with Visited by
aligning the name and the site column. So this DR-1 and DR-3 doesn't align. For JOIN, they need to be the same value. So what we've done here is a cross
product of a Cartesian product. Instead, what we should say
is we should run this query. We say okay, SELECT * FROM Site JOIN
Visited and where do we join the tables? We say, well, the site name column should
be the same as the visited site columns. So these columns don't have the same name. A nice database design is often that you
name your columns in a way that the join comes for free. That's then called a natural
join in relational algebra. Right?
You name the columns in a way that suggests where you can sort of join them. In this case the schema
has different call names. So you have to explicitly
state the join condition. That's right, let's run this query,
so again we see the site.name. So site.name the first column of site
should be the name as visited.site. So it should be the same as the second
column in the Visited table. If that's what we want to run,
we get this. So we've combined Site data
with this Visited data. That's what we mean by combine. For good reasons we've split these things. Maybe to avoid redundancy we split
our data into different tables. Some information is, some table has
more information about the site. The other just has a site ID and then it records measurements or
location, different things. And through the join,
we can bring them back together again. So, this is the join syntax. We could have also done it in like in the
old days we could write instead of join, let's try this out, so
let's start from Site, Visited WHERE, Site.name=Visited.site. Since name and site are unique names,
I could even say where name=site. I'm going to be very lazy. So this would be the old-fashioned
way of writing this. So I take the Site table,
I take the Visited table, and I look where the name column,
which is from one of the tables, coincides, agrees with the side
column value in the other table. And I should get exactly
the same table back, okay, so these are just to syntactic variants. This is sort of the variant
with JOIN syntax, which makes it very explicit
what we're joining on. And here is an alternative syntax, which is also fairly clear
once you know the schema. Again, I could have said, okay,
from Site, Visited WHERE. Again, I'm just showing you that SQL
has grown organically over many years. And so there's often different
ways to do the same thing. [MUSIC] [SOUND]