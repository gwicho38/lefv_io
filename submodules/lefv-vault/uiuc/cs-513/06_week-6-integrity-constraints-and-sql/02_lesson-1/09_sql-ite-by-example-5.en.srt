1
00:00:00,000 --> 00:00:05,820
[MUSIC]

2
00:00:09,099 --> 00:00:11,120
Let's push this a little further.

3
00:00:11,120 --> 00:00:13,830
Let's say we want to calculate
the difference between each

4
00:00:13,830 --> 00:00:18,269
individual radiation reading and
the average of all the radiation readings.

5
00:00:21,246 --> 00:00:25,010
So as a SQL novice we might
have the following idea.

6
00:00:28,447 --> 00:00:30,880
Let's put our idea forward.

7
00:00:32,132 --> 00:00:37,597
So we want to report from survey,
the readings and

8
00:00:37,597 --> 00:00:42,140
subtract the average reading, right?

9
00:00:42,140 --> 00:00:44,550
Because average readings
we've computed before.

10
00:00:45,990 --> 00:00:46,570
What do we get?

11
00:00:48,231 --> 00:00:54,236
Whoops, I think I have
the wrong codes here,

12
00:00:54,236 --> 00:00:59,620
Mm-hm, It looks a little suspicious.

13
00:01:01,730 --> 00:01:03,470
First of all, there's remarkable values.

14
00:01:06,176 --> 00:01:08,207
This doesn't look good.

15
00:01:08,207 --> 00:01:13,872
Okay, again, let's do SELECT reading

16
00:01:13,872 --> 00:01:20,044
FROM survey WERE quant = 'rad', right?

17
00:01:23,327 --> 00:01:26,599
So there are how many values?

18
00:01:26,599 --> 00:01:30,817
I can just say count,
how many values are there?

19
00:01:32,681 --> 00:01:34,491
8 values.

20
00:01:35,540 --> 00:01:40,040
So when I say reading
minus average reading,

21
00:01:40,040 --> 00:01:41,670
I should get a value, shouldn't I?

22
00:01:42,940 --> 00:01:47,400
The difference to the average, some values
will be above, some will be below average.

23
00:01:47,400 --> 00:01:51,310
And an average,
there will be just like average, okay?

24
00:01:51,310 --> 00:01:52,360
But that's not what's happening.

25
00:02:00,717 --> 00:02:04,948
So what this query is doing, it calculates
the difference between some value from

26
00:02:04,948 --> 00:02:07,646
the readings field and
we don't know which one, and

27
00:02:07,646 --> 00:02:11,640
the average of all radiation settings and
this is pretty useless.

28
00:02:11,640 --> 00:02:16,660
So SQLite, as much as we like it,
it's a little bit too permissive when it

29
00:02:16,660 --> 00:02:22,090
comes to aggregation, it allows us to do
things that I find slightly problematic.

30
00:02:22,090 --> 00:02:23,900
Let me actually make another example for
that.

31
00:02:25,420 --> 00:02:30,919
Before, Let's

32
00:02:30,919 --> 00:02:35,790
say before we had a bunch of queries,
let's do a simple one.

33
00:02:41,967 --> 00:02:47,400
So let's say we want to do look
at radiations, group by person.

34
00:02:49,972 --> 00:02:54,670
Okay, So what's going on here?

35
00:02:54,670 --> 00:02:59,460
We have, so
every table we look at which persons have.

36
00:03:01,520 --> 00:03:04,230
Let's look at again at
the whole table one more time.

37
00:03:04,230 --> 00:03:05,300
This is the whole table, right?

38
00:03:05,300 --> 00:03:07,730
We have taken person,
quantity and reading.

39
00:03:07,730 --> 00:03:11,360
And here in the aggregate query we've
said okay, let's group by person.

40
00:03:12,580 --> 00:03:15,060
So for example, dialect and so on, and

41
00:03:15,060 --> 00:03:17,390
let's count how many readings there
are and what's the average reading.

42
00:03:18,760 --> 00:03:22,550
Now, SQLite allows us to do
something a little weird.

43
00:03:25,070 --> 00:03:30,740
It allows us to put in the SELECT clause,

44
00:03:30,740 --> 00:03:36,150
not just the GROUP BY attribute,
which is fine, because for

45
00:03:36,150 --> 00:03:40,790
each group, we want to report what is
the value of the GROUP BY attribute.

46
00:03:40,790 --> 00:03:46,340
And the aggregate of the rows
which are in this group for

47
00:03:46,340 --> 00:03:48,150
this person, which is also good.

48
00:03:48,150 --> 00:03:51,450
It also allows us to put something
which I find highly problematic.

49
00:03:52,570 --> 00:03:58,338
And this is for example,
I could report taken.

50
00:03:58,338 --> 00:04:06,300
Yeah, this is an identifier,
yeah, but which one would I take?

51
00:04:06,300 --> 00:04:11,020
So for example if I look at
the quantity radiation by dyer.

52
00:04:11,020 --> 00:04:16,350
Dyer has 619 radiation and 622.

53
00:04:16,350 --> 00:04:17,820
Well, which one is it?

54
00:04:19,870 --> 00:04:24,016
Another SQL database system will
tell you this query is incorrect,

55
00:04:24,016 --> 00:04:28,319
because you're asking for
something that's non-deterministic.

56
00:04:28,319 --> 00:04:32,010
Normally we don't think
of this as a feature,

57
00:04:32,010 --> 00:04:36,670
it's pick either one,
let's see what's going to happen.

58
00:04:36,670 --> 00:04:41,163
So this is going to be
exciting because I don't know

59
00:04:41,163 --> 00:04:44,680
myself what's going to happen, okay?

60
00:04:44,680 --> 00:04:46,170
For dyer 622 was picked.

61
00:04:46,170 --> 00:04:47,770
For lake 837 was picked.

62
00:04:48,890 --> 00:04:53,290
So let's look at lake,
we're looking at radiation readings,

63
00:04:53,290 --> 00:04:54,620
like had two radiations.

64
00:04:54,620 --> 00:04:59,620
Let's look at pb,
pb had three radiation readings,

65
00:04:59,620 --> 00:05:02,130
so where are the radiations in pb?

66
00:05:02,130 --> 00:05:08,684
That's one, 735, there is another one,

67
00:05:08,684 --> 00:05:13,908
751, and there's another one?

68
00:05:13,908 --> 00:05:19,620
Okay, so there's three of them, and

69
00:05:19,620 --> 00:05:25,260
this is their average, but here we picked
just randomly one of the taken attributes.

70
00:05:25,260 --> 00:05:32,910
So other database systems will not allow
you to select the taken attribute here.

71
00:05:32,910 --> 00:05:35,310
You could do something deterministic,

72
00:05:35,310 --> 00:05:39,420
you could say how many values
are they account, for example.

73
00:05:41,138 --> 00:05:46,910
Okay, not surprisingly this number agrees
here with the count of the readings or

74
00:05:46,910 --> 00:05:49,490
we could slightly more silly

75
00:05:50,580 --> 00:05:55,340
compute the average taken value,
okay, it's a little silly.

76
00:05:57,090 --> 00:05:58,410
Or we could take the minimum,

77
00:06:02,743 --> 00:06:06,970
The minimum of the possible values,
that's deterministic.

78
00:06:06,970 --> 00:06:12,677
Or we can take the maximum,
that's also deterministic.

79
00:06:12,677 --> 00:06:16,030
But if we don't give an aggregation
function because we're looking at

80
00:06:16,030 --> 00:06:22,050
the group of values and we just say taken,
SQLite just picks one of the values.

81
00:06:23,070 --> 00:06:29,450
Again, I don't know what the apologists
say for SBLI for this behavior,

82
00:06:29,450 --> 00:06:32,600
but most other data base systems
will say this query is not allowed.

83
00:06:32,600 --> 00:06:36,447
So if you enter this
query say in Oracle or

84
00:06:36,447 --> 00:06:41,200
any of these other databases,
it will say there's a problem.

85
00:06:41,200 --> 00:06:46,655
Because to take an attribute if you group
by taking them then, we're good, although

86
00:06:46,655 --> 00:06:52,340
in this case it computes something
that's not particularly interesting.

87
00:06:52,340 --> 00:06:56,490
Now, it's not really an aggregation
if you group by this taken thing.

88
00:06:56,490 --> 00:07:00,710
But then, at least it would be a legal
query, when I remove this here,

89
00:07:00,710 --> 00:07:04,180
I cannot have taken here,
I have to have an aggregate.

90
00:07:04,180 --> 00:07:07,230
Count, min, max, average,
one of those things.

91
00:07:07,230 --> 00:07:10,680
Which is exactly what we do for
example, here with the reading,

92
00:07:10,680 --> 00:07:13,010
we count the reading or
we compute the average of the reading.

93
00:07:14,340 --> 00:07:18,000
Person, on the other hand, since we
grouped by person, we can report that

94
00:07:18,000 --> 00:07:24,200
because we're going to return for
each person an aggregate value.

95
00:07:25,700 --> 00:07:30,040
So first, we select for
a particular person, all the rows for

96
00:07:30,040 --> 00:07:33,280
this person, and then we aggregate
the values into single row.

97
00:07:33,280 --> 00:07:37,400
And the aggregating into single
row is what makes it problematic

98
00:07:37,400 --> 00:07:40,520
to randomly choose a taken value here.

99
00:07:40,520 --> 00:07:45,460
Okay, so I wanted to point it
out first because this will help

100
00:07:45,460 --> 00:07:50,718
us understand what happened
with our other query here.

101
00:07:50,718 --> 00:07:52,637
So here,

102
00:07:56,924 --> 00:08:03,780
We wanted to compute readings and
subtract from them the average reading.

103
00:08:03,780 --> 00:08:08,100
There's again the wrong quotes here,
hard to see.

104
00:08:09,590 --> 00:08:16,071
So because we save average reading, Yeah?

105
00:08:20,468 --> 00:08:22,530
What is the average reading for radiation?

106
00:08:22,530 --> 00:08:23,520
That's a meaningful query.

107
00:08:25,280 --> 00:08:31,328
What's the average reading, For
quantities radiation, right?

108
00:08:31,328 --> 00:08:36,590
Let's just say SELECT *
FROM Survey WHERE quan = 'rad'.

109
00:08:36,590 --> 00:08:42,770
If these are radiation,
I can compute the average of that.

110
00:08:42,770 --> 00:08:44,620
Let's just calculate a few more things.

111
00:08:44,620 --> 00:08:50,643
Let's say count (reading), MIN(reading),

112
00:08:50,643 --> 00:08:55,127
MAX(reading), avg(reading),

113
00:08:55,127 --> 00:09:01,590
actually we can also do the sum(reading),
why not?

114
00:09:01,590 --> 00:09:03,719
Okay, so
we go lots of aggregate functions here.

115
00:09:05,760 --> 00:09:07,880
So that's pretty neat, yeah,
we've got eight values.

116
00:09:07,880 --> 00:09:09,190
The minimum is 1.46.

117
00:09:09,190 --> 00:09:11,666
The maximum is 11.25.

118
00:09:11,666 --> 00:09:17,430
The sum is 52.5 divided by eight,
hopefully gives us the average of 6.5.

119
00:09:17,430 --> 00:09:18,330
That's all great.

120
00:09:18,330 --> 00:09:23,400
So we aggregate the whole
table into a single row.

121
00:09:23,400 --> 00:09:28,054
But when we then say reading minus this,
which reading are we talking about?

122
00:09:28,054 --> 00:09:29,755
Not meaningful.

123
00:09:32,275 --> 00:09:35,850
Some reading [LAUGH]
minus the average cell.

124
00:09:35,850 --> 00:09:36,440
Not very helpful.

125
00:09:38,364 --> 00:09:40,059
So what do we need to do here instead?

126
00:09:41,513 --> 00:09:46,211
If we want to calculate a difference
between each individual radiation reading

127
00:09:46,211 --> 00:09:48,980
and the average,
we need to use a sub-query.

128
00:09:48,980 --> 00:09:51,610
We have to kind of do it in two steps.

129
00:09:51,610 --> 00:09:57,230
So first, we have to compute the average
and then, we can go through the table

130
00:09:57,230 --> 00:10:03,050
one more time if you like and then look
at the reading minus the average, okay?

131
00:10:05,200 --> 00:10:06,410
So how do we get all the readings?

132
00:10:06,410 --> 00:10:13,880
So select reading,
From survey where quant = 'rad', right?

133
00:10:13,880 --> 00:10:16,479
That's what we want.

134
00:10:16,479 --> 00:10:18,819
So these are the readings, but

135
00:10:18,819 --> 00:10:24,110
now want to sort of subtract from
each of them the average, okay?

136
00:10:24,110 --> 00:10:28,140
So we need to nest inside a subquery and
we can,

137
00:10:28,140 --> 00:10:33,180
actually, in SQL there's multiple
places where we can nest and

138
00:10:33,180 --> 00:10:39,180
in particular, we can even nest it
right here within the SELECT clause.

139
00:10:39,180 --> 00:10:42,546
Minus, I will just stick
in the sub query there.

140
00:10:42,546 --> 00:10:47,500
SELECT avg(reading) from,

141
00:10:47,500 --> 00:10:52,644
seems a little tedious, yeah,

142
00:10:52,644 --> 00:10:59,513
but it'll work, WHERE quant + 'rad'.

143
00:11:01,662 --> 00:11:04,310
Okay, so please notice this
highlighting of the cursor.

144
00:11:05,480 --> 00:11:10,030
So I have my original query that
just selects the average and

145
00:11:10,030 --> 00:11:14,900
my other original query that just
asks about the readings, and

146
00:11:14,900 --> 00:11:17,060
I nest them inside of one another.

147
00:11:18,420 --> 00:11:23,550
So this takes a little moment to
understand here, so this query,

148
00:11:23,550 --> 00:11:27,770
which is highlighted here
computes exactly one number,

149
00:11:27,770 --> 00:11:30,940
you might recall what
that number was up here.

150
00:11:32,140 --> 00:11:35,410
Look at this, select average ready from
survey where quantity equals radiation.

151
00:11:36,570 --> 00:11:39,040
That's a number, 6.5.

152
00:11:39,040 --> 00:11:41,994
So it feels like,
in a programming language,

153
00:11:41,994 --> 00:11:47,810
I would probably just store it in
a variable and then, use that value later.

154
00:11:47,810 --> 00:11:53,170
Here in SQL, I just take
the whole expression by itself and

155
00:11:53,170 --> 00:11:58,020
I stick it right here as part
of that SELECT statement.

156
00:11:59,100 --> 00:12:02,090
And we can think of this as the sub
quarter being executed first

157
00:12:02,090 --> 00:12:02,710
for this to work.

158
00:12:04,080 --> 00:12:06,480
And there we go and
now these are the values, and

159
00:12:06,480 --> 00:12:10,970
you see some values are above and
some values are below.

160
00:12:10,970 --> 00:12:18,560
Maybe we could also do, maybe just put
the reading and then, The difference.

161
00:12:18,560 --> 00:12:24,780
Now notice, by the way,
how long the column name here is.

162
00:12:24,780 --> 00:12:28,150
Again, that's sort of very informative,
maybe too much information,

163
00:12:28,150 --> 00:12:33,350
maybe we should just say as Delta, yeah?

164
00:12:35,140 --> 00:12:39,620
And now we're having a table that's
a little bit more meaningful, so

165
00:12:39,620 --> 00:12:42,140
we see these other readings and
this is our Delta.

166
00:12:42,140 --> 00:12:46,614
So this value 7.22 is

167
00:12:46,614 --> 00:12:51,941
pretty close to the average,

168
00:12:51,941 --> 00:12:58,972
these values here are below average and

169
00:12:58,972 --> 00:13:05,590
the other values are above average.

170
00:13:05,590 --> 00:13:07,346
[MUSIC]