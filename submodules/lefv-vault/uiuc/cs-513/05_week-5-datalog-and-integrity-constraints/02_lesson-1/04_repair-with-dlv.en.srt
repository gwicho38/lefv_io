1
00:00:00,417 --> 00:00:06,737
[MUSIC]

2
00:00:10,514 --> 00:00:15,008
So we have a student table and we have
functional dependency, so FD not FK.

3
00:00:15,008 --> 00:00:16,670
It was a mistake on the previous slide.

4
00:00:16,670 --> 00:00:19,990
So FD functional dependency,
we want that the ID implies the name.

5
00:00:19,990 --> 00:00:22,580
How would I check that
this is not violated?

6
00:00:22,580 --> 00:00:25,810
So I just put what I call
a soft constraint here.

7
00:00:25,810 --> 00:00:30,887
And I say if I have student X, Y and
another one X, Z but for the same X right

8
00:00:30,887 --> 00:00:36,984
sometimes I've written this in the past a
little bit more laboriously like X1 = X2.

9
00:00:36,984 --> 00:00:40,550
And I can write it just to make it
a little more explicit for a moment.

10
00:00:40,550 --> 00:00:43,570
I say, let me make it really clear.

11
00:00:43,570 --> 00:00:47,680
I think this notation makes it a little
clearer, if I rename the variables.

12
00:00:47,680 --> 00:00:48,920
So what does this rule say?

13
00:00:48,920 --> 00:00:54,810
It says I have two student tuples,
X1, Y1, and X2, Y2, right?

14
00:00:54,810 --> 00:00:59,540
I want it to be the case that X1 = X2,
so they agree on the key but

15
00:00:59,540 --> 00:01:01,730
they shall disagree on the second column.

16
00:01:01,730 --> 00:01:03,830
So the Y1 and the Y2 are different.

17
00:01:03,830 --> 00:01:05,410
That's a situation we don't want to have.

18
00:01:05,410 --> 00:01:09,140
If we have this situation, however, we
want to report this in an auxiliary table

19
00:01:09,140 --> 00:01:12,460
called integrity constraint violation for
dysfunctional dependency.

20
00:01:12,460 --> 00:01:14,960
So, we've seen this before,
so I'll run this again.

21
00:01:14,960 --> 00:01:18,070
And I'm going to just comment out any
other rules that we don't want to get in

22
00:01:18,070 --> 00:01:19,110
our way here.

23
00:01:19,110 --> 00:01:20,590
And then we're going to try this out.

24
00:01:20,590 --> 00:01:24,410
So if you can try this out also
from the command line, on a Mac,

25
00:01:24,410 --> 00:01:25,940
on Windows, on Linux.

26
00:01:25,940 --> 00:01:30,170
I'll do it here inside of this editor
because I find this somewhat convenient,

27
00:01:30,170 --> 00:01:31,880
I'm going to have to save this first.

28
00:01:31,880 --> 00:01:35,100
And I create a new shell, for some reason
it puts it here next to each other.

29
00:01:35,100 --> 00:01:38,410
Hopefully that works
reasonably well as well.

30
00:01:38,410 --> 00:01:42,830
So when I call, the system is called dlv
as you recall, I say repair and maybe I

31
00:01:42,830 --> 00:01:47,020
want to filter a particular relationship I
only want to see maybe the student table.

32
00:01:47,020 --> 00:01:51,220
And I see here that I have
a couple of student tuples.

33
00:01:51,220 --> 00:01:56,080
It's not particularly pretty the way these
tuples are output, but it's all there.

34
00:01:56,080 --> 00:01:59,860
Actually, let me try to do
a horizontal split here.

35
00:01:59,860 --> 00:02:02,668
Yeah, so
you see a little bit more of this, okay?

36
00:02:02,668 --> 00:02:06,760
Now we want to find out who is
violating this integrity constraint and

37
00:02:06,760 --> 00:02:08,220
we should already see this, right?

38
00:02:08,220 --> 00:02:09,720
So how many answers will we get?

39
00:02:09,720 --> 00:02:11,336
Two, for bell and logan, yeah?

40
00:02:11,336 --> 00:02:17,670
So let's look at,
let's filter on this icv_fd relationship.

41
00:02:17,670 --> 00:02:20,735
So 101, bell and logan and logan and bell,

42
00:02:20,735 --> 00:02:25,701
they both share the key 101, which is
a problem, so we need to fix that.

43
00:02:25,701 --> 00:02:30,070
And then stevens and ftevens,
may be that was an OCR error, right?

44
00:02:30,070 --> 00:02:33,248
So may be this was automatically entered
into the database, so stevens and

45
00:02:33,248 --> 00:02:35,210
ftevens may be it should also be stevens.

46
00:02:35,210 --> 00:02:36,735
And that shows also up twice.

47
00:02:36,735 --> 00:02:42,171
So first of all I want to show you, again,
to simplify this rule instead of X1 = X2,

48
00:02:42,171 --> 00:02:45,632
I can just replace X here and
get rid of this X1 = X2.

49
00:02:45,632 --> 00:02:48,182
And again, this X1 here just becomes an X.

50
00:02:48,182 --> 00:02:50,060
I have done a logic transformation.

51
00:02:50,060 --> 00:02:52,763
This is exactly the same rule,
it just looks simpler.

52
00:02:52,763 --> 00:02:54,710
And that's why normally
we would prefer this.

53
00:02:54,710 --> 00:02:58,580
So let's run this again, we get exactly
the same answer, not surprisingly.

54
00:02:58,580 --> 00:03:00,260
All right, so so far so good.

55
00:03:00,260 --> 00:03:05,090
Now if we add another person called ball,
maybe a typo of bell or

56
00:03:05,090 --> 00:03:08,310
just really a different person
who also gets student id 101,

57
00:03:08,310 --> 00:03:11,030
how many violations should I get now?

58
00:03:11,030 --> 00:03:14,710
So somehow we got two until
we got four answers but

59
00:03:14,710 --> 00:03:18,060
there's really two pairs, right,
because we got each pair reported twice.

60
00:03:18,060 --> 00:03:20,650
So how many pairs should I get,
eight, six?

61
00:03:20,650 --> 00:03:21,720
Any other numbers?

62
00:03:21,720 --> 00:03:25,240
So ball with bell, ball with logan,
and bell with logan.

63
00:03:25,240 --> 00:03:28,650
One, two, three pairs.

64
00:03:28,650 --> 00:03:30,877
So six maybe, sixes or four?

65
00:03:30,877 --> 00:03:31,740
Let's see.

66
00:03:31,740 --> 00:03:36,132
All right and since this is hard to count,
instead of saying Y1 not equal to Y2,

67
00:03:36,132 --> 00:03:37,110
we just say less.

68
00:03:37,110 --> 00:03:38,640
We get half of the solutions.

69
00:03:38,640 --> 00:03:41,190
And counting half is,
in this case, a good idea,

70
00:03:41,190 --> 00:03:43,250
because then we can multiply it by 2,
okay?

71
00:03:43,250 --> 00:03:45,160
And to see what we would
have gotten otherwise.

72
00:03:45,160 --> 00:03:49,530
So we got ball and bell, ball and
logan, bell and logan, and

73
00:03:49,530 --> 00:03:53,493
ftevens and,
sorry I forgot the number four guy.

74
00:03:53,493 --> 00:03:57,183
So this guy is destroying our little
calculation, so I'm going to kill Mr.

75
00:03:57,183 --> 00:03:57,725
stevens.

76
00:03:57,725 --> 00:03:59,115
Stevens got to go, right?

77
00:03:59,115 --> 00:04:03,555
So if I kick out stevens, we've got
indeed three pairs that are a problem,

78
00:04:03,555 --> 00:04:04,665
just as expected.

79
00:04:04,665 --> 00:04:09,405
And if we bring back the symmetric
pair the other way around, so

80
00:04:09,405 --> 00:04:11,035
I should get six now, right?

81
00:04:11,035 --> 00:04:14,195
One, two, three, four, five, six.

82
00:04:14,195 --> 00:04:17,270
Three pairs, six double pairs.

83
00:04:17,270 --> 00:04:21,643
Now if I bring back Mr.
stevens, or rather ftevens,

84
00:04:21,643 --> 00:04:24,472
how's that going to affect things?

85
00:04:24,472 --> 00:04:26,820
Then we're going to get another two,
right?

86
00:04:26,820 --> 00:04:28,340
And here is I think the eighth.

87
00:04:28,340 --> 00:04:29,850
So six and eight were both right in a way,

88
00:04:29,850 --> 00:04:32,190
depending on whether you
counted stevens or not.

89
00:04:32,190 --> 00:04:35,040
Okay great, so
we got lots of violations here.

90
00:04:35,040 --> 00:04:37,700
So how can we fix things here?

91
00:04:37,700 --> 00:04:43,550
Let me first get rid of Mr. ftevens here
and also let me get rid of maybe logan.

92
00:04:43,550 --> 00:04:44,880
We got still a violation, right?

93
00:04:44,880 --> 00:04:46,610
We still got one pair.

94
00:04:46,610 --> 00:04:47,200
Bell and ball.

95
00:04:47,200 --> 00:04:48,360
There's something with them.

96
00:04:48,360 --> 00:04:52,234
And now what we want to do is we want to,
okay, before I go to the repair,

97
00:04:52,234 --> 00:04:55,259
I want to just give one example
how these logic systems,

98
00:04:55,259 --> 00:04:58,330
this answer set programming
system normally is used.

99
00:04:58,330 --> 00:05:01,030
Here we're using the system
to check violations, but

100
00:05:01,030 --> 00:05:03,650
then we don't reject the answer.

101
00:05:03,650 --> 00:05:07,410
We kind of try to do something with it,
like deleting one of the bad guys, right?

102
00:05:07,410 --> 00:05:08,220
Something like that.

103
00:05:08,220 --> 00:05:12,220
When we use a system like this in
a logic setting as a constraint solver,

104
00:05:12,220 --> 00:05:14,460
we actually don't work
with soft constraints,

105
00:05:14,460 --> 00:05:18,380
which are really just queries that
give us answers of problematic tuples.

106
00:05:18,380 --> 00:05:20,640
But instead,
we kind of kill the whole model.

107
00:05:20,640 --> 00:05:24,000
We say, no, if there's an inconsistency,
don't even show me the thing.

108
00:05:24,000 --> 00:05:25,703
I just want to point this out,
what this is.

109
00:05:25,703 --> 00:05:27,100
This is called a hard constraint.

110
00:05:27,100 --> 00:05:29,000
So when you have nothing in the head, or

111
00:05:29,000 --> 00:05:31,960
you can think of it as having
false in the head, this says,

112
00:05:31,960 --> 00:05:35,490
if I have an integrity constraint
violation, whatsoever, I want to stop.

113
00:05:35,490 --> 00:05:36,910
Just don't show me that.

114
00:05:36,910 --> 00:05:39,190
And instead of false,
I write literally nothing there.

115
00:05:39,190 --> 00:05:42,710
This is sort of a very subtle syntax
if I did the little not insidious,

116
00:05:42,710 --> 00:05:44,930
but there's a lot of power
behind this little rule.

117
00:05:44,930 --> 00:05:49,030
And you have to know that this is what
it's doing to see what's happening.

118
00:05:49,030 --> 00:05:52,380
So this is basically saying if there's
any integrity constraint validation,

119
00:05:52,380 --> 00:05:54,040
I will not report anything.

120
00:05:54,040 --> 00:05:55,810
So if I run this program now, you see,

121
00:05:55,810 --> 00:05:58,320
even if I switch off the filter,
there's no answer.

122
00:05:58,320 --> 00:06:02,190
This says the set of rules that
you've given to me are inconsistent.

123
00:06:02,190 --> 00:06:03,380
There is a contradiction.

124
00:06:03,380 --> 00:06:07,480
So this is a useful feature when you
have lots of possibilities, thousands or

125
00:06:07,480 --> 00:06:10,340
maybe millions of combinations and
you want to kill off those

126
00:06:10,340 --> 00:06:13,660
that make the system inconsistent and
only report on the consistent ones.

127
00:06:13,660 --> 00:06:16,170
Here we're sort of using
a variation of the theme.

128
00:06:16,170 --> 00:06:17,830
We don't use these hard constraints.

129
00:06:17,830 --> 00:06:22,380
We use the soft constraints to
report on the bad guys and then

130
00:06:22,380 --> 00:06:26,920
try out some repair actions and then let
the system report on those repair actions.

131
00:06:26,920 --> 00:06:28,670
So that's a subtle difference
I wanted to point out.

132
00:06:28,670 --> 00:06:32,340
So if we want to, ourself,
fix the database by say,

133
00:06:32,340 --> 00:06:34,220
well, bell was wrong, it's ball.

134
00:06:34,220 --> 00:06:36,152
And ftevens is wrong, it's stevens.

135
00:06:36,152 --> 00:06:37,690
Now the database should be consistent.

136
00:06:37,690 --> 00:06:41,980
And if I run this repair example, it will
tell us there's these three students,

137
00:06:41,980 --> 00:06:42,760
it's all good.

138
00:06:42,760 --> 00:06:44,600
But once we introduce an inconsistency,

139
00:06:44,600 --> 00:06:48,250
never mind which ones, stevens and
ftevens, there's no answer.

140
00:06:48,250 --> 00:06:50,740
So this is of course
a rather drastic measure.

141
00:06:50,740 --> 00:06:52,620
Again, there are applications
where this is useful.

142
00:06:52,620 --> 00:06:55,390
For our purposes, this is too drastic.

143
00:06:55,390 --> 00:06:58,940
So we don't want to think of
this hard constraint saying,

144
00:06:58,940 --> 00:07:01,390
if there is a violation, abort.

145
00:07:01,390 --> 00:07:02,550
No, that's not what we want to do.

146
00:07:02,550 --> 00:07:05,580
We say, okay fine,
we're not going to use that.

147
00:07:05,580 --> 00:07:08,870
Instead, if there's a violation,
let's report on the violation.

148
00:07:08,870 --> 00:07:10,620
And now let's try and
do something about it.

149
00:07:10,620 --> 00:07:12,930
And that again is the idea of the repair.

150
00:07:12,930 --> 00:07:16,581
What are we going to do about it is rather
simple and this is where the system is so

151
00:07:16,581 --> 00:07:19,510
powerful that you can just
write down the following rule.

152
00:07:19,510 --> 00:07:22,490
It says,
if there's an integrity violation and

153
00:07:22,490 --> 00:07:25,240
let's use this new notation with Y1 and
Y2.

154
00:07:25,240 --> 00:07:29,494
If you rename things, clearly that doesn't
change the meaning of a rule, right?

155
00:07:29,494 --> 00:07:32,569
Renaming variables in your Java program
doesn't change the Java program,

156
00:07:32,569 --> 00:07:34,110
it might change the readability.

157
00:07:34,110 --> 00:07:37,680
Similar here in logic, if I rename
the variables in a consistent manner,

158
00:07:37,680 --> 00:07:39,560
it helps the readability
along a little bit.

159
00:07:39,560 --> 00:07:42,676
So here we have a rule that is a little
bit unusual from the rules we've

160
00:07:42,676 --> 00:07:43,284
seen so far.

161
00:07:43,284 --> 00:07:44,893
It has a body, which is a query, but

162
00:07:44,893 --> 00:07:47,860
then in the head there's
something really strange going on.

163
00:07:47,860 --> 00:07:50,000
There's this funny or symbol, and

164
00:07:50,000 --> 00:07:53,740
again normal systems, normal data lock
systems will not give you that power.

165
00:07:53,740 --> 00:07:58,440
Here, it just says, well, if I have two
values, Y1 and Y2, I don't have to check

166
00:07:58,440 --> 00:08:00,890
that they are different, why don't I
have to check that they are different?

167
00:08:00,890 --> 00:08:04,780
Because they only got in there if
they were different to begin with.

168
00:08:04,780 --> 00:08:08,810
So I know Y1 and Y2 are different,
I could possibly write it there again,

169
00:08:08,810 --> 00:08:11,200
but at this point it's not really needed.

170
00:08:11,200 --> 00:08:13,780
So they only got in there if Y1 and
Y2 are different.

171
00:08:13,780 --> 00:08:16,480
This is clearly a violation, so
one of the two has to go, so

172
00:08:16,480 --> 00:08:17,630
this is what I write here.

173
00:08:17,630 --> 00:08:20,780
So maybe let's run this program and
see what's going to happen.

174
00:08:20,780 --> 00:08:25,530
The hard constraint,
if I had both, if I had this and

175
00:08:25,530 --> 00:08:30,610
that together that basically,
these are not really kind of alternatives.

176
00:08:30,610 --> 00:08:34,330
What's happening is this one collects
the integrity constraint violations

177
00:08:34,330 --> 00:08:37,490
in an auxiliary table,
auxiliary relation, if you like.

178
00:08:37,490 --> 00:08:38,940
And this one acts upon it.

179
00:08:38,940 --> 00:08:42,845
Only that the action of killing off
the model is a little drastic for

180
00:08:42,845 --> 00:08:43,830
our purposes.

181
00:08:43,830 --> 00:08:49,370
Again in sort of AI settings or
where we use this to generate answers and

182
00:08:49,370 --> 00:08:53,410
then filter out the ones that work,
this is the way to go, it's not for us.

183
00:08:53,410 --> 00:08:57,850
So here, we literally switch it off but
we collect the integrity constraint

184
00:08:57,850 --> 00:09:02,050
violators and then we offer to
delete one of the violators.

185
00:09:02,050 --> 00:09:03,430
And let's have a look here.

186
00:09:03,430 --> 00:09:07,590
Right now, let's bring stevens
here out of the picture and

187
00:09:07,590 --> 00:09:08,940
look just at bell and ball.

188
00:09:08,940 --> 00:09:10,031
What should we see?

189
00:09:10,031 --> 00:09:11,670
What do you think
the answer will look like?

190
00:09:11,670 --> 00:09:13,980
So I have a violation between ball and
bell.

191
00:09:13,980 --> 00:09:15,420
Everything else is okay.

192
00:09:15,420 --> 00:09:17,930
The violation will be
reported kind of both ways.

193
00:09:17,930 --> 00:09:20,910
And then this rule will say,
well, if I have a violation,

194
00:09:20,910 --> 00:09:22,720
then I should either delete this guy or
that guy.

195
00:09:22,720 --> 00:09:25,130
So what do you think we
should see when we run this?

196
00:09:25,130 --> 00:09:25,990
Well, let's try it out.

197
00:09:25,990 --> 00:09:27,210
That's the beauty of it.

198
00:09:27,210 --> 00:09:30,200
Aha, so we get somehow two answers.

199
00:09:30,200 --> 00:09:33,700
Let's just filter on
the student deletion table,

200
00:09:33,700 --> 00:09:35,250
to really zoom in on what's going on.

201
00:09:35,250 --> 00:09:36,670
So there are two answers,

202
00:09:36,670 --> 00:09:41,120
one says, you gotta delete bell, then
the word's okay, or you gotta delete ball.

203
00:09:41,120 --> 00:09:43,069
But notice there is this
sort of two separate lines.

204
00:09:43,069 --> 00:09:44,552
It's really two separate worlds.

205
00:09:44,552 --> 00:09:49,346
In fact I can count the possible worlds
as we'll show in a moment using certain

206
00:09:49,346 --> 00:09:49,877
trick.

207
00:09:49,877 --> 00:09:51,235
Does it delete randomly?

208
00:09:51,235 --> 00:09:55,876
No, the answer is right now this is
just an auxiliary table that we've

209
00:09:55,876 --> 00:10:00,216
created to identify the candidates,
the deletion candidates.

210
00:10:00,216 --> 00:10:03,408
And nobody has been deleted so
far at this point.

211
00:10:03,408 --> 00:10:07,920
When I have ball and bell and
logan, all sharing the same id,

212
00:10:07,920 --> 00:10:12,698
then we can either delete ball and
bell, logan wins, or ball and

213
00:10:12,698 --> 00:10:16,570
logan, bell wins or
bell and logan, ball wins.

214
00:10:16,570 --> 00:10:18,490
Now that's of course is
a little bit complicated and

215
00:10:18,490 --> 00:10:20,530
tedious to keep track of
all these combinations.

216
00:10:20,530 --> 00:10:26,499
So what we should do is we should execute
the deletion by computing a new table.

217
00:10:26,499 --> 00:10:28,510
Whoever we deleted is no longer there.

218
00:10:28,510 --> 00:10:30,210
So how do we do this?

219
00:10:30,210 --> 00:10:33,330
So we create a new students table,
I call it new student.

220
00:10:33,330 --> 00:10:36,480
And it has an interesting
body of the rule.

221
00:10:36,480 --> 00:10:39,395
It says, well take any student X,
Y that you have and

222
00:10:39,395 --> 00:10:43,565
as long as they're not deleted,
they'll make it into the next round.

223
00:10:43,565 --> 00:10:44,963
It's a little bit like what is it?

224
00:10:44,963 --> 00:10:46,485
Survivor or getting into the next round.

225
00:10:47,655 --> 00:10:50,081
Not getting voted off the island,
that's what's happening here.

226
00:10:50,081 --> 00:10:54,385
So whoever's been deleted, will not
make it into the new student table.

227
00:10:54,385 --> 00:10:56,902
What we should see now instead of,
in this case,

228
00:10:56,902 --> 00:11:00,470
these three alternative variants
of what needs to be deleted.

229
00:11:00,470 --> 00:11:04,870
You see in each of these three variants,
two guys need be deleted but one survives,

230
00:11:04,870 --> 00:11:05,860
who survives?

231
00:11:05,860 --> 00:11:08,720
That should be now in the new student
table, should be a little easier to see.

232
00:11:08,720 --> 00:11:12,280
So we run the program again, and
instead of looking a the deleted students,

233
00:11:12,280 --> 00:11:16,670
we just look at who is there after
getting voted off the island, okay?

234
00:11:16,670 --> 00:11:19,599
If you look at,
it's sort of little bit backwards but

235
00:11:19,599 --> 00:11:22,540
you see 101 is either logan, bell or ball.

236
00:11:22,540 --> 00:11:26,230
And stevens and norton are untouched,
so there are three possible worlds.

237
00:11:26,230 --> 00:11:31,080
I can actually count the possible
worlds if I pipe this into word count,

238
00:11:31,080 --> 00:11:34,090
which is a tool that's available
on Unix based systems.

239
00:11:34,090 --> 00:11:37,970
It'll tell us, so this vertical symbol
is a pipe, whatever the output from

240
00:11:37,970 --> 00:11:42,190
the previous program is sent into this
word count program, the word count program

241
00:11:42,190 --> 00:11:47,030
tells us there are 7 lines in the answer,
22 words and 301 characters.

242
00:11:47,030 --> 00:11:48,979
But the number of lines is for
us, an indication.

243
00:11:48,979 --> 00:11:53,331
Now something is a little wrong here,
because we've one line here,

244
00:11:53,331 --> 00:11:57,350
second, third, four, five,
six, seven, seven lines.

245
00:11:57,350 --> 00:11:59,450
But only three of these seven
lines are meaningful and

246
00:11:59,450 --> 00:12:01,050
four lines are kind of useless.

247
00:12:01,050 --> 00:12:03,500
So there is an option called silent,
command line option.

248
00:12:03,500 --> 00:12:07,210
When I run silent,
it will just give me one answer per line.

249
00:12:07,210 --> 00:12:09,850
And if I count them now,
this is very convenient,

250
00:12:09,850 --> 00:12:12,180
now I see there are three
different solutions.

251
00:12:12,180 --> 00:12:15,745
For three, it's easy to see, for
10,000, it's harder to count.

252
00:12:15,745 --> 00:12:17,785
So that's a useful trick here.

253
00:12:17,785 --> 00:12:21,705
This will work on your Unix
based system or a Mac or

254
00:12:21,705 --> 00:12:25,385
it will work on a Windows based system,
if you use a bash or

255
00:12:25,385 --> 00:12:29,095
similar sort of Unix type shell,
then you'll get the benefits here as well.

256
00:12:29,095 --> 00:12:32,261
So let's try to make a little prediction
and then we'll take a little break.

257
00:12:32,261 --> 00:12:34,995
Let's try to make a little prediction and
see what's going to happen.

258
00:12:34,995 --> 00:12:37,250
We have three different kinds of repairs.

259
00:12:37,250 --> 00:12:39,870
If I switch off the word count,
I see the three repairs.

260
00:12:39,870 --> 00:12:41,930
They all have to do with 101.

261
00:12:41,930 --> 00:12:45,972
Instead of filtering on new student,
I can also look at the delete.

262
00:12:45,972 --> 00:12:49,420
Now what was that delete student
relationship, so they all go together.

263
00:12:49,420 --> 00:12:50,360
Let's have a look.

264
00:12:50,360 --> 00:12:52,810
So if you look at each line separately.

265
00:12:52,810 --> 00:12:55,560
Actually here I can
switch off the silent to

266
00:12:55,560 --> 00:12:57,460
give us an empty line between the answers.

267
00:12:57,460 --> 00:12:58,930
This makes it little easier to read.

268
00:12:58,930 --> 00:13:01,170
So again,
we see the same what we saw before.

269
00:13:01,170 --> 00:13:04,280
Stevens and norton always make it because
there's no problem with their id,

270
00:13:04,280 --> 00:13:07,150
but there's sort of
a contention about the id 101.

271
00:13:07,150 --> 00:13:11,402
And either you delete ball and bell and
you keep logan, or you delete ball and

272
00:13:11,402 --> 00:13:15,801
logan and you keep bell, or you delete
bell and logan and you keep ball, okay?

273
00:13:15,801 --> 00:13:18,931
So you see, it's all these combinations,
it'll all make some sense, you delete two,

274
00:13:18,931 --> 00:13:19,880
you keep the third.

275
00:13:19,880 --> 00:13:23,850
So each world, what is called a possible
world in the terminology of this

276
00:13:23,850 --> 00:13:25,930
approach or each answer set.

277
00:13:25,930 --> 00:13:27,290
That's why it's called
answer set programming.

278
00:13:27,290 --> 00:13:28,490
There's three answer sets.

279
00:13:28,490 --> 00:13:31,030
Each world corresponds to one answer set.

280
00:13:31,030 --> 00:13:34,780
And so each answer set gives you one
consistent way how you can repair.

281
00:13:34,780 --> 00:13:38,100
And if you think about what we've done,
this was pretty straight forward.

282
00:13:38,100 --> 00:13:40,940
We had an integrity constraint
that we could check.

283
00:13:40,940 --> 00:13:43,430
We can come up with any
integrity constraint really.

284
00:13:43,430 --> 00:13:48,660
And the meta approach, the Uber approach
if you like to this is, we'll just invent

285
00:13:48,660 --> 00:13:52,690
some rules to tell you, in case of a
violation, what is it that you want to do?

286
00:13:52,690 --> 00:13:53,680
So that's what we've done here.

287
00:13:53,680 --> 00:13:57,960
We said well, if I have a violation,
we'll delete one or delete the other.

288
00:13:57,960 --> 00:14:01,120
If you have more complicated situations,
you can do other things as well.

289
00:14:01,120 --> 00:14:04,600
But the key to the power of this approach
is that we generate different possible

290
00:14:04,600 --> 00:14:05,670
answers with the or, and

291
00:14:05,670 --> 00:14:09,990
then the system sort of figures out which
of these various answers work together.

292
00:14:09,990 --> 00:14:12,699
And in this particular case we said, okay,

293
00:14:12,699 --> 00:14:17,604
we need the final step where we say in
the new state, the repaired state, we take

294
00:14:17,604 --> 00:14:22,310
a copy of what was previously the case and
then we execute in a way the action.

295
00:14:22,310 --> 00:14:26,166
Or we filter out, in this case,
the tuples that should be deleted,

296
00:14:26,166 --> 00:14:28,610
we don't let them go into the next state.

297
00:14:28,610 --> 00:14:31,070
So, again, it's a simple example,
but a lot is going on.

298
00:14:31,070 --> 00:14:32,080
And if you generalize that,

299
00:14:32,080 --> 00:14:35,850
that's behind all of these or most of
these repair approaches in databases.

300
00:14:35,850 --> 00:14:38,830
So the foundations of it, I think,
we got pretty much worked out.

301
00:14:38,830 --> 00:14:41,690
We have a database, in this case,
a very simple constraint,

302
00:14:41,690 --> 00:14:42,990
which is a functional dependency.

303
00:14:42,990 --> 00:14:47,000
And then we have a generation
of possible repairs.

304
00:14:47,000 --> 00:14:49,990
And then we have an execution
of these repairs.

305
00:14:49,990 --> 00:14:52,711
How is it chosen which
student is to be deleted?

306
00:14:52,711 --> 00:14:57,060
Well, the answer is it's systematically
enumerating all possible repairs.

307
00:14:57,060 --> 00:15:01,070
It's choosing by looking at all of them,
trying to be fair.

308
00:15:01,070 --> 00:15:03,620
That's why we have three answers here.

309
00:15:03,620 --> 00:15:07,400
A real database system, sometimes you are
stuck because you have to make a decision.

310
00:15:07,400 --> 00:15:10,730
You have to decide which of these three
possible worlds do I want to have.

311
00:15:10,730 --> 00:15:13,902
In a more complex situation, you might
have other rules that point out, well,

312
00:15:13,902 --> 00:15:17,080
just this bell guy show up somewhere
else in the database in another table.

313
00:15:17,080 --> 00:15:19,720
Or does logan or ball show up somewhere?

314
00:15:19,720 --> 00:15:22,105
Or if something shows up in
a dictionary as a valid name and

315
00:15:22,105 --> 00:15:25,298
the ftevens probably doesn't show up
in a dictionary, that's not a name.

316
00:15:25,298 --> 00:15:26,998
And then more comprehensive solution,

317
00:15:26,998 --> 00:15:30,720
you will probably want to post process
your choices, and then rank them somehow.

318
00:15:30,720 --> 00:15:31,620
Before I break,

319
00:15:31,620 --> 00:15:35,876
let me just do, just to see a sort of
a multiplication effect here that occurs.

320
00:15:35,876 --> 00:15:39,146
So you see ball, bell and
logan were three possible worlds.

321
00:15:39,146 --> 00:15:42,767
And now I'm going to say stevens and
ftevens are also ending up in

322
00:15:42,767 --> 00:15:46,119
the database,
maybe a transcription error for 104.

323
00:15:46,119 --> 00:15:48,162
How many possible worlds
do you think we get now?

324
00:15:48,162 --> 00:15:51,042
So one idea could be let's
see what happens if we

325
00:15:51,042 --> 00:15:53,490
get rid of the problem with the 101s.

326
00:15:53,490 --> 00:15:57,026
Let's just say ball is the guy,
then for stevens, right,

327
00:15:57,026 --> 00:15:59,235
we should get two different worlds.

328
00:15:59,235 --> 00:16:01,022
Either we delete ftevens and

329
00:16:01,022 --> 00:16:04,920
we keep stevens or
we delete stevens and we keep ftevens.

330
00:16:04,920 --> 00:16:05,970
In this particular case,

331
00:16:05,970 --> 00:16:09,385
if I bring back the other three choices,
those are independent.

332
00:16:09,385 --> 00:16:11,485
Sometimes they might actually
interact in complex ways.

333
00:16:11,485 --> 00:16:14,925
That's where the power of the system lies,
that it can keep also track of maybe

334
00:16:14,925 --> 00:16:17,725
one of the solutions, interact somehow,
correlate with the other ones.

335
00:16:17,725 --> 00:16:19,120
In this case, they're really independent.

336
00:16:19,120 --> 00:16:22,300
So I think we will get three times two.

337
00:16:22,300 --> 00:16:23,680
Let's try it out, okay?

338
00:16:23,680 --> 00:16:27,100
Well now we have to start counting or
we use our trick from before.

339
00:16:27,100 --> 00:16:30,364
First of all, we use this silent
option to get rid of the white space,

340
00:16:30,364 --> 00:16:31,220
the extra lines.

341
00:16:31,220 --> 00:16:34,370
And then we pipe it into
tool called word count, and

342
00:16:34,370 --> 00:16:36,435
it tells us there are six worlds.

343
00:16:36,435 --> 00:16:46,435
[MUSIC]