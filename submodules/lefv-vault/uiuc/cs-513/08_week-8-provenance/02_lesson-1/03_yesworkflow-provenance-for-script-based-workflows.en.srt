1
00:00:00,000 --> 00:00:08,411
[MUSIC]

2
00:00:08,411 --> 00:00:10,300
I'm going to talk about YesWorkflow.

3
00:00:10,300 --> 00:00:14,030
We're going to move toward YesWorkflow
which is a system and tool for

4
00:00:14,030 --> 00:00:15,700
provinence for script based workflows.

5
00:00:15,700 --> 00:00:18,930
So when we have scripts instead
of a proper work flow system

6
00:00:18,930 --> 00:00:23,170
how can we provide some of the benefits
of scientific workflow systems

7
00:00:23,170 --> 00:00:26,170
to those people who have scripts,
and there are many of those.

8
00:00:26,170 --> 00:00:27,290
So I'm going to talk about that.

9
00:00:27,290 --> 00:00:29,340
But first, why are we interested in that?

10
00:00:29,340 --> 00:00:33,749
Well, if you think about what workflow
tools most scientists are using,

11
00:00:33,749 --> 00:00:36,534
there are a number that
use workflow systems.

12
00:00:36,534 --> 00:00:39,370
But it's often in sort
of specialized domains.

13
00:00:39,370 --> 00:00:43,520
And if you look at how many people
are using Python and R and MATLAB and

14
00:00:43,520 --> 00:00:49,280
similar scripting languages, for
workflow-like activities for automation of

15
00:00:49,280 --> 00:00:54,195
say, computational science, and
data science, and analysis pipelines.

16
00:00:54,195 --> 00:00:58,300
You'll see that the customer base for

17
00:00:58,300 --> 00:01:03,540
the script based approach is very large
much larger than for workflow systems.

18
00:01:03,540 --> 00:01:05,740
Also what provenance tools exist?

19
00:01:05,740 --> 00:01:09,940
Well again the workflow systems themselves
often have very nice provenance support.

20
00:01:09,940 --> 00:01:12,490
The workflow itself is a kind of
provenance if you want to think about

21
00:01:12,490 --> 00:01:13,590
it this way.

22
00:01:13,590 --> 00:01:17,410
Then the workflow system allow
you to record data lineage, but

23
00:01:17,410 --> 00:01:19,670
what about people who write
their workflow as scripts?

24
00:01:19,670 --> 00:01:21,170
There is not so much out there.

25
00:01:21,170 --> 00:01:24,969
I'll give you an example,
from one of our own projects.

26
00:01:24,969 --> 00:01:28,351
This is a research project funded again
by the National Science Foundation

27
00:01:28,351 --> 00:01:29,057
called SKOPE.

28
00:01:29,057 --> 00:01:31,960
It stands for Synthesized Knowledge
of Past Environments.

29
00:01:31,960 --> 00:01:37,170
And he would be an example from
a publication, in this case in nature

30
00:01:37,170 --> 00:01:42,590
communications by two scientists and
collaborators Bocinsky and Kohler.

31
00:01:42,590 --> 00:01:47,024
And they have a paper on the 2000
year reconstruction of rain fed maze

32
00:01:47,024 --> 00:01:50,305
agricultural nitch in
the United States Southwest.

33
00:01:50,305 --> 00:01:55,240
So this is about the southwestern
states in the U.S..

34
00:01:55,240 --> 00:01:59,905
And they create this wonderful
climate models that kind of explain

35
00:01:59,905 --> 00:02:06,230
retro-actively or try to retrodict
the climate from 1,000 to 2,000 years ago.

36
00:02:06,230 --> 00:02:07,805
What do they use to do that?

37
00:02:07,805 --> 00:02:11,320
So they create these nice models and
they create these nice graphs.

38
00:02:11,320 --> 00:02:13,061
But what are the tools that they use?

39
00:02:13,061 --> 00:02:15,657
They use tools that are very
well suited for the job,

40
00:02:15,657 --> 00:02:18,520
something that works very well,
and that's R.

41
00:02:18,520 --> 00:02:24,980
And R is of course available for
free and it's an open source

42
00:02:24,980 --> 00:02:29,860
system and a lot of scientists use it to
publish their own studies as open source.

43
00:02:29,860 --> 00:02:33,730
So here you have an R script that
kind of goes together with the paper.

44
00:02:33,730 --> 00:02:38,650
Goes together with the dataset, but how
can your really document the big picture?

45
00:02:38,650 --> 00:02:39,618
What is the method?

46
00:02:39,618 --> 00:02:41,350
Of course you should read the paper.

47
00:02:41,350 --> 00:02:44,100
The paper explains what
the method is very well.

48
00:02:44,100 --> 00:02:48,577
But are there some additional artifacts
that you could consider look at?

49
00:02:48,577 --> 00:02:52,760
To really assess is this a method I
want to use maybe for my studies.

50
00:02:52,760 --> 00:02:57,023
And if you want to have a first idea about
what are the characteristic features of

51
00:02:57,023 --> 00:02:57,805
this method.

52
00:02:57,805 --> 00:03:01,758
Again, you can look at the paper and
then you can look at the code.

53
00:03:01,758 --> 00:03:06,443
What we're aiming here however is
something in between a conceptual

54
00:03:06,443 --> 00:03:10,319
level data flow diagram that
is the equivalent of what you

55
00:03:10,319 --> 00:03:14,700
would see if you had used the workflow
system instead of using R.

56
00:03:14,700 --> 00:03:16,150
So this is the goal.

57
00:03:16,150 --> 00:03:19,170
So again here, we're looking at a use
case paleoclimate reconstruction.

58
00:03:19,170 --> 00:03:23,280
Here is another paper by
the same co-authors here.

59
00:03:23,280 --> 00:03:26,140
This one published in Science Advances.

60
00:03:26,140 --> 00:03:28,390
Again, it uses open source code.

61
00:03:28,390 --> 00:03:32,761
So these scientists do the right
thing here they publish

62
00:03:32,761 --> 00:03:37,507
their methods openly using code
in open source repository.

63
00:03:37,507 --> 00:03:41,200
But how do I understand what
exactly the method entails?

64
00:03:41,200 --> 00:03:43,421
What are the data artifacts that go in and
out?

65
00:03:43,421 --> 00:03:47,027
Is there something I can do other than
looking at the code to get a high level

66
00:03:47,027 --> 00:03:47,970
conceptual view.

67
00:03:47,970 --> 00:03:52,150
And there's also things that really
aren't really embedded in the code.

68
00:03:52,150 --> 00:03:55,580
Certain dependencies are not easily, or

69
00:03:55,580 --> 00:03:58,110
maybe not at all
extractable from the code.

70
00:03:58,110 --> 00:04:00,930
And so we want to end up with a diagram
like we see here on the right.

71
00:04:00,930 --> 00:04:05,742
Where you have data going into a workflow
and then there's computational steps and

72
00:04:05,742 --> 00:04:08,216
phases and data products popping out, and

73
00:04:08,216 --> 00:04:10,774
you want to know how
that all works together.

74
00:04:10,774 --> 00:04:15,177
And so the tool that we've been developing
in my group is called YesWorkflow.

75
00:04:15,177 --> 00:04:19,029
You can think of it as sort of
a recognition of the fact that yes,

76
00:04:19,029 --> 00:04:20,790
scripts are workflows too.

77
00:04:20,790 --> 00:04:23,040
Or at least scripts can be workflows too.

78
00:04:23,040 --> 00:04:24,759
Not every script is a workflow.

79
00:04:24,759 --> 00:04:29,839
But often times a script can be
a workflow in that it automates certain

80
00:04:29,839 --> 00:04:34,931
repetitive tasks or it describes
really a computational pipeline.

81
00:04:34,931 --> 00:04:39,553
If you compare a script to some
of the characteristic features of

82
00:04:39,553 --> 00:04:45,670
a workflow system, you see it gets its
job done of automation quite well.

83
00:04:45,670 --> 00:04:51,560
When it comes to scaling, that's maybe
a little more difficult if you use

84
00:04:51,560 --> 00:04:55,240
a certain library together with your code,
you can then maybe paralyze your code.

85
00:04:55,240 --> 00:05:00,650
So there's some support for that but
still requires a lot of additional effort.

86
00:05:00,650 --> 00:05:05,330
But abstraction is really I think the main
thing where scripts somewhat fall short.

87
00:05:05,330 --> 00:05:08,640
They're fine for the author who wrote
them, but they're kind of hard to extract

88
00:05:08,640 --> 00:05:12,540
the sort of more high level conceptual
view of what the script is doing.

89
00:05:12,540 --> 00:05:13,430
Again, what are the inputs?

90
00:05:13,430 --> 00:05:14,100
What are the outputs?

91
00:05:14,100 --> 00:05:15,460
What are the intermediate steps?

92
00:05:15,460 --> 00:05:16,900
What are the intermediate products?

93
00:05:16,900 --> 00:05:20,300
So this where we really
want to make a contribution.

94
00:05:20,300 --> 00:05:22,305
And then in terms of Provenance support,

95
00:05:22,305 --> 00:05:25,122
again scripts can actually
record their own Provenance.

96
00:05:25,122 --> 00:05:29,697
Maybe user writes a log file that
documents what the script is doing.

97
00:05:29,697 --> 00:05:31,987
Maybe you have a generic library that
writes, that records, intercepts,

98
00:05:31,987 --> 00:05:34,078
maybe read and write operations and
kind of traces what's going on.

99
00:05:34,078 --> 00:05:34,842
So there is such support also.

100
00:05:34,842 --> 00:05:39,414
So it's a little bit better than, I think,

101
00:05:39,414 --> 00:05:42,999
their support for abstraction and

102
00:05:42,999 --> 00:05:48,326
workflow models but
it is still somewhat limited.

103
00:05:48,326 --> 00:05:52,819
So this is where the motivation
comes from for the YesWorkflow tool.

104
00:05:52,819 --> 00:05:57,041
We would like to go from scripts
somehow to workflow diagram that tells

105
00:05:57,041 --> 00:05:59,831
us something about
the processing history and

106
00:05:59,831 --> 00:06:04,570
the data lineage of data that pops out at
the end of such script based workflow.

107
00:06:05,580 --> 00:06:09,700
So let me jump right in and show you
some examples here how that is done.

108
00:06:09,700 --> 00:06:12,950
And there's an associated
reading as usual.

109
00:06:12,950 --> 00:06:16,650
So here is a snippet of code.

110
00:06:16,650 --> 00:06:19,310
In this case, this is Python code.

111
00:06:19,310 --> 00:06:24,485
And in order to use that YesWorkflow
approach, what the user has to do,

112
00:06:24,485 --> 00:06:28,170
or the author, it should be really
the author of the script who knows best

113
00:06:28,170 --> 00:06:29,420
what the script is doing.

114
00:06:29,420 --> 00:06:32,739
There should be some declarations
embedded in the script.

115
00:06:34,100 --> 00:06:37,080
And they are not meant to document
exactly what the code is doing.

116
00:06:37,080 --> 00:06:41,900
Because what the code is doing there's
already coding comments in there.

117
00:06:41,900 --> 00:06:45,750
It's really more about describing
the things that are not in the code or

118
00:06:45,750 --> 00:06:49,060
at least not obvious from the code or
not even at all in the code.

119
00:06:49,060 --> 00:06:49,780
And what is that?

120
00:06:49,780 --> 00:06:55,410
If you think of a problem standard, we
heard that there are these Activities or

121
00:06:55,410 --> 00:06:59,640
how we would like to call
them according to the OPM

122
00:06:59,640 --> 00:07:02,940
model the previous standard processes.

123
00:07:02,940 --> 00:07:04,200
What other processes.

124
00:07:04,200 --> 00:07:05,840
We think of them as steps.

125
00:07:05,840 --> 00:07:09,290
I like to use sort of
a somewhat more generic term

126
00:07:09,290 --> 00:07:12,010
What are the computational
steps of my methods?

127
00:07:12,010 --> 00:07:14,610
And we're going to look at this
in more detail, but basically

128
00:07:14,610 --> 00:07:18,240
you just declare a step by saying here's
the beginning, here's the end of the step.

129
00:07:18,240 --> 00:07:21,120
Typically, you would embed
this in the code because you

130
00:07:21,120 --> 00:07:23,530
get the additional
benefit that you can then

131
00:07:23,530 --> 00:07:27,040
connect your conceptual model with
the code right there in one place.

132
00:07:27,040 --> 00:07:29,310
But you might as well create that model.

133
00:07:29,310 --> 00:07:30,290
Outside of your script.

134
00:07:30,290 --> 00:07:32,310
You might do it on a piece of paper or

135
00:07:32,310 --> 00:07:37,230
in a separate file that is somehow
separate from the script itself.

136
00:07:37,230 --> 00:07:39,860
Or maybe you don't have
the script quite yet.

137
00:07:39,860 --> 00:07:44,770
And so you can create these workflow
models in the simple annotation

138
00:07:44,770 --> 00:07:47,730
language inside of the code.

139
00:07:47,730 --> 00:07:50,710
As embedded comments or
outside of the code if you prefer.

140
00:07:50,710 --> 00:07:54,710
And the basic mechanism by which
you define this is you say,

141
00:07:54,710 --> 00:07:59,680
here is a code block or here is a step,
really that here's the beginning and end.

142
00:07:59,680 --> 00:08:02,690
So you just declare the step, and then
you just basically say what goes in and

143
00:08:02,690 --> 00:08:03,810
out of the step.

144
00:08:03,810 --> 00:08:05,460
So in the end it's rather simple.

145
00:08:05,460 --> 00:08:09,270
You just say This is a step and
this goes in and this goes out.

146
00:08:09,270 --> 00:08:14,150
And by wiring this together
the workflow diagram is obtained.

147
00:08:14,150 --> 00:08:16,760
So here's an example of the right and

148
00:08:16,760 --> 00:08:20,540
we're going to look at some of this
more closely of such a work flow.

149
00:08:20,540 --> 00:08:23,200
The green boxes indicate steps,

150
00:08:23,200 --> 00:08:27,960
again the providence models you
would think of this as a process.

151
00:08:27,960 --> 00:08:31,850
Maybe even an activity, but for
our purposes, it's a computational step.

152
00:08:31,850 --> 00:08:34,450
It's a method somehow, and

153
00:08:34,450 --> 00:08:37,958
a data transformation step,
maybe a data cleaning step.

154
00:08:37,958 --> 00:08:43,500
And then the more yellowish nodes
are the data that flows between the steps.

155
00:08:43,500 --> 00:08:46,420
And you can easily imagine that
it's not terrible difficult

156
00:08:46,420 --> 00:08:50,910
to create these diagrams You basically
have to say what are those boxes and

157
00:08:50,910 --> 00:08:52,900
how do they connect to one another?

158
00:08:52,900 --> 00:08:57,000
And the simple way again to do this is
to declare the green boxes as saying

159
00:08:57,000 --> 00:08:59,190
here's such a green box, here's a step.

160
00:08:59,190 --> 00:09:01,700
And then you say what goes in and
out of the step.

161
00:09:01,700 --> 00:09:04,399
And then we use an external
tool called graph base.

162
00:09:05,530 --> 00:09:09,380
That gives us a nice layout, so we don't
have to worry about the visualization.

163
00:09:09,380 --> 00:09:11,750
We outsource that to another tool.

164
00:09:11,750 --> 00:09:14,720
And what does this give you if you have,
like in this case,

165
00:09:14,720 --> 00:09:16,910
spent maybe half an hour
on marking up your script?

166
00:09:16,910 --> 00:09:20,330
Once you get the hang of it,
it shouldn't take all that long.

167
00:09:20,330 --> 00:09:24,050
Well, I should say there's
also modeling freedom.

168
00:09:24,050 --> 00:09:26,320
May be something that's
sometimes underestimated.

169
00:09:26,320 --> 00:09:28,740
Maybe you don't need a complex
workflow diagram like that.

170
00:09:28,740 --> 00:09:32,940
Maybe you do one big green box that says,
this is what my method does.

171
00:09:32,940 --> 00:09:37,830
It's one box, I call it my method,
maybe poly OCR or clean this, or

172
00:09:37,830 --> 00:09:39,550
whatever is your application.

173
00:09:39,550 --> 00:09:42,550
And then you just declare the inputs and
outputs, and you're done.

174
00:09:42,550 --> 00:09:44,270
Yeah, that's maybe a starting point.

175
00:09:44,270 --> 00:09:45,320
Well you say, you know what?

176
00:09:45,320 --> 00:09:48,860
I think i really need to reveal
what's going on inside of the box.

177
00:09:48,860 --> 00:09:51,970
And then, this is an example of the
diagram that you see here in the right.

178
00:09:51,970 --> 00:09:53,330
Here, we've opened up the box, and

179
00:09:53,330 --> 00:09:57,900
we can see that it consist of multiple
steps that are connected in a certain way.

180
00:09:57,900 --> 00:10:02,540
Once you've spent the effort of Doing
this additional what feels like

181
00:10:02,540 --> 00:10:06,290
maybe a metadata chore, but you do
get some value out of it immediately.

182
00:10:06,290 --> 00:10:11,770
First of all, you can create
different views on top of that.

183
00:10:11,770 --> 00:10:14,480
So you model this once, and
then you can tell the tool, and

184
00:10:14,480 --> 00:10:18,810
say, I would like to see just the steps.

185
00:10:18,810 --> 00:10:20,420
Just give me the steps.

186
00:10:20,420 --> 00:10:22,730
Is it even more abstract
view of the diagram,

187
00:10:22,730 --> 00:10:25,240
just let's not get lost in the data.

188
00:10:25,240 --> 00:10:28,430
Or you can say no wait a minute,
I'm really interested in data

189
00:10:28,430 --> 00:10:32,320
let's not show the steps,
let's just connect the data.

190
00:10:32,320 --> 00:10:35,940
So this is in some sense similar
to the west derived relationship

191
00:10:35,940 --> 00:10:37,920
that we had in the promise standard.

192
00:10:37,920 --> 00:10:42,520
Only that this is, at this point,
still a workflow model.

193
00:10:42,520 --> 00:10:44,160
This is not retrospective providence.

194
00:10:44,160 --> 00:10:47,310
We have not recorded any
actual execution yet.

195
00:10:47,310 --> 00:10:51,210
This is something that we've sort
of declared or made known upfront.

196
00:10:51,210 --> 00:10:52,560
This is how our method works.

197
00:10:52,560 --> 00:10:54,181
And then of course,
we can have the combined view,

198
00:10:54,181 --> 00:10:56,120
which I think of as the default view for
YesWorkflow models.

199
00:10:58,710 --> 00:11:02,290
You've marked up your
script if you have one or

200
00:11:02,290 --> 00:11:04,140
you've just created this
model using annotations.

201
00:11:04,140 --> 00:11:07,820
So you're having these boxes
that stand for steps and

202
00:11:07,820 --> 00:11:09,310
you have data that flows
between the steps.

203
00:11:10,460 --> 00:11:13,117
So again you get all of these
three different models for

204
00:11:13,117 --> 00:11:16,320
free once you've modeled
the one on bottom basically.

205
00:11:16,320 --> 00:11:19,942
So that the one on the top,
that the first two become free.

206
00:11:19,942 --> 00:11:30,174
[MUSIC]

207
00:11:30,174 --> 00:11:33,330
[SOUND]