[MUSIC] Welcome to Theory and
Practice of Data Cleaning. In this video I will give
an introduction to regular expressions. So first we will have a video on
the theory of regular expressions, that is a brief introduction where
regular expressions come from. In a separate video I will then talk
about practice of regular expressions. What you need to know to get started
with regular expressions and practice. And then finally I'll have a video
demonstrating the use of regular expressions on an actual website. But first why should we
study regular expressions? Regular expressions
are widely used in practice. So they're a little bit like wildcards. For example you might have seen
expression such as *.csv to match all csv files maybe in a folder. But unlike wildcards regular
expressions are much more powerful. So you can think of them
as wildcards on steroids. Regular expressions are also used
to match, extract and then find and replace data. For example in text editors but
also in scripting and programming languages such as Bash,
Python, Perl, R, and so on. And also for screen scraping and
other data extraction applications. So why do we study regular expressions
specifically for data cleaning? Well first of all regular expression
are useful to match and transform data. So during the phrases of assessing and then cleaning the data in a larger
data creation life cycle. Now in particular we will see that the
open refine tool that we're going to work with has a regular expression
language call GREL built in. And this will be useful to
understand how it works. And then of course also if you want to do
data cleaning on your own using scripting languages. And for automating workflows you might
then also want to use regular expressions in those scripting languages. On the right you see the cartoon that
I found previously from xkcd that advertises the use of a standard
date format called ISO 8601. So the ISO 8601 date
format looks like this. It has first a couple of letters,
four letters specifically for the year. Followed by a dash and
two letters for the month and then again two letters for
the day, again with a dash. Those what I call letters are technically
actually really numbers between zero and nine so we'll see that shortly. Now these formats however are not
the only ones that are commonly used. In the US for example you often have
a date format that looks like this, month followed by a slash,
followed by a day. And again a slash and then the year. And in Europe it might be the other way
around for example you start with a day. And then instead of a slash as
a separator you'll use maybe a period and then the month, and then the year. So clearly when you have data in
these different formats you have to first match and
find out what form that you have. And then maybe transform it into
the right standard format so you can integrate it and
then do your data analysis subsequently. Now let's continue with the theory
of regular expressions. So I want to give you a brief introduction
where regular expressions come from. And then in a separate video we'll look
at the practice of regular expressions. So in theoretical computer science and in particular in formal language theory
these are expressions, formal expressions that define a search pattern that is
used to match or recognize strings. Let's look in more detail. In a formal definition there are some
base elements, the empty set, the empty string and
then an alphabet sigma of characters. And then the main construct to construct
regular expression is an inductive or recursive definition. So assume you already have
a regular expression R and another regular expression S. Then you can define a new regular
expression by composing R and S in one of several ways. So for example you can say R and
then vertical bar S and that denotes an alternation. So if R denotes a regular expression and
S denotes a regular expression when you say R bar S what you're saying
is that you're looking into text. Or data that matches either R or
S so it's either or. Another expression you can build
from R and S is the concatenation. Sometimes just denoted by putting R and then followed by S without
anything in between. Sometimes a certain operation is put
to denote concatenation maybe a circle. And what does that match? Well if you have R denoting a regular
expression and S, then R concatenated with S denotes the concatenation of
the corresponding matching words. Then finally we have this very powerful
construct called the Kleene star named after the person who popularized it and
invented it and that's R*. So if R is a regular expression
our star matches zero or more occurrences of whatever R matches. And then finally we will sometimes use
parentheses to indicate precedence between the different operators. So we know how to read an expression, how
it can be decomposed into alternations, concatenations, and Kleene stars. Sometimes you can omit the parentheses
if you have precedence rules. Here is a small digression
into theory land if you like. So there is a whole hierarchy of languages
of which regular languages form in some sense the lowest layer. This hierarchy is called
the Chomsky Hierarchy, named after Noam Chomsky who proposed
this in the 1950's, so quite a while ago. The hierarchy consists of these
languages of Type-0, Type-1, Type-2. And finally the most restricted
language class is called Type-3 or regular language. This is where the regular comes
from in regular expression. On the right hand side you see that these
languages are nested inside one another. So every regular language or
Type-3 language is also a Type-2 language which is
also known as a context-free language. Context-free languages themselves
are also context-sensitive languages. So context-sensitive languages again
are a larger class, more expressive, more powerful. And finally Type-0 languages are known
as recursively innumerable languages. And here you have now really the full
computational power of a computer of a touring machine. We're not quite interested in
this as part of this class. But I want to give you this context that
the regular languages that we can match with the regular expression are part of
a larger higher key that is used to study. For example expressive power, languages
and formalism's in computer science. So this resource here that you can
find on Wikipedia we will see for example the type-0 computations
are turing incomplete they can express any turing computation. For example if you want to recognize
whether a number is a prime number you can not use a regular expression for
that. That will not be possible, of course
you could use a regular expression to find whether a number is
a floating point number. Or an integer or a negative number but
not whether it has certain properties for that we would need a much more
powerful language formula. So let's look at an example,regular
languages can be defined using regular grammars. For example let's assume
we want to match a certain string let's say a floating point number. So this floating point number might
be generated using a grammar. And for regular languages we have so called regular grammars in this case
a right recursive regular grammar. What does a grammar consist of? Well it has a number of symbols. N is the number of non-terminal symbols. Those can be replaced in
the grammar formalism. And then there's an alphabet sigma
that we talked about before. Here our alphabet of characters that we
use are the digits zero through nine. Then a plus and a minus symbol denoting
positive and negative numbers. And then e for denoting the exponent
in a floating point number. And then as you see it's a somewhat
tedious to describe the language of floating point numbers
using a regular grammar. We will see shortly that
a regular expression can do a much better job that in practice. But in theory you can create all
the floating point numbers using a grammar as follows. So you have these production rules p. You start with the non-terminal symbol s,
s stands for starting symbol. And then you can apply the rules starting
from s according to any of these production rules. You can for example decide you want to
create a negative floating point number like the example given. So from s you would
then produce -a because you decided to create a negative
floating point number. So since the minus symbol is part
of the alphabet you then cannot replace the minus symbol. The only next symbol you can replace
is a which is a non-terminal symbol. That means you can still be replaced for
something. So now you have to make a decision. You have all these choices
what you want to do with a. So maybe first you want to
produce the number zero. So a can be replaced with zero. So now you've produced the number zero which is after the negative sign
that you already had before. So starting from a you have minus a. And then maybe you decided
to produce the zero a. And then you can say okay maybe that's
enough I want to now produce a decimal point. So you have a rule for that, you can replace the a with
a period followed by a b. And now you're deciding that you come to
the part after the period in the small representation of a floating point number. Now you have lots of choices
of what you want to do next. Again the symbol b now can
also be replaced by any number from zero to nine followed
by a non-terminal c. So you're moving over here. So let's say you want to
produced a number three, say. So you have minus 0.3 now. After you've produced a three you can now
continue on and produce further numbers. Again with c any sequence really
of digits you can produce. And when you're tired and fed up with
this then you might decide that you optionally want to pre use an e for
exponent. Or you can just eliminate the c and
say you're done. And that will be with the m,
t word here with absolon. Let's say we want to create an exponent,
so we replace the c with
a small e with a character e. And then we go to the next phase,
so we go to the letter d. So we're almost done here. So we go with the letter d. We can decide whether we have either
a positive or a negative exponent. Or we might decide to not
say whether it's positive or negative which implies
that it is positive. So we might have the plus sign or
the negative sign, the negative sign or nothing. And once we have the symbol e we can now,
again generate a sequence of numbers as we did before until we find
finally go through our last phase f. And then again for
f we can produce more numbers and finally replace it with epsilon. Now this is extremely tedious, you've noticed how tedious this is,
trying to follow me along here. But this is the formal way by which
we can produce floating point numbers using a regular grammar. Now regular grammars are used
to generate regular languages. They can also be used In backwards mode
in some sense to accept the recognized or pass irregular language. However since these languages
are really used for studying theoretical aspects of
languages in computer science as you see easily see here
they're not very practical. For that we will have regular
expressions that we use in practice. And I will show you one example of that
as a preview for what's coming next. So as I mentioned regular grammars and
regular expressions even which are somewhat more concise
than regular grammars. But even the theoretical regular
expressions are not very handy, not very convenient in practice. So instead the following notation is used
in practice for regular expressions. Okay, so let's see how a floating point
number looks as a regular expressions. You see here there's a negative and
a positive sign here to indicate that we might have a minus or a plus character at
the beginning of a floating point number. The fact that we put it in brackets
followed by a question mark means that this is optional. So we may or may not have a sign,
a positive or negative sign in front of a number. Then we have next a number or
a digit rather between zero and nine. And as you see we put it again
in these brackets to indicate we have a class of characters any
character between zero and nine. And then we have the clean star here. The star indicating that we have zero or
more repetitions of that. We are then following this with a period. Now the period is also a meta character so
it can match any kind of characters. Which is why we have to use this escape
character here to indicate that we mean the period literally. And then that can be optional. And so it goes on. So in the next video I
will go into details how regular expressions like these
are actually used and what they mean. But you see clearly here that what
our theoretical computer scientists are doing for regular languages. And regular grammars is not as practical
as what we want to use here to get rid of the job done in data matching and
data cleaning. So in summary we have seen
that regular expressions can be used to define
formally regular languages. And in the next video we'll then see how
the practice of regular expression works by using a much more reasonable approach
to define and match regular languages. [MUSIC]