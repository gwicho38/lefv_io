1
00:00:00,000 --> 00:00:08,418
[MUSIC]

2
00:00:08,418 --> 00:00:10,562
Now let's look at one more example, and

3
00:00:10,562 --> 00:00:13,820
that is that ligoscript it was
not the gravitational lens.

4
00:00:13,820 --> 00:00:17,568
It had nothing to do with gravitational
lenses, which are fascinating things

5
00:00:17,568 --> 00:00:21,447
as well, but this was gravitational
wave detection in the LIGO's experiment.

6
00:00:21,447 --> 00:00:25,770
Okay, so let's go to shell we want to
go one direct tree up to examples.

7
00:00:25,770 --> 00:00:27,040
So what examples are there, and

8
00:00:27,040 --> 00:00:30,710
then we want to go now down on
level again into LIGO, okay?

9
00:00:30,710 --> 00:00:36,472
So now we're on this LIGO folder, let's
have a quick look at the script first and

10
00:00:36,472 --> 00:00:42,290
you see the script is called
GW 150914 tutorialuri.python.

11
00:00:42,290 --> 00:00:46,810
Now we could make,
let's just look at this.

12
00:00:46,810 --> 00:00:52,246
The first observation of gravitational
waves is made on 14 September 2015 and

13
00:00:52,246 --> 00:00:57,542
was announced by the LIGO and
Virgo collaborations on February 11, 2016.

14
00:00:57,542 --> 00:01:01,850
So they were sitting on this for a while
to make sure they got it all right and

15
00:01:01,850 --> 00:01:06,280
writing the paper, and
doing all the things they have to do.

16
00:01:06,280 --> 00:01:10,505
So they announce it in February 11th
inside us probably knew this once you're

17
00:01:10,505 --> 00:01:11,710
earlier.

18
00:01:11,710 --> 00:01:15,780
Making this a little
documentary about this and

19
00:01:15,780 --> 00:01:19,600
the film maker of that documents where
you said the NCSA for launch today.

20
00:01:19,600 --> 00:01:23,020
Okay, so
this is the data release with it and

21
00:01:23,020 --> 00:01:27,570
there's a Python script that comes
with this, that you can run.

22
00:01:27,570 --> 00:01:32,160
To show how you would get
the signal from the data.

23
00:01:32,160 --> 00:01:33,600
And if you want to understand that,

24
00:01:33,600 --> 00:01:38,190
you should use that study that
the sources run the program.

25
00:01:38,190 --> 00:01:42,880
What we have done is we've taken that
script and we've also annotated it.

26
00:01:42,880 --> 00:01:44,960
So you see here, the inputs and outputs.

27
00:01:44,960 --> 00:01:49,680
Okay, that's case sensitive here,
and I don't want to mess this up.

28
00:01:50,880 --> 00:01:55,940
So here for example I'm looking at the URI

29
00:01:55,940 --> 00:02:00,940
templates, you see it begin in and
out of parameters.

30
00:02:00,940 --> 00:02:08,460
So we've annotated the script, so we get a
visual version of the underlined workflow.

31
00:02:08,460 --> 00:02:10,390
So let's run this again just like before.

32
00:02:12,200 --> 00:02:16,930
So we are in, let's first run
the clean script, again clean probably

33
00:02:16,930 --> 00:02:21,800
removes folders that we don't care
about and then we can run the make.

34
00:02:23,030 --> 00:02:28,630
That's going to take a little moment
to execute the various scripts and

35
00:02:28,630 --> 00:02:30,980
then we can browse the results.

36
00:02:30,980 --> 00:02:33,370
Let's just have a look at that make strip,
how that looks like.

37
00:02:34,800 --> 00:02:38,100
And it looks very much the same
as the one we've seen before,

38
00:02:39,160 --> 00:02:44,900
only now the script is a little different,
I mean it's not that C3, C4.

39
00:02:44,900 --> 00:02:49,850
MATLAB script it is a python script and
then the particular queries that

40
00:02:49,850 --> 00:02:54,780
we are running are also
slightly different.

41
00:02:54,780 --> 00:02:57,480
But they're really, essentially
the only thing that is different,

42
00:02:57,480 --> 00:03:00,580
the queries are fundamentally the same
questions that we are asking,

43
00:03:00,580 --> 00:03:04,260
only these are specialized
to now a particular node.

44
00:03:04,260 --> 00:03:07,350
So when we write these queries
we have to initially say,

45
00:03:07,350 --> 00:03:11,140
this node upstream of that node and so on.

46
00:03:11,140 --> 00:03:15,030
So if you were to do a dif,
actually that's an interesting exercise,

47
00:03:15,030 --> 00:03:16,280
why don't I do this?

48
00:03:16,280 --> 00:03:18,310
That's might be instructional.

49
00:03:18,310 --> 00:03:22,610
So this is the demo script that
builds the products of the demo

50
00:03:23,750 --> 00:03:28,476
in one case for the C3, C4 case and
the other case for the LIGO,

51
00:03:28,476 --> 00:03:32,960
case as to a little dif and
then you can see the differences

52
00:03:34,640 --> 00:03:38,230
and you see there a couple of
differences here and there.

53
00:03:38,230 --> 00:03:40,460
There's a lot that's also the same, yeah.

54
00:03:41,560 --> 00:03:44,030
It will require a little bit
more time to get into this, but

55
00:03:44,030 --> 00:03:49,430
you see sort of highlighted here for
example if you render the work

56
00:03:49,430 --> 00:03:54,930
flow graph even the type is the same yeah,
workflow is spelled as a rough craw

57
00:03:54,930 --> 00:03:59,818
at a common transposition.

58
00:03:59,818 --> 00:04:03,620
And you see that it's

59
00:04:03,620 --> 00:04:07,420
essentially some of the parameters have
changed other than it's rather similar.

60
00:04:07,420 --> 00:04:11,090
So there's actually not a lot of
differences between those two scripts.

61
00:04:11,090 --> 00:04:15,150
This is only meant to assure you
that the demo is fairly generic,

62
00:04:15,150 --> 00:04:18,540
you can apply it really,
it's not sort of one

63
00:04:20,250 --> 00:04:23,972
example is very different from the other,
it's very much the same.

64
00:04:23,972 --> 00:04:28,950
And so now let's look at the results and
let's do maybe a similar brief thing as

65
00:04:28,950 --> 00:04:34,210
before we're going to
mark all the GB files.

66
00:04:34,210 --> 00:04:35,250
Now we have 23.

67
00:04:35,250 --> 00:04:41,660
So the LIGO demo has even more artifacts
being generated before I think it was 14.

68
00:04:41,660 --> 00:04:44,270
So let's have just a quick
look at what those are.

69
00:04:46,710 --> 00:04:48,450
Okay lots of files are being generated.

70
00:04:50,050 --> 00:04:54,960
Okay, lots of different questions and
as usual, the question being

71
00:04:54,960 --> 00:05:00,770
asked is somehow suboptimally maybe but
it's encoded in the file name.

72
00:05:00,770 --> 00:05:05,225
So if we're interested in a data output
program that's called whitened bandpass

73
00:05:05,225 --> 00:05:08,699
wav file, and
we want to know well what goes into that.

74
00:05:10,000 --> 00:05:15,010
This what we seen in the front,
here in the center would have the answer.

75
00:05:15,010 --> 00:05:17,833
This is upstream of
whitened bandpass wav file.

76
00:05:17,833 --> 00:05:22,305
First of all, notice that this is a
prospective prominence graph or a workflow

77
00:05:22,305 --> 00:05:27,500
graph, because it doesn't have this
slightly darker orange sort of instances.

78
00:05:27,500 --> 00:05:32,020
So it says that at the schema level if
you like, well at the workflow level,

79
00:05:32,020 --> 00:05:35,550
the whitened bandpass wave
file depends on three things.

80
00:05:36,640 --> 00:05:41,370
The sampling rate and detector,
and then this parameter called

81
00:05:41,370 --> 00:05:46,510
fs that we could now look up in
the tutorial what it stands for.

82
00:05:46,510 --> 00:05:48,430
I think those are the two, h1 and

83
00:05:48,430 --> 00:05:51,730
l1 correspond to the two detectors,
two instruments.

84
00:05:51,730 --> 00:05:53,522
And again these are the steps, so

85
00:05:53,522 --> 00:05:57,435
this gives you a good idea how this
particular data product was created.

86
00:05:57,435 --> 00:06:00,882
That is your prospective provenance for
this particular data product.

87
00:06:00,882 --> 00:06:05,254
So this, the order in which these products
are shown here Is probably somewhat random

88
00:06:05,254 --> 00:06:08,491
upstream of spectrogram whitened,
that looks very similar.

89
00:06:08,491 --> 00:06:11,395
Personally I would not allow to ask
the question what's different between this

90
00:06:11,395 --> 00:06:12,905
graph and the other one that we just saw?

91
00:06:12,905 --> 00:06:15,655
So a corresponding question
could be written and programmed,

92
00:06:15,655 --> 00:06:18,415
we haven't done that, but
that wouldn't be very difficult to do.

93
00:06:18,415 --> 00:06:22,495
You can say I have this one,
I have that one, what's the difference?

94
00:06:22,495 --> 00:06:27,200
Might be a little project right there,
and what's upstream of the spectrogram?

95
00:06:27,200 --> 00:06:29,210
This looks much smaller, yeah?

96
00:06:29,210 --> 00:06:32,810
So this is a product that doesn't
depend on all of the other things.

97
00:06:32,810 --> 00:06:37,010
Upstream of the shifted wav file,
again that has more stuff.

98
00:06:37,010 --> 00:06:40,520
Upstream of the filtered white noise,
that has less things again.

99
00:06:40,520 --> 00:06:45,140
And again, creating a difference between
these might also be interesting.

100
00:06:45,140 --> 00:06:48,208
So let's look at some data products
tat are really much more differen.

101
00:06:48,208 --> 00:06:51,076
Well these baby graphs we
don't even take for serious,

102
00:06:51,076 --> 00:06:52,917
upstream of coefficients, okay.

103
00:06:52,917 --> 00:06:58,441
I think this demo just basically look for
all the products, what's upsteam of them.

104
00:06:58,441 --> 00:07:01,132
But here's an example that's interesting,

105
00:07:01,132 --> 00:07:04,720
because that has now what
we called hybrid problems.

106
00:07:04,720 --> 00:07:07,050
So there are three output files generated,
and

107
00:07:07,050 --> 00:07:09,670
these seem to depend on these input files.

108
00:07:09,670 --> 00:07:12,610
So now we have to instantiate once again

109
00:07:12,610 --> 00:07:16,110
into the sub-schema level
prospective problems graph,

110
00:07:16,110 --> 00:07:20,070
retrospective problems information
about the files being read and written.

111
00:07:20,070 --> 00:07:23,570
So these input files are read and
these output files were written.

112
00:07:23,570 --> 00:07:25,680
So this is similar to what
we saw before in C3,C4.

113
00:07:25,680 --> 00:07:28,580
And here is the complete recon graph.

114
00:07:28,580 --> 00:07:31,710
You see, so these are all
the outputs being produced and

115
00:07:31,710 --> 00:07:33,590
all the files being produced.

116
00:07:33,590 --> 00:07:35,790
So shifted wav files, we have three.

117
00:07:35,790 --> 00:07:38,350
Stray data, data we have one.

118
00:07:38,350 --> 00:07:40,660
Wave file, we have, again, three.

119
00:07:40,660 --> 00:07:43,330
And here there are various inputs and
intermediate products, okay?

120
00:07:44,540 --> 00:07:48,750
Okay, so I think I'm going to leave it
at that for the downstream queries.

121
00:07:48,750 --> 00:07:51,001
Again, they look like
graphs again like before.

122
00:07:51,001 --> 00:07:55,466
But now we see that they
are somewhat different structure,

123
00:07:55,466 --> 00:07:59,662
because if you want to know,
well if my data is spoiled and

124
00:07:59,662 --> 00:08:03,858
the data that I have is strain L1,
whitened bandpass,

125
00:08:03,858 --> 00:08:07,930
maybe what can be influenced
by it going downstream.

126
00:08:07,930 --> 00:08:11,755
There are three files,
three outputs, three elements.

127
00:08:11,755 --> 00:08:15,880
It could be more than three files
because again this is the schema.

128
00:08:15,880 --> 00:08:20,588
And here is the complete workflow
graph with your UI templates.

129
00:08:20,588 --> 00:08:22,804
This is interesting maybe,

130
00:08:22,804 --> 00:08:28,270
because this is the whole enchilada
if I can use that term here.

131
00:08:28,270 --> 00:08:30,550
It's a technical term,
the whole enchilada.

132
00:08:30,550 --> 00:08:36,360
It's the whole prospective prominence
graph generated from the model.

133
00:08:36,360 --> 00:08:40,710
So this is a nice artifact
to have to understand,

134
00:08:40,710 --> 00:08:45,540
what is really going on in that script,
and although this is still complex.

135
00:08:45,540 --> 00:08:48,390
It makes very clear what is
the data flow between the steps.

136
00:08:48,390 --> 00:08:52,185
It's a good way to communicate
with people, what's happening,

137
00:08:52,185 --> 00:08:56,333
and at the same time ask questions
about dependencies if you have those.

138
00:08:56,333 --> 00:09:03,822
[MUSIC]

139
00:09:03,822 --> 00:09:10,292
[SOUND]