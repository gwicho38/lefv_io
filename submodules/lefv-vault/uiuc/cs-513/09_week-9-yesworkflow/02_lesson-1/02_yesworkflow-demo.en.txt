[MUSIC] And this is an example DataONE 2016. We have also a newer version of this,
but this one I have run before, so, hopefully this will give us less problems. So, the idea of this comes
with DataONE project and we had a little prototype and
post up for together for that. So, what's the idea? We have a number of, well, if you can
go to the demo, first of all you can clone this repository, this might actually
be in some sense cloning this repository, and playing with this demonstration might
be a good way for you to learn about, yes, workflow and that you can use them for
your group project. So, here's the set of the text
that introduces the demo, then the demo folders have a structure
that explains what's going on, so we have an examples folder where
we have different examples. I'm going to pick one that I walked
through after the break, and there are queries, which are queries
against the prominence information. And then there are rules that implement
the auxiliary rules that defines certain views that are needed for those queries. So, here's an example. You can see which artifacts
are being created. You know it gets around this demos,
is quite a bit of software that's been installed, because it brings
together different technologies. What I don't know from the top of my head
is whether we have a docker container that will make it easier to get
everything installed together. I think, we do have that. And I should look into that. But I have sort of native
installation here on disk. So, let's look at an example
first on the website. Let's just browse through it and
then I'll show you after the break, I'll show you some kinds on. We go to the examples. Let's say, we want to look at
this example called C3 C4. This is sort of a symbol
workflow simple script. That relates to coupon three,
coupon four models. The script itself is in a sub
folder called scripts, and so, let's just look at the script for
a moment how it looks like. So, it has this annotations and
it begins in, in, in and out. So, here we describe the whole script
as a whole retrieved as a black box as a workflow that as certain inputs and
outputs. So, we say, there's something called
SYNMAP_land_cover_data, which is an input, there's also a mean
temperature data input, and there's also a mean
precipitation data input. And the outputs there's
three kinds of output, C3 fraction data, C4 fraction data and
cross-section data. So, it looks like there are three
inputs and three upwards. But how do the inputs
depend on the outputs? Or rather, the other way around? How do the outputs depend on the inputs? We don't quite know that. In particular, we also don't know
what are these individual data items? From the UI template here, we see that
in fact, there are these variables, these curly braces. In this URI template, so
this is called a URI template. It annotates this mean temperature. So, mean a temperature is
a conceptual thing, a data element, a node in our workflow graph in the end. It says, well,
its an input to this overall script. But where does the input reside? Where is it on this? Where do I put it? So, you just declare that. You say, well, it's a file. It's not an URL. It's not on a website, or service. It's just a local file. There is an inputs folder and in it, there
is another sub-folder with a strange name. And then in that, there are these nc files, Net cdf files,
those are sort of scientific. It's a scientific data format for
often numerical data. And then it has, in the file name, something called start year,
end year and month. So, if we look in that folder,
just based on this declaration, we can already get an idea
what we're talking about. So, we might actually into
that inputs folder and try to look at the file name there,
and then extract that metadata. And similarly for the outputs. And then there's script self of course,
and again there are further comments
embedded here and there, for example, here we have step called examine pixels
for grass, that's the annotated has. Given that name itself it is inputs and
outputs. And then here's the code,
whatever it's doing, and then there's another step actually
this one has not been annotated, so this is possibly part of the set,
or this is commended out, or excuse me, I think,
this is all commended out, yeah, okay. And on it goes, you see the script
goes on, and on, and on, and it's not obvious from the script
itself what's going on. However once you've run YesWorklow tool,
you can then go to the results folder, and you go see various products
have been created by the demo. So, for example, as a starter we can
look at the complete workflow graph. So, this is the graph that was
created based on your model, and now, you see already much
better what's going on. In this we see three inputs. Precipitation, air temperature,
and land cover map, and we see these are the outputs. And we also see how
the outputs were derived, what were the steps that were involved. For your group project,
if you have a data cleaning workflow, you can have a similar diagram where you
explain what happened to your data set, and then I will work on this column,
that column and so on. You don't have to have a script for
creating such a model. So, refined you don't have a script. You work interactively with it. But you have then the operation history,
and then you can take the operation history,
maybe you could annotate that. Or you do it in a separate file. Or you just take notes
as you work with it, and then those notes form the basis for
your workflow diagram. Or you can make a plan ahead of time,
use the tool to plan and then try to follow the plan. And then as you will probably find,
[SOUND], there were other things that you didn't plan for
where you had to change your plan. There's a good chance that
will happen in real life. Okay, so this is a workflow
diagram that you can get, and then you can have particular queries,
for example, if you want to know what is upstream
of one of these outputs C3, C4. These almost looks like
a copy of the original graph, this is everything upstream of C3. You'll see it looks It seems
to have the same steps. It's not a complete graph,
because C4 is missing here, and so, some of the outputs are missing. But this is the result of a graph query,
where we said, tell me everything that went into C3 fraction data,
or that might have gone into it. What does C3 fraction data depend on,
in terms of the graph? So, this looks similar,
only slightly different, but there's another one that
looks much more different. So, if we look at grass fraction data,
you see it's a much smaller graph and it depends only on one input of tree. Okay. And then finally if you combine
the prospective problems information that YesWorkflow graph, YesWorkflow model
you combine that with retrospective prominence the way it could have come from
the workflow in this case the way it was reconstructed from file names and
folder names, we then get something we call hybrid proponents, or reconstructing
proponents and this is here. So, now, you see actually more details, so you would still get the higher level
diagram overview of your workflow, but now filled in with the concrete
files that were used. What you thought were three
outputs depending on 3 inputs turn out to be 3 outputs
depending on 25 inputs. But these 25 inputs were organized
into basically three groups, so conceptually, that's sort of. 3 inputs, but the mean precipitation
is actually a set of 12 files, one for each month, and similar for
mean air temperature. Again, these are 12 files,
1 for each month. How would you be able to pick that up? Because there was a URI template. So, if that URI template has been
sort of instantiated with the values, based on the file and folder names. And you see that for the land covered
map data, that input is not by month, there's just one of them. And you can now ask additional questions. So, for example, if you ask what are the inputs that C4,
or C3 fraction data depends on? Your answer would be here to 25 file. If you were to ask what does
grass fraction data depends on. Here is the 1 file not the 20 file. Because if you carefully look. There is no path. So, there is a path from here to here, but there is no path from here all
the way to the other inputs. You can't get there, that means,
it doesn't depend on them. So, these are the things
that we can learn. We'll have a short break and
then after the break, I'll show you the running
example of the table. So, I'm going to show you in a moment
basically the demo prototype, which I've built using, by basically cloning from the
GIT repository HH try the newer version, the IGCC 2017, and that's going to work as
well, it seems, so I'm going to use that. What you want to do is basically
go to that GitHub site. If you Google yesworkflow.org, and it has, or just it's .org it will, I think,
re route you to this GitHub. And then there you can identify
the work IDCC 2017 demo, and then you go here click on clone,
or download. And then you get a URL, you copy that URL,
and then if you have done this before. You know what to do?, which is keep clone,
and if you haven't done that and you've got to git how to do that. That will give you a copy
of the repository. That does not mean that the demo works, because you still have to install
certain software on which this depends. And hopefully this is
explained somewhere here. So, if you carefully walk through this, hopefully, you should be able to
install the requisite software. And if there's a problem, it doesn't work,
we'd like to know about it. Since this is sort of developed in my
group, so whatever inconsistencies, or flaws, or whatever you'd find, just
post it on the class form, make a note. There are not problems, or so,
if you don't play with this and let us know, then we can fix it. Okay.
So, let's go to the demo proper. I'll first go through the website very
briefly one more time and then show you, because in the shell, what you see in
the shell is actually not that much. Want to give you first a mental
model of what's happening. So, again, on that demo side we have
an explanation of the demo itself. Overall the purpose of the demo
is to show different use cases, different scripts that have been
mocked up with YesWorkflow. And using the YesWorkflow tool, you can then create the graph,
the graphical model of these workflows. But you can also it is the focus
run queries, ask questions about the proponents, and then you will
see the query answers in text form, or also again in graphical form. So, in particular we have the following
ingredients, prospective problems queries in the context of a single script,
most of these examples are for a single script retrospective provenance
queries from a single script run. We also then have hybrid provenance,
where we combine the prospective and the retrospective information together. It's a little bit like that YesWorkflow, no workflow bridge,
in that flavor, in that style. And there's also part,
we're not going to go into it here, but there's also a more experimental part, where we're looking at provenance from
multiple trips and multiple runs. Because that's, I think, worth mentioning
that in practice as a say, scientist, or data analyst working with data sets. You will also have lots of scripts and
then you use them together. Sometimes, these scripts
as of chained together, maybe you have a preprocessing script. You run that a couple of times and a
couple of data sets until you get what you like, then you switch maybe to another
set of scripts to the actual analytics. And when you're done with that, then
maybe you go to a third phase where you'd post processing, and
create a certain output product. So, if you want to document that larger
process, you know you need extra things beyond the single script
provenance that we're focusing on. And here just for convenience
on the website, we put together a couple of snapshots, so you can
preview a little bit what's out there. So, let's just have a look. This is an example of a prospective
graph that you've seen before. Here is a hybrid graph. Again, prospective graphs
of instantiated with a file level information from the actual run. [MUSIC]