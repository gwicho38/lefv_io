1
00:00:00,000 --> 00:00:03,375
Hello everyone, welcome to CS 421.

2
00:00:03,375 --> 00:00:06,420
One extremely powerful concept you're going to want to know about is

3
00:00:06,420 --> 00:00:09,375
the idea that programs can actually write other programs.

4
00:00:09,375 --> 00:00:11,760
This is sometimes called Metaprogramming,

5
00:00:11,760 --> 00:00:15,990
and there are languages have built-in support for this in the form of macros.

6
00:00:15,990 --> 00:00:18,630
When we're done with this lesson,

7
00:00:18,630 --> 00:00:22,320
you'll have seen three different ways to write programs that write other programs.

8
00:00:22,320 --> 00:00:24,600
I will introduce the defmacro form from

9
00:00:24,600 --> 00:00:27,360
list and we'll see how to use it to extend the language.

10
00:00:27,360 --> 00:00:31,425
I will also talk about some issues that come up with variables in macros.

11
00:00:31,425 --> 00:00:33,270
Now, in order to talk about this,

12
00:00:33,270 --> 00:00:36,950
we're going to use the programming language Emacs lisp or ELIST.

13
00:00:36,950 --> 00:00:39,740
It's very similar to the scheme machine problem you worked on,

14
00:00:39,740 --> 00:00:42,470
but I'll quickly explain new syntax as it comes up.

15
00:00:42,470 --> 00:00:44,995
So, ELIST part is a prompt.

16
00:00:44,995 --> 00:00:48,600
So, defun creates a new function, in this case,

17
00:00:48,600 --> 00:00:53,510
a function name is str-make-ink and it takes two parameters name and delta.

18
00:00:53,510 --> 00:00:57,560
The body of the function concatenates a bunch of strings together.

19
00:00:57,560 --> 00:01:01,175
We call this function with the parameters five and five,

20
00:01:01,175 --> 00:01:04,640
you see that I will put a string that can be pasted into the Emacs repo.

21
00:01:04,640 --> 00:01:07,400
The technique is pretty simple to get started with,

22
00:01:07,400 --> 00:01:09,500
but it can be tricky because you have

23
00:01:09,500 --> 00:01:12,415
literally no language support for the stranger writing.

24
00:01:12,415 --> 00:01:16,010
Debugging code that writes code can be difficult since the place you see

25
00:01:16,010 --> 00:01:20,540
the error is going to be different than the place where the code was generated.

26
00:01:20,540 --> 00:01:24,730
Now, one hobby people sometimes have is to write a program called the quine.

27
00:01:24,730 --> 00:01:27,740
Quine is a program that generates its own source code when it's

28
00:01:27,740 --> 00:01:32,165
run without cheating by reading the source code from disk of course.

29
00:01:32,165 --> 00:01:36,460
So, you can try writing a quine in your favorite language if you have some time.

30
00:01:36,460 --> 00:01:40,400
Now, if you're using a home or iconic language like Lisp or Prologue,

31
00:01:40,400 --> 00:01:45,025
language will usually provide features that allow you to manipulate source code directly.

32
00:01:45,025 --> 00:01:47,685
Most lisp support quasi quotation.

33
00:01:47,685 --> 00:01:49,460
So, the back tick creates a list,

34
00:01:49,460 --> 00:01:52,280
but the comma allows you to splice in a value.

35
00:01:52,280 --> 00:01:57,050
So, in this example, the defun and the x in parentheses will not be evaluated,

36
00:01:57,050 --> 00:01:59,015
they are taken as symbols.

37
00:01:59,015 --> 00:02:02,270
But the common name and comma delta status splice

38
00:02:02,270 --> 00:02:05,000
in the actual values of those parameters.

39
00:02:05,000 --> 00:02:07,745
So, when I run ast-make-inc,

40
00:02:07,745 --> 00:02:10,700
passing in the symbol five and the number five,

41
00:02:10,700 --> 00:02:13,655
it returns a list containing the code to define a function.

42
00:02:13,655 --> 00:02:15,620
I can then pass it to the eval function,

43
00:02:15,620 --> 00:02:18,440
which causes the definition to be compiled.

44
00:02:18,440 --> 00:02:21,410
Now, the technique of having a function write some code and

45
00:02:21,410 --> 00:02:23,945
then calling eval on it was so common.

46
00:02:23,945 --> 00:02:28,430
It created a special forum to combine both steps into one, the defmacro form.

47
00:02:28,430 --> 00:02:31,625
It's very much like the code from the previous slide, but notice how,

48
00:02:31,625 --> 00:02:33,185
when I call them make-inc,

49
00:02:33,185 --> 00:02:36,440
the 10 function is automatically created for us.

50
00:02:36,440 --> 00:02:40,040
Macros are somewhat controversial in programming language community,

51
00:02:40,040 --> 00:02:42,530
some people swear by them and say that it gives you

52
00:02:42,530 --> 00:02:46,310
an expressive power unmatched by any other programming technique.

53
00:02:46,310 --> 00:02:51,005
Other people swear at them for the exact same reason.

54
00:02:51,005 --> 00:02:54,770
It's very difficult to reason about what macro is actually doing.

55
00:02:54,770 --> 00:02:59,240
So, imagine trying to come up with a typing semantics for this single, see what I mean.

56
00:02:59,240 --> 00:03:01,040
I've actually been encouraged by

57
00:03:01,040 --> 00:03:05,030
some other programming-aged people not to teach macros to this class.

58
00:03:05,030 --> 00:03:07,575
But hey, let's do it anyway.

59
00:03:07,575 --> 00:03:10,910
So, what are some reasons we might want Macros?

60
00:03:10,910 --> 00:03:13,950
One reason is we might want to extend the language with

61
00:03:13,950 --> 00:03:18,130
things that act like functions but do not evaluate all their arguments.

62
00:03:18,130 --> 00:03:22,295
So, for example, suppose you want to write your own if like function in a language.

63
00:03:22,295 --> 00:03:25,685
Definition is very simple and if you wrote unit tests four,

64
00:03:25,685 --> 00:03:27,080
they may even pass.

65
00:03:27,080 --> 00:03:30,620
But, if you try to use it to break a recursion,

66
00:03:30,620 --> 00:03:32,630
you'll find that you get an infinite loop,

67
00:03:32,630 --> 00:03:34,510
and discuss the call by value language,

68
00:03:34,510 --> 00:03:38,135
all arguments will be evaluated whether we want them to be or not.

69
00:03:38,135 --> 00:03:40,945
A macro can get around that however.

70
00:03:40,945 --> 00:03:44,960
Another use case for macros is eliminating boilerplate code.

71
00:03:44,960 --> 00:03:47,965
So, common example of that is here.

72
00:03:47,965 --> 00:03:50,210
Now, suppose you are working with a database or opening

73
00:03:50,210 --> 00:03:52,700
a file or accessing some kind of resource,

74
00:03:52,700 --> 00:03:56,490
you first need to acquire the resource and check to see that you actually got it,

75
00:03:56,490 --> 00:03:59,605
then perform whatever operation you wanted using the handle.

76
00:03:59,605 --> 00:04:03,560
Once you're done with that, either normally or because you caught an exception,

77
00:04:03,560 --> 00:04:05,345
you need to close that handle.

78
00:04:05,345 --> 00:04:07,720
So, the code to do that is very similar,

79
00:04:07,720 --> 00:04:10,880
and it would be hard to do this with higher-order functions and eager language.

80
00:04:10,880 --> 00:04:12,050
But if you have macros,

81
00:04:12,050 --> 00:04:17,765
it becomes very simple to fold all that code into a single call like with open.

82
00:04:17,765 --> 00:04:21,020
Another major use case of macros is creating

83
00:04:21,020 --> 00:04:24,185
what's called an embedded domain-specific language.

84
00:04:24,185 --> 00:04:27,875
You now know very well that writing an interpreter's work.

85
00:04:27,875 --> 00:04:29,970
You already have a working programming language,

86
00:04:29,970 --> 00:04:32,120
it may be easier just to extend the language with

87
00:04:32,120 --> 00:04:35,120
macros and to reinvent language from scratch.

88
00:04:35,120 --> 00:04:38,345
Here's a example from the Clojure programming language.

89
00:04:38,345 --> 00:04:40,280
It's the package called hiccup.

90
00:04:40,280 --> 00:04:42,950
It allows you to specify HTML in the form of

91
00:04:42,950 --> 00:04:46,175
vectors and lists and the macro is expanded out for you.

92
00:04:46,175 --> 00:04:50,560
You can even embed code in the HTML and now it will be expanded out too.

93
00:04:50,560 --> 00:04:54,875
Find it much easier to read than at the XML-like syntax or HTML,

94
00:04:54,875 --> 00:04:58,720
and with hiccup, you never need to worry about closing a tag.

95
00:04:58,720 --> 00:05:01,910
Now, the examples I've shown you have been a bit simple,

96
00:05:01,910 --> 00:05:04,640
so I want to be sure about one thing that you don't get

97
00:05:04,640 --> 00:05:08,945
the impression that this is like number defined macros or the C pre-processor.

98
00:05:08,945 --> 00:05:11,160
The lisp macros are Turing complete,

99
00:05:11,160 --> 00:05:12,900
the macro can do anything at all,

100
00:05:12,900 --> 00:05:14,775
you can program to the input.

101
00:05:14,775 --> 00:05:17,900
In this example, we have a macro called unplus that actually

102
00:05:17,900 --> 00:05:20,810
rewrites the source code before the compiler gets it,

103
00:05:20,810 --> 00:05:22,515
replacing pluses with minuses.

104
00:05:22,515 --> 00:05:24,620
I don't know why you'd want to do such a thing,

105
00:05:24,620 --> 00:05:26,185
but hey, you can do it.

106
00:05:26,185 --> 00:05:29,495
I see macros that automatically paralyze code,

107
00:05:29,495 --> 00:05:35,740
macros that converts code into CPS and create anonymous threads out of functions.

108
00:05:35,740 --> 00:05:41,090
One of the taglines for Lisp is that it's a programmable programming language,

109
00:05:41,090 --> 00:05:42,470
and that the way the program and it is

110
00:05:42,470 --> 00:05:44,990
the first singular perfect language for solving the problem you

111
00:05:44,990 --> 00:05:49,615
have and then create that language using macros and then use that to solve the problem.

112
00:05:49,615 --> 00:05:52,100
You have to be careful with that technique though.

113
00:05:52,100 --> 00:05:54,260
It's very easy to make a code that's

114
00:05:54,260 --> 00:05:57,670
unreadable because no one's going to know what your macros are doing.

115
00:05:57,670 --> 00:06:01,265
So, let's talk about how macros interact with variables.

116
00:06:01,265 --> 00:06:05,810
In this example, we have a global variable named sum that we want to pass to the macro.

117
00:06:05,810 --> 00:06:09,470
But unfortunately, the macro has a local variable called sum as well.

118
00:06:09,470 --> 00:06:12,820
Now, this local variable ends up shadowing the global one.

119
00:06:12,820 --> 00:06:15,800
When I call mk-sum on two and sum,

120
00:06:15,800 --> 00:06:17,840
the macros expanded at compile time.

121
00:06:17,840 --> 00:06:23,750
So, the symbol sum is passed in and just paste it into the code and gets captured.

122
00:06:23,750 --> 00:06:26,989
Now, you could just try changing the name of your variable,

123
00:06:26,989 --> 00:06:29,540
but you can never really be certain that you would always avoid

124
00:06:29,540 --> 00:06:32,800
capture since users could mean they're variables anything they want.

125
00:06:32,800 --> 00:06:34,320
So, to fix this,

126
00:06:34,320 --> 00:06:35,730
there's a function called gensym,

127
00:06:35,730 --> 00:06:39,605
which will give you a new variable that's guaranteed not to have been used before.

128
00:06:39,605 --> 00:06:42,320
You've seen this in your machine problem and you may have

129
00:06:42,320 --> 00:06:45,095
seen it in prologue if you gave it the right kind of query,

130
00:06:45,095 --> 00:06:49,970
because prologue will gensym variables automatically when it needs them.

131
00:06:49,970 --> 00:06:54,095
And SWI prologue, the gensym variables start with an underscore.

132
00:06:54,095 --> 00:06:57,110
So, that is unintended variable capture and how to fix it,

133
00:06:57,110 --> 00:06:59,570
but sometimes, you actually want to capture a variable.

134
00:06:59,570 --> 00:07:01,190
So, here's a fun example.

135
00:07:01,190 --> 00:07:03,725
Sometimes you need to open a file or a database,

136
00:07:03,725 --> 00:07:05,900
and the function to do that will give you a handle that you

137
00:07:05,900 --> 00:07:08,260
must check to see if it succeeded and if so,

138
00:07:08,260 --> 00:07:10,310
you use a handle to do your operation.

139
00:07:10,310 --> 00:07:13,100
This is similar to the width macros we

140
00:07:13,100 --> 00:07:16,625
saw earlier but we're solving in a slightly different way.

141
00:07:16,625 --> 00:07:20,075
So, you end up with the codes like nine through 11, right?

142
00:07:20,075 --> 00:07:21,170
You open the buffer,

143
00:07:21,170 --> 00:07:24,340
you check to see if the buffer exists and you do something with it.

144
00:07:24,340 --> 00:07:27,430
So, to avoid working for the computer,

145
00:07:27,430 --> 00:07:30,530
you can create this macro called a anaphoric if.

146
00:07:30,530 --> 00:07:32,930
Ana is Greek meaning again.

147
00:07:32,930 --> 00:07:37,990
So, this macro defines a variable called it to be whatever was in the condition part.

148
00:07:37,990 --> 00:07:41,810
Now, that can be really useful assuming you don't already have a variable named it.

149
00:07:41,810 --> 00:07:44,945
If you're trying these examples yourselves,

150
00:07:44,945 --> 00:07:48,020
you might want to see if you can make a more general version where you can

151
00:07:48,020 --> 00:07:52,370
specify the name of the variable instead of just using the variable name it.

152
00:07:52,370 --> 00:07:56,330
But here's an example that does allow you to specify names.

153
00:07:56,330 --> 00:08:00,110
The Emacs lisp doesn't have pattern matching like Haskell does,

154
00:08:00,110 --> 00:08:01,580
but with this sort of macro,

155
00:08:01,580 --> 00:08:02,935
we can add it.

156
00:08:02,935 --> 00:08:06,115
So, an example here we call match on x,

157
00:08:06,115 --> 00:08:07,740
I mean x is supposed to be a pair.

158
00:08:07,740 --> 00:08:09,350
So, the first part gets assigned to a,

159
00:08:09,350 --> 00:08:14,365
the second apart gets assigned to b and then the body just adds a and b together.

160
00:08:14,365 --> 00:08:18,575
So, the ability to have a program that writes another program is hard to overstate.

161
00:08:18,575 --> 00:08:21,115
This was just a very brief introduction,

162
00:08:21,115 --> 00:08:24,470
and my brother used to work for the trucking industry as a database programmer.

163
00:08:24,470 --> 00:08:28,400
He is often asked to rate these reports Software in C++,

164
00:08:28,400 --> 00:08:31,490
and he noticed that most reports have the same kind of routines in them.

165
00:08:31,490 --> 00:08:34,040
So, what he did was write a program where he could

166
00:08:34,040 --> 00:08:36,815
list what sections were needed and the program will

167
00:08:36,815 --> 00:08:39,740
output the source to the report generator and then he would

168
00:08:39,740 --> 00:08:42,965
just customize that to the particular situation.

169
00:08:42,965 --> 00:08:46,210
This made a one-hour task into a five-minute one.

170
00:08:46,210 --> 00:08:49,610
So, Haskell does have a system called template Haskell if

171
00:08:49,610 --> 00:08:52,720
you're interested in macros for Haskell,

172
00:08:52,720 --> 00:08:56,950
but you may notice Haskell programmers don't often feel the need to use macros at all.

173
00:08:56,950 --> 00:08:59,720
So, for one thing since Haskell is lazy,

174
00:08:59,720 --> 00:09:02,165
we've removed the first use case we discussed.

175
00:09:02,165 --> 00:09:05,905
You can write an if statement in Haskell and I'll be just fine.

176
00:09:05,905 --> 00:09:08,960
We also have type classes and Monads which do a lot of

177
00:09:08,960 --> 00:09:12,860
the boilerplate wrapping that macros did in other languages.

178
00:09:12,860 --> 00:09:15,440
So, that's about all we have for this topic.

179
00:09:15,440 --> 00:09:19,955
I hope you'll try writing a language that uses Macros just to experience what it's like.

180
00:09:19,955 --> 00:09:22,820
Really does change the way you think about programming,

181
00:09:22,820 --> 00:09:26,520
even if you don't use macros on a day-to-day basis.