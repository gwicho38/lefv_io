1
00:00:00,000 --> 00:00:01,995
Hello and welcome back.

2
00:00:01,995 --> 00:00:03,705
In the last video,

3
00:00:03,705 --> 00:00:05,640
we introduced our notation for grammars and

4
00:00:05,640 --> 00:00:08,505
discussed some of the properties that grammars could have.

5
00:00:08,505 --> 00:00:11,565
Now we're gonna talk about how to get started parsing them.

6
00:00:11,565 --> 00:00:15,255
The full process of parsing is quite complex,

7
00:00:15,255 --> 00:00:17,880
so we're going to break it down into more manageable steps.

8
00:00:17,880 --> 00:00:19,900
In this video we're going talk about first sets,

9
00:00:19,900 --> 00:00:23,520
it is: What is the first terminal symbol you could encounter,

10
00:00:23,520 --> 00:00:26,640
while parsing a particular non-terminal.

11
00:00:26,640 --> 00:00:29,730
Your objectives are simple enough to state,

12
00:00:29,730 --> 00:00:31,530
you should be able to compute the first set

13
00:00:31,530 --> 00:00:34,500
for the non terminal symbols of a given grammar.

14
00:00:34,500 --> 00:00:36,240
Now the big picture,

15
00:00:36,240 --> 00:00:40,205
is that we have some grammar for a language L that we want to parse.

16
00:00:40,205 --> 00:00:42,890
Grammar consists of a bunch of productions that tell us

17
00:00:42,890 --> 00:00:45,625
how to construct a non-terminal from other symbols.

18
00:00:45,625 --> 00:00:48,920
We can't just look at a stream of tokens and tell them on a glance,

19
00:00:48,920 --> 00:00:52,550
whether or not it correctly constructs that non-terminal symbol,

20
00:00:52,550 --> 00:00:57,715
but we can make a list of the first symbols we would see in a correct construction.

21
00:00:57,715 --> 00:00:59,265
As example what I mean,

22
00:00:59,265 --> 00:01:01,080
consider the grammar on this slide.

23
00:01:01,080 --> 00:01:02,835
The two E rules say that,

24
00:01:02,835 --> 00:01:06,645
an E is a Z followed by another E, are also Q.

25
00:01:06,645 --> 00:01:11,350
In English, this means that E is a series of zero more Z's followed by a Q,

26
00:01:11,350 --> 00:01:13,725
the actual number of Z's is arbitrary.

27
00:01:13,725 --> 00:01:18,710
To simplify things, we can see that the first set of E is Z and Q.

28
00:01:18,710 --> 00:01:20,425
If we are trying to parse an E,

29
00:01:20,425 --> 00:01:23,900
we can check to see if the next token being parsed is a Z or Q.

30
00:01:23,900 --> 00:01:25,790
If it is, we carry on with the parse,

31
00:01:25,790 --> 00:01:28,980
otherwise we abort with an error message.

32
00:01:29,950 --> 00:01:34,150
The algorithm to compute first sets is an iterative one.

33
00:01:34,150 --> 00:01:36,330
We build up our list of first sets,

34
00:01:36,330 --> 00:01:38,685
until there's nothing more left to add.

35
00:01:38,685 --> 00:01:42,210
We start by assuming that the first set of each symbol is empty,

36
00:01:42,210 --> 00:01:44,750
and then for each symbol X in our grammar,

37
00:01:44,750 --> 00:01:46,475
we have one of three cases.

38
00:01:46,475 --> 00:01:49,755
First, X might be a terminal symbol,

39
00:01:49,755 --> 00:01:52,395
in that case X is its own first set.

40
00:01:52,395 --> 00:01:56,960
Second, there might be a production of the form X goes to Epsilon.

41
00:01:56,960 --> 00:02:00,250
In that case we add epsilon to first of X.

42
00:02:00,250 --> 00:02:05,420
Remember, this epsilon rule means that X is optional and that it could just drop out.

43
00:02:05,420 --> 00:02:10,700
The third case, suppose there is a production of the form X goes to Y one, Y two,

44
00:02:10,700 --> 00:02:14,300
et cetera, what we do is we take the first set of Y one,

45
00:02:14,300 --> 00:02:17,900
Y two, et cetera, and add that to the first set of X.

46
00:02:17,900 --> 00:02:23,060
How do we do that? Well, we have to look at the first symbol in the string of Ys.

47
00:02:23,060 --> 00:02:25,255
There are three things that could happen there.

48
00:02:25,255 --> 00:02:29,805
It maybe that Y one does not contain epsilon.

49
00:02:29,805 --> 00:02:32,970
In that case, we just use the first set of Y one.

50
00:02:32,970 --> 00:02:34,700
None of the other symbols will contribute it to

51
00:02:34,700 --> 00:02:37,295
the FIRST set since Y one is blocking them.

52
00:02:37,295 --> 00:02:42,225
The second sub-case, it may be that first of Y one does contain epsilon.

53
00:02:42,225 --> 00:02:46,920
When that happens, we just add the first set of Y one excluding epsilon,

54
00:02:46,920 --> 00:02:48,705
to the first set of X.

55
00:02:48,705 --> 00:02:52,460
Then we take the first set of the rest of the symbols starting from Y two,

56
00:02:52,460 --> 00:02:54,445
and add that to the first of X.

57
00:02:54,445 --> 00:02:57,330
This accounts for when Y one disappears.

58
00:02:57,330 --> 00:02:59,955
The final sub-case is interesting.

59
00:02:59,955 --> 00:03:02,895
It may be that all of those Y's contain epsilon.

60
00:03:02,895 --> 00:03:07,420
When that happens, we add epsilon to first of X directly.

61
00:03:07,780 --> 00:03:11,810
Here's a diagram I like to use to understand that third case.

62
00:03:11,810 --> 00:03:13,835
Suppose we have a symbol X,

63
00:03:13,835 --> 00:03:16,070
that has a production taking it to Y zero,

64
00:03:16,070 --> 00:03:17,645
Y one, Y two.

65
00:03:17,645 --> 00:03:20,815
To parse an X, we must first parcel Y zero.

66
00:03:20,815 --> 00:03:23,610
Whatever is in Y zero's first set,

67
00:03:23,610 --> 00:03:26,115
must also be in X's first set.

68
00:03:26,115 --> 00:03:28,500
Now, if Y zero has an epsilon production,

69
00:03:28,500 --> 00:03:32,320
then Y zero could disappear leaving Y one as the first symbol of X.

70
00:03:32,320 --> 00:03:35,100
Finally, it could happen that all of Y zero,

71
00:03:35,100 --> 00:03:37,135
Y one and Y two become epsilon,

72
00:03:37,135 --> 00:03:41,100
which mean that X itself could become epsilon.

73
00:03:41,290 --> 00:03:44,015
Here's some small examples.

74
00:03:44,015 --> 00:03:47,320
In example one we have a production S goes to xAB,

75
00:03:47,320 --> 00:03:49,140
since X is a terminal symbol,

76
00:03:49,140 --> 00:03:51,660
the first set of xAB is simply x.

77
00:03:51,660 --> 00:03:55,610
So, therefore the first set of S is also simply X.

78
00:03:55,610 --> 00:03:59,155
In example two, we have three A productions,

79
00:03:59,155 --> 00:04:01,945
we add Y and Z to the first set of A,

80
00:04:01,945 --> 00:04:04,200
because of the second and third productions,

81
00:04:04,200 --> 00:04:08,300
and we add epsilon to the first set of A because of the first production.

82
00:04:08,300 --> 00:04:11,044
In example three, we have these two B productions,

83
00:04:11,044 --> 00:04:14,065
which make use of the A symbol from example two.

84
00:04:14,065 --> 00:04:18,350
We had R to the first set of B because of the second production,

85
00:04:18,350 --> 00:04:20,420
and we add the first set of A to B,

86
00:04:20,420 --> 00:04:21,920
because of the first production,

87
00:04:21,920 --> 00:04:23,530
but we leave out epsilon,

88
00:04:23,530 --> 00:04:26,975
instead we add the Q that comes after the A.

89
00:04:26,975 --> 00:04:29,010
Finally in example four,

90
00:04:29,010 --> 00:04:30,975
we had the first set of A to C,

91
00:04:30,975 --> 00:04:32,595
because of the first production,

92
00:04:32,595 --> 00:04:35,385
and since both of these A symbols can become epsilon,

93
00:04:35,385 --> 00:04:38,335
we add epsilon to C's first set as well.

94
00:04:38,335 --> 00:04:43,440
The second production causes us to add B's first set to C's first set.

95
00:04:44,750 --> 00:04:47,800
Let's go through a more complete example now.

96
00:04:47,800 --> 00:04:50,840
We'll use this grammar which describes the language with if,

97
00:04:50,840 --> 00:04:52,460
then statements, print statements,

98
00:04:52,460 --> 00:04:55,565
and expressions that have identifiers pointers and plus.

99
00:04:55,565 --> 00:04:57,980
The way I like to do this is create a table,

100
00:04:57,980 --> 00:05:00,810
with the empty sets off to the side.

101
00:05:01,460 --> 00:05:04,790
The first thing I do, is go through their productions and

102
00:05:04,790 --> 00:05:07,910
identify all the ones that start with a terminal symbol.

103
00:05:07,910 --> 00:05:10,685
I add these symbols to the corresponding first sets,

104
00:05:10,685 --> 00:05:15,900
and then I know I'm done with those productions for the rest of the calculation.

105
00:05:16,550 --> 00:05:20,990
The next thing I do, is go from the top of the grammar to the bottom,

106
00:05:20,990 --> 00:05:23,810
and process each production one at a time.

107
00:05:23,810 --> 00:05:25,610
I can skip all the ones that begin with

108
00:05:25,610 --> 00:05:28,450
the terminal symbol since we took care of that on the last slide.

109
00:05:28,450 --> 00:05:30,670
The first rule we would look at is,

110
00:05:30,670 --> 00:05:32,330
E goes to E plus E,

111
00:05:32,330 --> 00:05:34,310
which doesn't do anything for us right now

112
00:05:34,310 --> 00:05:37,180
since we haven't added anything to E's first set yet.

113
00:05:37,180 --> 00:05:40,350
The next production is E goes to PID.

114
00:05:40,350 --> 00:05:42,990
We add P's first set to E's,

115
00:05:42,990 --> 00:05:47,100
omitting the epsilon and advancing to add the ID symbol.

116
00:05:49,270 --> 00:05:51,820
Once you've gone down the list,

117
00:05:51,820 --> 00:05:56,510
you do it again to see if anything you've changed has an effect on the previous rule.

118
00:05:56,510 --> 00:05:59,870
The only one that could change is the E goes to E plus E rule,

119
00:05:59,870 --> 00:06:01,970
but since E doesn't have an epsilon production,

120
00:06:01,970 --> 00:06:03,515
this doesn't add anything new.

121
00:06:03,515 --> 00:06:05,035
Therefore, we're done.

122
00:06:05,035 --> 00:06:07,215
Let's look at a more complicated grammar.

123
00:06:07,215 --> 00:06:08,860
This one doesn't have any meaning,

124
00:06:08,860 --> 00:06:11,150
it's just a complicated enough grammar to demonstrate

125
00:06:11,150 --> 00:06:14,880
all the weird things that can happen while computing a first set.

126
00:06:15,460 --> 00:06:19,990
The first step is to add all the initial terminals and epsilon rules.

127
00:06:19,990 --> 00:06:23,430
This leaves us with just three rules to check.

128
00:06:24,430 --> 00:06:27,515
Let's check S goes to Ax.

129
00:06:27,515 --> 00:06:30,230
The first set of A has 1 and 2 in it,

130
00:06:30,230 --> 00:06:36,105
we need to add those to the first set of S. Now let's check S goes to BY.

131
00:06:36,105 --> 00:06:41,470
This makes us need to add three from B's first set to A's first set.

132
00:06:42,440 --> 00:06:48,320
Now, let's check B goes to C. We have to add four and epsilon.

133
00:06:48,320 --> 00:06:52,400
Before I told you that you should emit epsilon new copy from another first set,

134
00:06:52,400 --> 00:06:55,730
but in this case we keep it because C's the only symbol there is.

135
00:06:55,730 --> 00:06:58,130
This is that third sub-case from earlier when

136
00:06:58,130 --> 00:07:01,280
all the symbols on the right hand side could become epsilon.

137
00:07:01,280 --> 00:07:03,720
Now you might be thinking wait a minute,

138
00:07:03,720 --> 00:07:06,885
we added these First set to A one step ago,

139
00:07:06,885 --> 00:07:09,075
but now we've added more stuff to B.

140
00:07:09,075 --> 00:07:13,165
This is correct, and this is why we need to iterate through the rules again.

141
00:07:13,165 --> 00:07:16,410
We start from the top with S goes to Ax again,

142
00:07:16,410 --> 00:07:18,420
but this doesn't do anything.

143
00:07:18,420 --> 00:07:20,924
Next, we check S goes to BY,

144
00:07:20,924 --> 00:07:22,425
and we add the four.

145
00:07:22,425 --> 00:07:23,840
Since there is an epsilon,

146
00:07:23,840 --> 00:07:25,760
we have to go forward to the next symbol,

147
00:07:25,760 --> 00:07:28,230
which means we also have to add the Y.

148
00:07:28,230 --> 00:07:30,615
Finally, we check B goes to C,

149
00:07:30,615 --> 00:07:32,505
and this doesn't add anything new.

150
00:07:32,505 --> 00:07:36,230
At this point, your algorithm would take one more pass through the whole thing,

151
00:07:36,230 --> 00:07:38,315
but that wouldn't add any new symbols,

152
00:07:38,315 --> 00:07:40,025
so now we are done.

153
00:07:40,025 --> 00:07:42,560
There you have it. In the next video we'll talk

154
00:07:42,560 --> 00:07:46,080
about a related concept called the FOLLOW set.