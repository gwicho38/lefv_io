Hello everyone, welcome back. Just want to go over a few slides about the language we're going to use in this course called Haskell. So, how do you go about picking a language for programming language course? One of the things that I assume is that you already know a lot about the imperative languages like Java, or C++, and object-oriented languages, but you're not as likely to have seen a functional programming language which is where the Haskell is part of that language family. It turns out in industry and research, the functional languages are becoming increasingly important. They are actually very good at things involving say multi-core. They also tend to be more mathematically pure than the imperative object-oriented languages, so it's easier to reason about them. There's been studies shown that programmer productivity is much, much higher in a functional programming language. So we're going to use language Haskell. Haskell has been around for a little while now. There was a time when programming language researchers they would try to publish your ideas and there'd be all different languages needed for this, and it became increasingly difficult to communicate, so they decided that it would be nice to have a single language and they can all use. So, late 80s they began putting together this language. One of the things that they really wanted was this language not to become very successful. They didn't want there to be a large community of people using it, they wanted it to be somewhat small so that they could change the language a lot. They didn't want to have to deal with legacy code. Unfortunately for them, the language didn't become popular, reached a certain critical mass, the language is actually used even in industry now like, for example, on Facebook they use it to do their spam filter. So, some of the features of the language it's called a higher-order functional language and we'll talk about what that means in future lectures. The syntax of Haskell is very concise. It looks kind of like you're writing in mathematics. It's a very clean looking language. They have a type inference, which means you don't have to declare the type of things if you don't want to, it's good practice to do so anyway, but the language was actually infer the types of everything for you and they will complain if there is something that's mismatching, but you will find as you get to know this language that if the compiler says that there's no type errors and you're probably pretty close to having a working program. But for our purposes what we really want is that this language is very good for writing other languages and implementing other languages with them. So, to give you a demo of what this language is like, what I'd like you to do, there is a handout on the website for Project Euler, there's just three problems that came off that website. So, I'd like you to try writing them in your favorite language, and then I'm going to show you a few slides of how to write them in Haskell. We'll see how that goes.